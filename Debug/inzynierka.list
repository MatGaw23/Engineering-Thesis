
inzynierka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007020  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b0  080071c0  080071c0  000171c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007870  08007870  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007870  08007870  00017870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007878  08007878  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007878  08007878  00017878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800787c  0800787c  0001787c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004118  20000074  080078f4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000418c  080078f4  0002418c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e1b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000353a  00000000  00000000  00036ebf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001098  00000000  00000000  0003a400  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f88  00000000  00000000  0003b498  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019632  00000000  00000000  0003c420  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010408  00000000  00000000  00055a52  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00093e49  00000000  00000000  00065e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f9ca3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046e4  00000000  00000000  000f9d20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080071a8 	.word	0x080071a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080071a8 	.word	0x080071a8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr

08000204 <__aeabi_frsub>:
 8000204:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000208:	e002      	b.n	8000210 <__addsf3>
 800020a:	bf00      	nop

0800020c <__aeabi_fsub>:
 800020c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000210 <__addsf3>:
 8000210:	0042      	lsls	r2, r0, #1
 8000212:	bf1f      	itttt	ne
 8000214:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000218:	ea92 0f03 	teqne	r2, r3
 800021c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000220:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000224:	d06a      	beq.n	80002fc <__addsf3+0xec>
 8000226:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800022a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800022e:	bfc1      	itttt	gt
 8000230:	18d2      	addgt	r2, r2, r3
 8000232:	4041      	eorgt	r1, r0
 8000234:	4048      	eorgt	r0, r1
 8000236:	4041      	eorgt	r1, r0
 8000238:	bfb8      	it	lt
 800023a:	425b      	neglt	r3, r3
 800023c:	2b19      	cmp	r3, #25
 800023e:	bf88      	it	hi
 8000240:	4770      	bxhi	lr
 8000242:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000246:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800024a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800024e:	bf18      	it	ne
 8000250:	4240      	negne	r0, r0
 8000252:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000256:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800025a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800025e:	bf18      	it	ne
 8000260:	4249      	negne	r1, r1
 8000262:	ea92 0f03 	teq	r2, r3
 8000266:	d03f      	beq.n	80002e8 <__addsf3+0xd8>
 8000268:	f1a2 0201 	sub.w	r2, r2, #1
 800026c:	fa41 fc03 	asr.w	ip, r1, r3
 8000270:	eb10 000c 	adds.w	r0, r0, ip
 8000274:	f1c3 0320 	rsb	r3, r3, #32
 8000278:	fa01 f103 	lsl.w	r1, r1, r3
 800027c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000280:	d502      	bpl.n	8000288 <__addsf3+0x78>
 8000282:	4249      	negs	r1, r1
 8000284:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000288:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800028c:	d313      	bcc.n	80002b6 <__addsf3+0xa6>
 800028e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000292:	d306      	bcc.n	80002a2 <__addsf3+0x92>
 8000294:	0840      	lsrs	r0, r0, #1
 8000296:	ea4f 0131 	mov.w	r1, r1, rrx
 800029a:	f102 0201 	add.w	r2, r2, #1
 800029e:	2afe      	cmp	r2, #254	; 0xfe
 80002a0:	d251      	bcs.n	8000346 <__addsf3+0x136>
 80002a2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002aa:	bf08      	it	eq
 80002ac:	f020 0001 	biceq.w	r0, r0, #1
 80002b0:	ea40 0003 	orr.w	r0, r0, r3
 80002b4:	4770      	bx	lr
 80002b6:	0049      	lsls	r1, r1, #1
 80002b8:	eb40 0000 	adc.w	r0, r0, r0
 80002bc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80002c0:	f1a2 0201 	sub.w	r2, r2, #1
 80002c4:	d1ed      	bne.n	80002a2 <__addsf3+0x92>
 80002c6:	fab0 fc80 	clz	ip, r0
 80002ca:	f1ac 0c08 	sub.w	ip, ip, #8
 80002ce:	ebb2 020c 	subs.w	r2, r2, ip
 80002d2:	fa00 f00c 	lsl.w	r0, r0, ip
 80002d6:	bfaa      	itet	ge
 80002d8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002dc:	4252      	neglt	r2, r2
 80002de:	4318      	orrge	r0, r3
 80002e0:	bfbc      	itt	lt
 80002e2:	40d0      	lsrlt	r0, r2
 80002e4:	4318      	orrlt	r0, r3
 80002e6:	4770      	bx	lr
 80002e8:	f092 0f00 	teq	r2, #0
 80002ec:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002f0:	bf06      	itte	eq
 80002f2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002f6:	3201      	addeq	r2, #1
 80002f8:	3b01      	subne	r3, #1
 80002fa:	e7b5      	b.n	8000268 <__addsf3+0x58>
 80002fc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000300:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000304:	bf18      	it	ne
 8000306:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800030a:	d021      	beq.n	8000350 <__addsf3+0x140>
 800030c:	ea92 0f03 	teq	r2, r3
 8000310:	d004      	beq.n	800031c <__addsf3+0x10c>
 8000312:	f092 0f00 	teq	r2, #0
 8000316:	bf08      	it	eq
 8000318:	4608      	moveq	r0, r1
 800031a:	4770      	bx	lr
 800031c:	ea90 0f01 	teq	r0, r1
 8000320:	bf1c      	itt	ne
 8000322:	2000      	movne	r0, #0
 8000324:	4770      	bxne	lr
 8000326:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800032a:	d104      	bne.n	8000336 <__addsf3+0x126>
 800032c:	0040      	lsls	r0, r0, #1
 800032e:	bf28      	it	cs
 8000330:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000334:	4770      	bx	lr
 8000336:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800033a:	bf3c      	itt	cc
 800033c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000340:	4770      	bxcc	lr
 8000342:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000346:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800034a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800034e:	4770      	bx	lr
 8000350:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000354:	bf16      	itet	ne
 8000356:	4608      	movne	r0, r1
 8000358:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800035c:	4601      	movne	r1, r0
 800035e:	0242      	lsls	r2, r0, #9
 8000360:	bf06      	itte	eq
 8000362:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000366:	ea90 0f01 	teqeq	r0, r1
 800036a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800036e:	4770      	bx	lr

08000370 <__aeabi_ui2f>:
 8000370:	f04f 0300 	mov.w	r3, #0
 8000374:	e004      	b.n	8000380 <__aeabi_i2f+0x8>
 8000376:	bf00      	nop

08000378 <__aeabi_i2f>:
 8000378:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800037c:	bf48      	it	mi
 800037e:	4240      	negmi	r0, r0
 8000380:	ea5f 0c00 	movs.w	ip, r0
 8000384:	bf08      	it	eq
 8000386:	4770      	bxeq	lr
 8000388:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800038c:	4601      	mov	r1, r0
 800038e:	f04f 0000 	mov.w	r0, #0
 8000392:	e01c      	b.n	80003ce <__aeabi_l2f+0x2a>

08000394 <__aeabi_ul2f>:
 8000394:	ea50 0201 	orrs.w	r2, r0, r1
 8000398:	bf08      	it	eq
 800039a:	4770      	bxeq	lr
 800039c:	f04f 0300 	mov.w	r3, #0
 80003a0:	e00a      	b.n	80003b8 <__aeabi_l2f+0x14>
 80003a2:	bf00      	nop

080003a4 <__aeabi_l2f>:
 80003a4:	ea50 0201 	orrs.w	r2, r0, r1
 80003a8:	bf08      	it	eq
 80003aa:	4770      	bxeq	lr
 80003ac:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003b0:	d502      	bpl.n	80003b8 <__aeabi_l2f+0x14>
 80003b2:	4240      	negs	r0, r0
 80003b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003b8:	ea5f 0c01 	movs.w	ip, r1
 80003bc:	bf02      	ittt	eq
 80003be:	4684      	moveq	ip, r0
 80003c0:	4601      	moveq	r1, r0
 80003c2:	2000      	moveq	r0, #0
 80003c4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003c8:	bf08      	it	eq
 80003ca:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003ce:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003d2:	fabc f28c 	clz	r2, ip
 80003d6:	3a08      	subs	r2, #8
 80003d8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003dc:	db10      	blt.n	8000400 <__aeabi_l2f+0x5c>
 80003de:	fa01 fc02 	lsl.w	ip, r1, r2
 80003e2:	4463      	add	r3, ip
 80003e4:	fa00 fc02 	lsl.w	ip, r0, r2
 80003e8:	f1c2 0220 	rsb	r2, r2, #32
 80003ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f0:	fa20 f202 	lsr.w	r2, r0, r2
 80003f4:	eb43 0002 	adc.w	r0, r3, r2
 80003f8:	bf08      	it	eq
 80003fa:	f020 0001 	biceq.w	r0, r0, #1
 80003fe:	4770      	bx	lr
 8000400:	f102 0220 	add.w	r2, r2, #32
 8000404:	fa01 fc02 	lsl.w	ip, r1, r2
 8000408:	f1c2 0220 	rsb	r2, r2, #32
 800040c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000410:	fa21 f202 	lsr.w	r2, r1, r2
 8000414:	eb43 0002 	adc.w	r0, r3, r2
 8000418:	bf08      	it	eq
 800041a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800041e:	4770      	bx	lr

08000420 <__aeabi_ldivmod>:
 8000420:	b97b      	cbnz	r3, 8000442 <__aeabi_ldivmod+0x22>
 8000422:	b972      	cbnz	r2, 8000442 <__aeabi_ldivmod+0x22>
 8000424:	2900      	cmp	r1, #0
 8000426:	bfbe      	ittt	lt
 8000428:	2000      	movlt	r0, #0
 800042a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800042e:	e006      	blt.n	800043e <__aeabi_ldivmod+0x1e>
 8000430:	bf08      	it	eq
 8000432:	2800      	cmpeq	r0, #0
 8000434:	bf1c      	itt	ne
 8000436:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800043a:	f04f 30ff 	movne.w	r0, #4294967295
 800043e:	f000 b9bd 	b.w	80007bc <__aeabi_idiv0>
 8000442:	f1ad 0c08 	sub.w	ip, sp, #8
 8000446:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800044a:	2900      	cmp	r1, #0
 800044c:	db09      	blt.n	8000462 <__aeabi_ldivmod+0x42>
 800044e:	2b00      	cmp	r3, #0
 8000450:	db1a      	blt.n	8000488 <__aeabi_ldivmod+0x68>
 8000452:	f000 f84d 	bl	80004f0 <__udivmoddi4>
 8000456:	f8dd e004 	ldr.w	lr, [sp, #4]
 800045a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800045e:	b004      	add	sp, #16
 8000460:	4770      	bx	lr
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	2b00      	cmp	r3, #0
 800046a:	db1b      	blt.n	80004a4 <__aeabi_ldivmod+0x84>
 800046c:	f000 f840 	bl	80004f0 <__udivmoddi4>
 8000470:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000474:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000478:	b004      	add	sp, #16
 800047a:	4240      	negs	r0, r0
 800047c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000480:	4252      	negs	r2, r2
 8000482:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000486:	4770      	bx	lr
 8000488:	4252      	negs	r2, r2
 800048a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800048e:	f000 f82f 	bl	80004f0 <__udivmoddi4>
 8000492:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000496:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800049a:	b004      	add	sp, #16
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	4770      	bx	lr
 80004a4:	4252      	negs	r2, r2
 80004a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004aa:	f000 f821 	bl	80004f0 <__udivmoddi4>
 80004ae:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004b6:	b004      	add	sp, #16
 80004b8:	4252      	negs	r2, r2
 80004ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004be:	4770      	bx	lr

080004c0 <__aeabi_uldivmod>:
 80004c0:	b953      	cbnz	r3, 80004d8 <__aeabi_uldivmod+0x18>
 80004c2:	b94a      	cbnz	r2, 80004d8 <__aeabi_uldivmod+0x18>
 80004c4:	2900      	cmp	r1, #0
 80004c6:	bf08      	it	eq
 80004c8:	2800      	cmpeq	r0, #0
 80004ca:	bf1c      	itt	ne
 80004cc:	f04f 31ff 	movne.w	r1, #4294967295
 80004d0:	f04f 30ff 	movne.w	r0, #4294967295
 80004d4:	f000 b972 	b.w	80007bc <__aeabi_idiv0>
 80004d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80004dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004e0:	f000 f806 	bl	80004f0 <__udivmoddi4>
 80004e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004ec:	b004      	add	sp, #16
 80004ee:	4770      	bx	lr

080004f0 <__udivmoddi4>:
 80004f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004f4:	9e08      	ldr	r6, [sp, #32]
 80004f6:	4604      	mov	r4, r0
 80004f8:	4688      	mov	r8, r1
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d14b      	bne.n	8000596 <__udivmoddi4+0xa6>
 80004fe:	428a      	cmp	r2, r1
 8000500:	4615      	mov	r5, r2
 8000502:	d967      	bls.n	80005d4 <__udivmoddi4+0xe4>
 8000504:	fab2 f282 	clz	r2, r2
 8000508:	b14a      	cbz	r2, 800051e <__udivmoddi4+0x2e>
 800050a:	f1c2 0720 	rsb	r7, r2, #32
 800050e:	fa01 f302 	lsl.w	r3, r1, r2
 8000512:	fa20 f707 	lsr.w	r7, r0, r7
 8000516:	4095      	lsls	r5, r2
 8000518:	ea47 0803 	orr.w	r8, r7, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000522:	0c23      	lsrs	r3, r4, #16
 8000524:	fbb8 f7fe 	udiv	r7, r8, lr
 8000528:	fa1f fc85 	uxth.w	ip, r5
 800052c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000530:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000534:	fb07 f10c 	mul.w	r1, r7, ip
 8000538:	4299      	cmp	r1, r3
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x60>
 800053c:	18eb      	adds	r3, r5, r3
 800053e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000542:	f080 811b 	bcs.w	800077c <__udivmoddi4+0x28c>
 8000546:	4299      	cmp	r1, r3
 8000548:	f240 8118 	bls.w	800077c <__udivmoddi4+0x28c>
 800054c:	3f02      	subs	r7, #2
 800054e:	442b      	add	r3, r5
 8000550:	1a5b      	subs	r3, r3, r1
 8000552:	b2a4      	uxth	r4, r4
 8000554:	fbb3 f0fe 	udiv	r0, r3, lr
 8000558:	fb0e 3310 	mls	r3, lr, r0, r3
 800055c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000560:	fb00 fc0c 	mul.w	ip, r0, ip
 8000564:	45a4      	cmp	ip, r4
 8000566:	d909      	bls.n	800057c <__udivmoddi4+0x8c>
 8000568:	192c      	adds	r4, r5, r4
 800056a:	f100 33ff 	add.w	r3, r0, #4294967295
 800056e:	f080 8107 	bcs.w	8000780 <__udivmoddi4+0x290>
 8000572:	45a4      	cmp	ip, r4
 8000574:	f240 8104 	bls.w	8000780 <__udivmoddi4+0x290>
 8000578:	3802      	subs	r0, #2
 800057a:	442c      	add	r4, r5
 800057c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000580:	eba4 040c 	sub.w	r4, r4, ip
 8000584:	2700      	movs	r7, #0
 8000586:	b11e      	cbz	r6, 8000590 <__udivmoddi4+0xa0>
 8000588:	40d4      	lsrs	r4, r2
 800058a:	2300      	movs	r3, #0
 800058c:	e9c6 4300 	strd	r4, r3, [r6]
 8000590:	4639      	mov	r1, r7
 8000592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000596:	428b      	cmp	r3, r1
 8000598:	d909      	bls.n	80005ae <__udivmoddi4+0xbe>
 800059a:	2e00      	cmp	r6, #0
 800059c:	f000 80eb 	beq.w	8000776 <__udivmoddi4+0x286>
 80005a0:	2700      	movs	r7, #0
 80005a2:	e9c6 0100 	strd	r0, r1, [r6]
 80005a6:	4638      	mov	r0, r7
 80005a8:	4639      	mov	r1, r7
 80005aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ae:	fab3 f783 	clz	r7, r3
 80005b2:	2f00      	cmp	r7, #0
 80005b4:	d147      	bne.n	8000646 <__udivmoddi4+0x156>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d302      	bcc.n	80005c0 <__udivmoddi4+0xd0>
 80005ba:	4282      	cmp	r2, r0
 80005bc:	f200 80fa 	bhi.w	80007b4 <__udivmoddi4+0x2c4>
 80005c0:	1a84      	subs	r4, r0, r2
 80005c2:	eb61 0303 	sbc.w	r3, r1, r3
 80005c6:	2001      	movs	r0, #1
 80005c8:	4698      	mov	r8, r3
 80005ca:	2e00      	cmp	r6, #0
 80005cc:	d0e0      	beq.n	8000590 <__udivmoddi4+0xa0>
 80005ce:	e9c6 4800 	strd	r4, r8, [r6]
 80005d2:	e7dd      	b.n	8000590 <__udivmoddi4+0xa0>
 80005d4:	b902      	cbnz	r2, 80005d8 <__udivmoddi4+0xe8>
 80005d6:	deff      	udf	#255	; 0xff
 80005d8:	fab2 f282 	clz	r2, r2
 80005dc:	2a00      	cmp	r2, #0
 80005de:	f040 808f 	bne.w	8000700 <__udivmoddi4+0x210>
 80005e2:	1b49      	subs	r1, r1, r5
 80005e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e8:	fa1f f885 	uxth.w	r8, r5
 80005ec:	2701      	movs	r7, #1
 80005ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80005f2:	0c23      	lsrs	r3, r4, #16
 80005f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80005f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000600:	4299      	cmp	r1, r3
 8000602:	d907      	bls.n	8000614 <__udivmoddi4+0x124>
 8000604:	18eb      	adds	r3, r5, r3
 8000606:	f10c 30ff 	add.w	r0, ip, #4294967295
 800060a:	d202      	bcs.n	8000612 <__udivmoddi4+0x122>
 800060c:	4299      	cmp	r1, r3
 800060e:	f200 80cd 	bhi.w	80007ac <__udivmoddi4+0x2bc>
 8000612:	4684      	mov	ip, r0
 8000614:	1a59      	subs	r1, r3, r1
 8000616:	b2a3      	uxth	r3, r4
 8000618:	fbb1 f0fe 	udiv	r0, r1, lr
 800061c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000620:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000624:	fb08 f800 	mul.w	r8, r8, r0
 8000628:	45a0      	cmp	r8, r4
 800062a:	d907      	bls.n	800063c <__udivmoddi4+0x14c>
 800062c:	192c      	adds	r4, r5, r4
 800062e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000632:	d202      	bcs.n	800063a <__udivmoddi4+0x14a>
 8000634:	45a0      	cmp	r8, r4
 8000636:	f200 80b6 	bhi.w	80007a6 <__udivmoddi4+0x2b6>
 800063a:	4618      	mov	r0, r3
 800063c:	eba4 0408 	sub.w	r4, r4, r8
 8000640:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000644:	e79f      	b.n	8000586 <__udivmoddi4+0x96>
 8000646:	f1c7 0c20 	rsb	ip, r7, #32
 800064a:	40bb      	lsls	r3, r7
 800064c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000650:	ea4e 0e03 	orr.w	lr, lr, r3
 8000654:	fa01 f407 	lsl.w	r4, r1, r7
 8000658:	fa20 f50c 	lsr.w	r5, r0, ip
 800065c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000660:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000664:	4325      	orrs	r5, r4
 8000666:	fbb3 f9f8 	udiv	r9, r3, r8
 800066a:	0c2c      	lsrs	r4, r5, #16
 800066c:	fb08 3319 	mls	r3, r8, r9, r3
 8000670:	fa1f fa8e 	uxth.w	sl, lr
 8000674:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000678:	fb09 f40a 	mul.w	r4, r9, sl
 800067c:	429c      	cmp	r4, r3
 800067e:	fa02 f207 	lsl.w	r2, r2, r7
 8000682:	fa00 f107 	lsl.w	r1, r0, r7
 8000686:	d90b      	bls.n	80006a0 <__udivmoddi4+0x1b0>
 8000688:	eb1e 0303 	adds.w	r3, lr, r3
 800068c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000690:	f080 8087 	bcs.w	80007a2 <__udivmoddi4+0x2b2>
 8000694:	429c      	cmp	r4, r3
 8000696:	f240 8084 	bls.w	80007a2 <__udivmoddi4+0x2b2>
 800069a:	f1a9 0902 	sub.w	r9, r9, #2
 800069e:	4473      	add	r3, lr
 80006a0:	1b1b      	subs	r3, r3, r4
 80006a2:	b2ad      	uxth	r5, r5
 80006a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006a8:	fb08 3310 	mls	r3, r8, r0, r3
 80006ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80006b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80006b4:	45a2      	cmp	sl, r4
 80006b6:	d908      	bls.n	80006ca <__udivmoddi4+0x1da>
 80006b8:	eb1e 0404 	adds.w	r4, lr, r4
 80006bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80006c0:	d26b      	bcs.n	800079a <__udivmoddi4+0x2aa>
 80006c2:	45a2      	cmp	sl, r4
 80006c4:	d969      	bls.n	800079a <__udivmoddi4+0x2aa>
 80006c6:	3802      	subs	r0, #2
 80006c8:	4474      	add	r4, lr
 80006ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80006ce:	fba0 8902 	umull	r8, r9, r0, r2
 80006d2:	eba4 040a 	sub.w	r4, r4, sl
 80006d6:	454c      	cmp	r4, r9
 80006d8:	46c2      	mov	sl, r8
 80006da:	464b      	mov	r3, r9
 80006dc:	d354      	bcc.n	8000788 <__udivmoddi4+0x298>
 80006de:	d051      	beq.n	8000784 <__udivmoddi4+0x294>
 80006e0:	2e00      	cmp	r6, #0
 80006e2:	d069      	beq.n	80007b8 <__udivmoddi4+0x2c8>
 80006e4:	ebb1 050a 	subs.w	r5, r1, sl
 80006e8:	eb64 0403 	sbc.w	r4, r4, r3
 80006ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80006f0:	40fd      	lsrs	r5, r7
 80006f2:	40fc      	lsrs	r4, r7
 80006f4:	ea4c 0505 	orr.w	r5, ip, r5
 80006f8:	e9c6 5400 	strd	r5, r4, [r6]
 80006fc:	2700      	movs	r7, #0
 80006fe:	e747      	b.n	8000590 <__udivmoddi4+0xa0>
 8000700:	f1c2 0320 	rsb	r3, r2, #32
 8000704:	fa20 f703 	lsr.w	r7, r0, r3
 8000708:	4095      	lsls	r5, r2
 800070a:	fa01 f002 	lsl.w	r0, r1, r2
 800070e:	fa21 f303 	lsr.w	r3, r1, r3
 8000712:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000716:	4338      	orrs	r0, r7
 8000718:	0c01      	lsrs	r1, r0, #16
 800071a:	fbb3 f7fe 	udiv	r7, r3, lr
 800071e:	fa1f f885 	uxth.w	r8, r5
 8000722:	fb0e 3317 	mls	r3, lr, r7, r3
 8000726:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800072a:	fb07 f308 	mul.w	r3, r7, r8
 800072e:	428b      	cmp	r3, r1
 8000730:	fa04 f402 	lsl.w	r4, r4, r2
 8000734:	d907      	bls.n	8000746 <__udivmoddi4+0x256>
 8000736:	1869      	adds	r1, r5, r1
 8000738:	f107 3cff 	add.w	ip, r7, #4294967295
 800073c:	d22f      	bcs.n	800079e <__udivmoddi4+0x2ae>
 800073e:	428b      	cmp	r3, r1
 8000740:	d92d      	bls.n	800079e <__udivmoddi4+0x2ae>
 8000742:	3f02      	subs	r7, #2
 8000744:	4429      	add	r1, r5
 8000746:	1acb      	subs	r3, r1, r3
 8000748:	b281      	uxth	r1, r0
 800074a:	fbb3 f0fe 	udiv	r0, r3, lr
 800074e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000752:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000756:	fb00 f308 	mul.w	r3, r0, r8
 800075a:	428b      	cmp	r3, r1
 800075c:	d907      	bls.n	800076e <__udivmoddi4+0x27e>
 800075e:	1869      	adds	r1, r5, r1
 8000760:	f100 3cff 	add.w	ip, r0, #4294967295
 8000764:	d217      	bcs.n	8000796 <__udivmoddi4+0x2a6>
 8000766:	428b      	cmp	r3, r1
 8000768:	d915      	bls.n	8000796 <__udivmoddi4+0x2a6>
 800076a:	3802      	subs	r0, #2
 800076c:	4429      	add	r1, r5
 800076e:	1ac9      	subs	r1, r1, r3
 8000770:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000774:	e73b      	b.n	80005ee <__udivmoddi4+0xfe>
 8000776:	4637      	mov	r7, r6
 8000778:	4630      	mov	r0, r6
 800077a:	e709      	b.n	8000590 <__udivmoddi4+0xa0>
 800077c:	4607      	mov	r7, r0
 800077e:	e6e7      	b.n	8000550 <__udivmoddi4+0x60>
 8000780:	4618      	mov	r0, r3
 8000782:	e6fb      	b.n	800057c <__udivmoddi4+0x8c>
 8000784:	4541      	cmp	r1, r8
 8000786:	d2ab      	bcs.n	80006e0 <__udivmoddi4+0x1f0>
 8000788:	ebb8 0a02 	subs.w	sl, r8, r2
 800078c:	eb69 020e 	sbc.w	r2, r9, lr
 8000790:	3801      	subs	r0, #1
 8000792:	4613      	mov	r3, r2
 8000794:	e7a4      	b.n	80006e0 <__udivmoddi4+0x1f0>
 8000796:	4660      	mov	r0, ip
 8000798:	e7e9      	b.n	800076e <__udivmoddi4+0x27e>
 800079a:	4618      	mov	r0, r3
 800079c:	e795      	b.n	80006ca <__udivmoddi4+0x1da>
 800079e:	4667      	mov	r7, ip
 80007a0:	e7d1      	b.n	8000746 <__udivmoddi4+0x256>
 80007a2:	4681      	mov	r9, r0
 80007a4:	e77c      	b.n	80006a0 <__udivmoddi4+0x1b0>
 80007a6:	3802      	subs	r0, #2
 80007a8:	442c      	add	r4, r5
 80007aa:	e747      	b.n	800063c <__udivmoddi4+0x14c>
 80007ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80007b0:	442b      	add	r3, r5
 80007b2:	e72f      	b.n	8000614 <__udivmoddi4+0x124>
 80007b4:	4638      	mov	r0, r7
 80007b6:	e708      	b.n	80005ca <__udivmoddi4+0xda>
 80007b8:	4637      	mov	r7, r6
 80007ba:	e6e9      	b.n	8000590 <__udivmoddi4+0xa0>

080007bc <__aeabi_idiv0>:
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop

080007c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007c4:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <HAL_Init+0x40>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a0d      	ldr	r2, [pc, #52]	; (8000800 <HAL_Init+0x40>)
 80007ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <HAL_Init+0x40>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a0a      	ldr	r2, [pc, #40]	; (8000800 <HAL_Init+0x40>)
 80007d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <HAL_Init+0x40>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a07      	ldr	r2, [pc, #28]	; (8000800 <HAL_Init+0x40>)
 80007e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e8:	2003      	movs	r0, #3
 80007ea:	f000 fca7 	bl	800113c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ee:	200f      	movs	r0, #15
 80007f0:	f000 f808 	bl	8000804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007f4:	f006 f9aa 	bl	8006b4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023c00 	.word	0x40023c00

08000804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <HAL_InitTick+0x54>)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <HAL_InitTick+0x58>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	4619      	mov	r1, r3
 8000816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800081a:	fbb3 f3f1 	udiv	r3, r3, r1
 800081e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000822:	4618      	mov	r0, r3
 8000824:	f000 fcb1 	bl	800118a <HAL_SYSTICK_Config>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800082e:	2301      	movs	r3, #1
 8000830:	e00e      	b.n	8000850 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b0f      	cmp	r3, #15
 8000836:	d80a      	bhi.n	800084e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000838:	2200      	movs	r2, #0
 800083a:	6879      	ldr	r1, [r7, #4]
 800083c:	f04f 30ff 	mov.w	r0, #4294967295
 8000840:	f000 fc87 	bl	8001152 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000844:	4a06      	ldr	r2, [pc, #24]	; (8000860 <HAL_InitTick+0x5c>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800084a:	2300      	movs	r3, #0
 800084c:	e000      	b.n	8000850 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
}
 8000850:	4618      	mov	r0, r3
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	2000000c 	.word	0x2000000c
 800085c:	20000004 	.word	0x20000004
 8000860:	20000000 	.word	0x20000000

08000864 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HAL_IncTick+0x20>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	461a      	mov	r2, r3
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_IncTick+0x24>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4413      	add	r3, r2
 8000874:	4a04      	ldr	r2, [pc, #16]	; (8000888 <HAL_IncTick+0x24>)
 8000876:	6013      	str	r3, [r2, #0]
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	20000004 	.word	0x20000004
 8000888:	200040a8 	.word	0x200040a8

0800088c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  return uwTick;
 8000890:	4b03      	ldr	r3, [pc, #12]	; (80008a0 <HAL_GetTick+0x14>)
 8000892:	681b      	ldr	r3, [r3, #0]
}
 8000894:	4618      	mov	r0, r3
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	200040a8 	.word	0x200040a8

080008a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008ac:	2300      	movs	r3, #0
 80008ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d101      	bne.n	80008ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
 80008b8:	e033      	b.n	8000922 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d109      	bne.n	80008d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f004 fd66 	bl	8005394 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2200      	movs	r2, #0
 80008cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2200      	movs	r2, #0
 80008d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	f003 0310 	and.w	r3, r3, #16
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d118      	bne.n	8000914 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80008ea:	f023 0302 	bic.w	r3, r3, #2
 80008ee:	f043 0202 	orr.w	r2, r3, #2
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f000 fa72 	bl	8000de0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2200      	movs	r2, #0
 8000900:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	f023 0303 	bic.w	r3, r3, #3
 800090a:	f043 0201 	orr.w	r2, r3, #1
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	641a      	str	r2, [r3, #64]	; 0x40
 8000912:	e001      	b.n	8000918 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000914:	2301      	movs	r3, #1
 8000916:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2200      	movs	r2, #0
 800091c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000920:	7bfb      	ldrb	r3, [r7, #15]
}
 8000922:	4618      	mov	r0, r3
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000934:	2300      	movs	r3, #0
 8000936:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800093e:	2b01      	cmp	r3, #1
 8000940:	d101      	bne.n	8000946 <HAL_ADC_Start+0x1a>
 8000942:	2302      	movs	r3, #2
 8000944:	e08a      	b.n	8000a5c <HAL_ADC_Start+0x130>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2201      	movs	r2, #1
 800094a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	689b      	ldr	r3, [r3, #8]
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	2b01      	cmp	r3, #1
 800095a:	d018      	beq.n	800098e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	689a      	ldr	r2, [r3, #8]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f042 0201 	orr.w	r2, r2, #1
 800096a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800096c:	4b3e      	ldr	r3, [pc, #248]	; (8000a68 <HAL_ADC_Start+0x13c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a3e      	ldr	r2, [pc, #248]	; (8000a6c <HAL_ADC_Start+0x140>)
 8000972:	fba2 2303 	umull	r2, r3, r2, r3
 8000976:	0c9a      	lsrs	r2, r3, #18
 8000978:	4613      	mov	r3, r2
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	4413      	add	r3, r2
 800097e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000980:	e002      	b.n	8000988 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	3b01      	subs	r3, #1
 8000986:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d1f9      	bne.n	8000982 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	2b01      	cmp	r3, #1
 800099a:	d15e      	bne.n	8000a5a <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80009a4:	f023 0301 	bic.w	r3, r3, #1
 80009a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d007      	beq.n	80009ce <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80009da:	d106      	bne.n	80009ea <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e0:	f023 0206 	bic.w	r2, r3, #6
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	645a      	str	r2, [r3, #68]	; 0x44
 80009e8:	e002      	b.n	80009f0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2200      	movs	r2, #0
 80009ee:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2200      	movs	r2, #0
 80009f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80009f8:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <HAL_ADC_Start+0x144>)
 80009fa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000a04:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	f003 031f 	and.w	r3, r3, #31
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d10f      	bne.n	8000a32 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d11c      	bne.n	8000a5a <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	689a      	ldr	r2, [r3, #8]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	e013      	b.n	8000a5a <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a0f      	ldr	r2, [pc, #60]	; (8000a74 <HAL_ADC_Start+0x148>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d10e      	bne.n	8000a5a <HAL_ADC_Start+0x12e>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d107      	bne.n	8000a5a <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	689a      	ldr	r2, [r3, #8]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000a58:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000a5a:	2300      	movs	r3, #0
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	2000000c 	.word	0x2000000c
 8000a6c:	431bde83 	.word	0x431bde83
 8000a70:	40012300 	.word	0x40012300
 8000a74:	40012000 	.word	0x40012000

08000a78 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a94:	d113      	bne.n	8000abe <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000aa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000aa4:	d10b      	bne.n	8000abe <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	f043 0220 	orr.w	r2, r3, #32
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	e05c      	b.n	8000b78 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000abe:	f7ff fee5 	bl	800088c <HAL_GetTick>
 8000ac2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000ac4:	e01a      	b.n	8000afc <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000acc:	d016      	beq.n	8000afc <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d007      	beq.n	8000ae4 <HAL_ADC_PollForConversion+0x6c>
 8000ad4:	f7ff feda 	bl	800088c <HAL_GetTick>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	683a      	ldr	r2, [r7, #0]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d20b      	bcs.n	8000afc <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	f043 0204 	orr.w	r2, r3, #4
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2200      	movs	r2, #0
 8000af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8000af8:	2303      	movs	r3, #3
 8000afa:	e03d      	b.n	8000b78 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f003 0302 	and.w	r3, r3, #2
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d1dd      	bne.n	8000ac6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f06f 0212 	mvn.w	r2, #18
 8000b12:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d123      	bne.n	8000b76 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d11f      	bne.n	8000b76 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b3c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d006      	beq.n	8000b52 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d111      	bne.n	8000b76 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d105      	bne.n	8000b76 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	f043 0201 	orr.w	r2, r3, #1
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000b76:	2300      	movs	r3, #0
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d101      	bne.n	8000bb8 <HAL_ADC_ConfigChannel+0x1c>
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	e105      	b.n	8000dc4 <HAL_ADC_ConfigChannel+0x228>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2201      	movs	r2, #1
 8000bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b09      	cmp	r3, #9
 8000bc6:	d925      	bls.n	8000c14 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	68d9      	ldr	r1, [r3, #12]
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	4413      	add	r3, r2
 8000bdc:	3b1e      	subs	r3, #30
 8000bde:	2207      	movs	r2, #7
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	43da      	mvns	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	400a      	ands	r2, r1
 8000bec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	68d9      	ldr	r1, [r3, #12]
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	689a      	ldr	r2, [r3, #8]
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	4618      	mov	r0, r3
 8000c00:	4603      	mov	r3, r0
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	4403      	add	r3, r0
 8000c06:	3b1e      	subs	r3, #30
 8000c08:	409a      	lsls	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	e022      	b.n	8000c5a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	6919      	ldr	r1, [r3, #16]
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	461a      	mov	r2, r3
 8000c22:	4613      	mov	r3, r2
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	4413      	add	r3, r2
 8000c28:	2207      	movs	r2, #7
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	400a      	ands	r2, r1
 8000c36:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	6919      	ldr	r1, [r3, #16]
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	689a      	ldr	r2, [r3, #8]
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	4618      	mov	r0, r3
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	4403      	add	r3, r0
 8000c50:	409a      	lsls	r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	430a      	orrs	r2, r1
 8000c58:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	2b06      	cmp	r3, #6
 8000c60:	d824      	bhi.n	8000cac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685a      	ldr	r2, [r3, #4]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	4413      	add	r3, r2
 8000c72:	3b05      	subs	r3, #5
 8000c74:	221f      	movs	r2, #31
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43da      	mvns	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	400a      	ands	r2, r1
 8000c82:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	4618      	mov	r0, r3
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685a      	ldr	r2, [r3, #4]
 8000c96:	4613      	mov	r3, r2
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	4413      	add	r3, r2
 8000c9c:	3b05      	subs	r3, #5
 8000c9e:	fa00 f203 	lsl.w	r2, r0, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	635a      	str	r2, [r3, #52]	; 0x34
 8000caa:	e04c      	b.n	8000d46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	2b0c      	cmp	r3, #12
 8000cb2:	d824      	bhi.n	8000cfe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685a      	ldr	r2, [r3, #4]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	4413      	add	r3, r2
 8000cc4:	3b23      	subs	r3, #35	; 0x23
 8000cc6:	221f      	movs	r2, #31
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43da      	mvns	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	400a      	ands	r2, r1
 8000cd4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685a      	ldr	r2, [r3, #4]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	4413      	add	r3, r2
 8000cee:	3b23      	subs	r3, #35	; 0x23
 8000cf0:	fa00 f203 	lsl.w	r2, r0, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	631a      	str	r2, [r3, #48]	; 0x30
 8000cfc:	e023      	b.n	8000d46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685a      	ldr	r2, [r3, #4]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	4413      	add	r3, r2
 8000d0e:	3b41      	subs	r3, #65	; 0x41
 8000d10:	221f      	movs	r2, #31
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43da      	mvns	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	400a      	ands	r2, r1
 8000d1e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685a      	ldr	r2, [r3, #4]
 8000d32:	4613      	mov	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	4413      	add	r3, r2
 8000d38:	3b41      	subs	r3, #65	; 0x41
 8000d3a:	fa00 f203 	lsl.w	r2, r0, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	430a      	orrs	r2, r1
 8000d44:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d46:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <HAL_ADC_ConfigChannel+0x234>)
 8000d48:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a21      	ldr	r2, [pc, #132]	; (8000dd4 <HAL_ADC_ConfigChannel+0x238>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d109      	bne.n	8000d68 <HAL_ADC_ConfigChannel+0x1cc>
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b12      	cmp	r3, #18
 8000d5a:	d105      	bne.n	8000d68 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a19      	ldr	r2, [pc, #100]	; (8000dd4 <HAL_ADC_ConfigChannel+0x238>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d123      	bne.n	8000dba <HAL_ADC_ConfigChannel+0x21e>
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2b10      	cmp	r3, #16
 8000d78:	d003      	beq.n	8000d82 <HAL_ADC_ConfigChannel+0x1e6>
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2b11      	cmp	r3, #17
 8000d80:	d11b      	bne.n	8000dba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2b10      	cmp	r3, #16
 8000d94:	d111      	bne.n	8000dba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <HAL_ADC_ConfigChannel+0x23c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a10      	ldr	r2, [pc, #64]	; (8000ddc <HAL_ADC_ConfigChannel+0x240>)
 8000d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000da0:	0c9a      	lsrs	r2, r3, #18
 8000da2:	4613      	mov	r3, r2
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	4413      	add	r3, r2
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000dac:	e002      	b.n	8000db4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	3b01      	subs	r3, #1
 8000db2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1f9      	bne.n	8000dae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000dc2:	2300      	movs	r3, #0
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	40012300 	.word	0x40012300
 8000dd4:	40012000 	.word	0x40012000
 8000dd8:	2000000c 	.word	0x2000000c
 8000ddc:	431bde83 	.word	0x431bde83

08000de0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000de8:	4b79      	ldr	r3, [pc, #484]	; (8000fd0 <ADC_Init+0x1f0>)
 8000dea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	685a      	ldr	r2, [r3, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	431a      	orrs	r2, r3
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	6859      	ldr	r1, [r3, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	691b      	ldr	r3, [r3, #16]
 8000e20:	021a      	lsls	r2, r3, #8
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	430a      	orrs	r2, r1
 8000e28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	685a      	ldr	r2, [r3, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000e38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	6859      	ldr	r1, [r3, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689a      	ldr	r2, [r3, #8]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	689a      	ldr	r2, [r3, #8]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	6899      	ldr	r1, [r3, #8]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	68da      	ldr	r2, [r3, #12]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e72:	4a58      	ldr	r2, [pc, #352]	; (8000fd4 <ADC_Init+0x1f4>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d022      	beq.n	8000ebe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	689a      	ldr	r2, [r3, #8]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	6899      	ldr	r1, [r3, #8]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	430a      	orrs	r2, r1
 8000e98:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	689a      	ldr	r2, [r3, #8]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000ea8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	6899      	ldr	r1, [r3, #8]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	e00f      	b.n	8000ede <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	689a      	ldr	r2, [r3, #8]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ecc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000edc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f022 0202 	bic.w	r2, r2, #2
 8000eec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	6899      	ldr	r1, [r3, #8]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	7e1b      	ldrb	r3, [r3, #24]
 8000ef8:	005a      	lsls	r2, r3, #1
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	430a      	orrs	r2, r1
 8000f00:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d01b      	beq.n	8000f44 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	685a      	ldr	r2, [r3, #4]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f1a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	685a      	ldr	r2, [r3, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000f2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	6859      	ldr	r1, [r3, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f36:	3b01      	subs	r3, #1
 8000f38:	035a      	lsls	r2, r3, #13
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	e007      	b.n	8000f54 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	685a      	ldr	r2, [r3, #4]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f52:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000f62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	051a      	lsls	r2, r3, #20
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	430a      	orrs	r2, r1
 8000f78:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	689a      	ldr	r2, [r3, #8]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	6899      	ldr	r1, [r3, #8]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f96:	025a      	lsls	r2, r3, #9
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6899      	ldr	r1, [r3, #8]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	029a      	lsls	r2, r3, #10
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	609a      	str	r2, [r3, #8]
}
 8000fc4:	bf00      	nop
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	40012300 	.word	0x40012300
 8000fd4:	0f000001 	.word	0x0f000001

08000fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001000:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100a:	4a04      	ldr	r2, [pc, #16]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	60d3      	str	r3, [r2, #12]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <__NVIC_GetPriorityGrouping+0x18>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	f003 0307 	and.w	r3, r3, #7
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	6039      	str	r1, [r7, #0]
 8001046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	2b00      	cmp	r3, #0
 800104e:	db0a      	blt.n	8001066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	b2da      	uxtb	r2, r3
 8001054:	490c      	ldr	r1, [pc, #48]	; (8001088 <__NVIC_SetPriority+0x4c>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	0112      	lsls	r2, r2, #4
 800105c:	b2d2      	uxtb	r2, r2
 800105e:	440b      	add	r3, r1
 8001060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001064:	e00a      	b.n	800107c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4908      	ldr	r1, [pc, #32]	; (800108c <__NVIC_SetPriority+0x50>)
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	f003 030f 	and.w	r3, r3, #15
 8001072:	3b04      	subs	r3, #4
 8001074:	0112      	lsls	r2, r2, #4
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	440b      	add	r3, r1
 800107a:	761a      	strb	r2, [r3, #24]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000e100 	.word	0xe000e100
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001090:	b480      	push	{r7}
 8001092:	b089      	sub	sp, #36	; 0x24
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f1c3 0307 	rsb	r3, r3, #7
 80010aa:	2b04      	cmp	r3, #4
 80010ac:	bf28      	it	cs
 80010ae:	2304      	movcs	r3, #4
 80010b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3304      	adds	r3, #4
 80010b6:	2b06      	cmp	r3, #6
 80010b8:	d902      	bls.n	80010c0 <NVIC_EncodePriority+0x30>
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3b03      	subs	r3, #3
 80010be:	e000      	b.n	80010c2 <NVIC_EncodePriority+0x32>
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	f04f 32ff 	mov.w	r2, #4294967295
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43da      	mvns	r2, r3
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	401a      	ands	r2, r3
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d8:	f04f 31ff 	mov.w	r1, #4294967295
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	fa01 f303 	lsl.w	r3, r1, r3
 80010e2:	43d9      	mvns	r1, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	4313      	orrs	r3, r2
         );
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3724      	adds	r7, #36	; 0x24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3b01      	subs	r3, #1
 8001104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001108:	d301      	bcc.n	800110e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800110a:	2301      	movs	r3, #1
 800110c:	e00f      	b.n	800112e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800110e:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <SysTick_Config+0x40>)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3b01      	subs	r3, #1
 8001114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001116:	210f      	movs	r1, #15
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f7ff ff8e 	bl	800103c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <SysTick_Config+0x40>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001126:	4b04      	ldr	r3, [pc, #16]	; (8001138 <SysTick_Config+0x40>)
 8001128:	2207      	movs	r2, #7
 800112a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	e000e010 	.word	0xe000e010

0800113c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff ff47 	bl	8000fd8 <__NVIC_SetPriorityGrouping>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001152:	b580      	push	{r7, lr}
 8001154:	b086      	sub	sp, #24
 8001156:	af00      	add	r7, sp, #0
 8001158:	4603      	mov	r3, r0
 800115a:	60b9      	str	r1, [r7, #8]
 800115c:	607a      	str	r2, [r7, #4]
 800115e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001164:	f7ff ff5c 	bl	8001020 <__NVIC_GetPriorityGrouping>
 8001168:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	68b9      	ldr	r1, [r7, #8]
 800116e:	6978      	ldr	r0, [r7, #20]
 8001170:	f7ff ff8e 	bl	8001090 <NVIC_EncodePriority>
 8001174:	4602      	mov	r2, r0
 8001176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117a:	4611      	mov	r1, r2
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff5d 	bl	800103c <__NVIC_SetPriority>
}
 8001182:	bf00      	nop
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ffb0 	bl	80010f8 <SysTick_Config>
 8001198:	4603      	mov	r3, r0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b089      	sub	sp, #36	; 0x24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
 80011be:	e159      	b.n	8001474 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011c0:	2201      	movs	r2, #1
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	429a      	cmp	r2, r3
 80011da:	f040 8148 	bne.w	800146e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x4a>
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2b12      	cmp	r3, #18
 80011ec:	d123      	bne.n	8001236 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	08da      	lsrs	r2, r3, #3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3208      	adds	r2, #8
 80011f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	220f      	movs	r2, #15
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	691a      	ldr	r2, [r3, #16]
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	f003 0307 	and.w	r3, r3, #7
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	08da      	lsrs	r2, r3, #3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3208      	adds	r2, #8
 8001230:	69b9      	ldr	r1, [r7, #24]
 8001232:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	2203      	movs	r2, #3
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f003 0203 	and.w	r2, r3, #3
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d00b      	beq.n	800128a <HAL_GPIO_Init+0xe6>
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b02      	cmp	r3, #2
 8001278:	d007      	beq.n	800128a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800127e:	2b11      	cmp	r3, #17
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b12      	cmp	r3, #18
 8001288:	d130      	bne.n	80012ec <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	2203      	movs	r2, #3
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	68da      	ldr	r2, [r3, #12]
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012c0:	2201      	movs	r2, #1
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	091b      	lsrs	r3, r3, #4
 80012d6:	f003 0201 	and.w	r2, r3, #1
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	2203      	movs	r2, #3
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 80a2 	beq.w	800146e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b56      	ldr	r3, [pc, #344]	; (8001488 <HAL_GPIO_Init+0x2e4>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	4a55      	ldr	r2, [pc, #340]	; (8001488 <HAL_GPIO_Init+0x2e4>)
 8001334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001338:	6453      	str	r3, [r2, #68]	; 0x44
 800133a:	4b53      	ldr	r3, [pc, #332]	; (8001488 <HAL_GPIO_Init+0x2e4>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001346:	4a51      	ldr	r2, [pc, #324]	; (800148c <HAL_GPIO_Init+0x2e8>)
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	089b      	lsrs	r3, r3, #2
 800134c:	3302      	adds	r3, #2
 800134e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f003 0303 	and.w	r3, r3, #3
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	220f      	movs	r2, #15
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4013      	ands	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a48      	ldr	r2, [pc, #288]	; (8001490 <HAL_GPIO_Init+0x2ec>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d019      	beq.n	80013a6 <HAL_GPIO_Init+0x202>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a47      	ldr	r2, [pc, #284]	; (8001494 <HAL_GPIO_Init+0x2f0>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d013      	beq.n	80013a2 <HAL_GPIO_Init+0x1fe>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a46      	ldr	r2, [pc, #280]	; (8001498 <HAL_GPIO_Init+0x2f4>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d00d      	beq.n	800139e <HAL_GPIO_Init+0x1fa>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a45      	ldr	r2, [pc, #276]	; (800149c <HAL_GPIO_Init+0x2f8>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d007      	beq.n	800139a <HAL_GPIO_Init+0x1f6>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a44      	ldr	r2, [pc, #272]	; (80014a0 <HAL_GPIO_Init+0x2fc>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d101      	bne.n	8001396 <HAL_GPIO_Init+0x1f2>
 8001392:	2304      	movs	r3, #4
 8001394:	e008      	b.n	80013a8 <HAL_GPIO_Init+0x204>
 8001396:	2307      	movs	r3, #7
 8001398:	e006      	b.n	80013a8 <HAL_GPIO_Init+0x204>
 800139a:	2303      	movs	r3, #3
 800139c:	e004      	b.n	80013a8 <HAL_GPIO_Init+0x204>
 800139e:	2302      	movs	r3, #2
 80013a0:	e002      	b.n	80013a8 <HAL_GPIO_Init+0x204>
 80013a2:	2301      	movs	r3, #1
 80013a4:	e000      	b.n	80013a8 <HAL_GPIO_Init+0x204>
 80013a6:	2300      	movs	r3, #0
 80013a8:	69fa      	ldr	r2, [r7, #28]
 80013aa:	f002 0203 	and.w	r2, r2, #3
 80013ae:	0092      	lsls	r2, r2, #2
 80013b0:	4093      	lsls	r3, r2
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013b8:	4934      	ldr	r1, [pc, #208]	; (800148c <HAL_GPIO_Init+0x2e8>)
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	089b      	lsrs	r3, r3, #2
 80013be:	3302      	adds	r3, #2
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013c6:	4b37      	ldr	r3, [pc, #220]	; (80014a4 <HAL_GPIO_Init+0x300>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4013      	ands	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ea:	4a2e      	ldr	r2, [pc, #184]	; (80014a4 <HAL_GPIO_Init+0x300>)
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013f0:	4b2c      	ldr	r3, [pc, #176]	; (80014a4 <HAL_GPIO_Init+0x300>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001414:	4a23      	ldr	r2, [pc, #140]	; (80014a4 <HAL_GPIO_Init+0x300>)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800141a:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <HAL_GPIO_Init+0x300>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800143e:	4a19      	ldr	r2, [pc, #100]	; (80014a4 <HAL_GPIO_Init+0x300>)
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001444:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <HAL_GPIO_Init+0x300>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001468:	4a0e      	ldr	r2, [pc, #56]	; (80014a4 <HAL_GPIO_Init+0x300>)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3301      	adds	r3, #1
 8001472:	61fb      	str	r3, [r7, #28]
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	2b0f      	cmp	r3, #15
 8001478:	f67f aea2 	bls.w	80011c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800147c:	bf00      	nop
 800147e:	3724      	adds	r7, #36	; 0x24
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	40023800 	.word	0x40023800
 800148c:	40013800 	.word	0x40013800
 8001490:	40020000 	.word	0x40020000
 8001494:	40020400 	.word	0x40020400
 8001498:	40020800 	.word	0x40020800
 800149c:	40020c00 	.word	0x40020c00
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40013c00 	.word	0x40013c00

080014a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	807b      	strh	r3, [r7, #2]
 80014b4:	4613      	mov	r3, r2
 80014b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014b8:	787b      	ldrb	r3, [r7, #1]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014be:	887a      	ldrh	r2, [r7, #2]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014c4:	e003      	b.n	80014ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014c6:	887b      	ldrh	r3, [r7, #2]
 80014c8:	041a      	lsls	r2, r3, #16
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	619a      	str	r2, [r3, #24]
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e10f      	b.n	800170e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d106      	bne.n	8001508 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f005 f9b0 	bl	8006868 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2224      	movs	r2, #36	; 0x24
 800150c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */

  __HAL_I2C_DISABLE(hi2c);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0201 	bic.w	r2, r2, #1
 800151e:	601a      	str	r2, [r3, #0]
  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001520:	f001 fb64 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 8001524:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	4a7b      	ldr	r2, [pc, #492]	; (8001718 <HAL_I2C_Init+0x23c>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d807      	bhi.n	8001540 <HAL_I2C_Init+0x64>
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4a7a      	ldr	r2, [pc, #488]	; (800171c <HAL_I2C_Init+0x240>)
 8001534:	4293      	cmp	r3, r2
 8001536:	bf94      	ite	ls
 8001538:	2301      	movls	r3, #1
 800153a:	2300      	movhi	r3, #0
 800153c:	b2db      	uxtb	r3, r3
 800153e:	e006      	b.n	800154e <HAL_I2C_Init+0x72>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4a77      	ldr	r2, [pc, #476]	; (8001720 <HAL_I2C_Init+0x244>)
 8001544:	4293      	cmp	r3, r2
 8001546:	bf94      	ite	ls
 8001548:	2301      	movls	r3, #1
 800154a:	2300      	movhi	r3, #0
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e0db      	b.n	800170e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	4a72      	ldr	r2, [pc, #456]	; (8001724 <HAL_I2C_Init+0x248>)
 800155a:	fba2 2303 	umull	r2, r3, r2, r3
 800155e:	0c9b      	lsrs	r3, r3, #18
 8001560:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	68ba      	ldr	r2, [r7, #8]
 8001572:	430a      	orrs	r2, r1
 8001574:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	4a64      	ldr	r2, [pc, #400]	; (8001718 <HAL_I2C_Init+0x23c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d802      	bhi.n	8001590 <HAL_I2C_Init+0xb4>
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	3301      	adds	r3, #1
 800158e:	e009      	b.n	80015a4 <HAL_I2C_Init+0xc8>
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001596:	fb02 f303 	mul.w	r3, r2, r3
 800159a:	4a63      	ldr	r2, [pc, #396]	; (8001728 <HAL_I2C_Init+0x24c>)
 800159c:	fba2 2303 	umull	r2, r3, r2, r3
 80015a0:	099b      	lsrs	r3, r3, #6
 80015a2:	3301      	adds	r3, #1
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6812      	ldr	r2, [r2, #0]
 80015a8:	430b      	orrs	r3, r1
 80015aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	4956      	ldr	r1, [pc, #344]	; (8001718 <HAL_I2C_Init+0x23c>)
 80015c0:	428b      	cmp	r3, r1
 80015c2:	d80d      	bhi.n	80015e0 <HAL_I2C_Init+0x104>
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	1e59      	subs	r1, r3, #1
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80015d2:	3301      	adds	r3, #1
 80015d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015d8:	2b04      	cmp	r3, #4
 80015da:	bf38      	it	cc
 80015dc:	2304      	movcc	r3, #4
 80015de:	e04f      	b.n	8001680 <HAL_I2C_Init+0x1a4>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d111      	bne.n	800160c <HAL_I2C_Init+0x130>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	1e58      	subs	r0, r3, #1
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6859      	ldr	r1, [r3, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	440b      	add	r3, r1
 80015f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015fa:	3301      	adds	r3, #1
 80015fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001600:	2b00      	cmp	r3, #0
 8001602:	bf0c      	ite	eq
 8001604:	2301      	moveq	r3, #1
 8001606:	2300      	movne	r3, #0
 8001608:	b2db      	uxtb	r3, r3
 800160a:	e012      	b.n	8001632 <HAL_I2C_Init+0x156>
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	1e58      	subs	r0, r3, #1
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6859      	ldr	r1, [r3, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	0099      	lsls	r1, r3, #2
 800161c:	440b      	add	r3, r1
 800161e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001622:	3301      	adds	r3, #1
 8001624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001628:	2b00      	cmp	r3, #0
 800162a:	bf0c      	ite	eq
 800162c:	2301      	moveq	r3, #1
 800162e:	2300      	movne	r3, #0
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_I2C_Init+0x15e>
 8001636:	2301      	movs	r3, #1
 8001638:	e022      	b.n	8001680 <HAL_I2C_Init+0x1a4>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d10e      	bne.n	8001660 <HAL_I2C_Init+0x184>
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	1e58      	subs	r0, r3, #1
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6859      	ldr	r1, [r3, #4]
 800164a:	460b      	mov	r3, r1
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	440b      	add	r3, r1
 8001650:	fbb0 f3f3 	udiv	r3, r0, r3
 8001654:	3301      	adds	r3, #1
 8001656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800165a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800165e:	e00f      	b.n	8001680 <HAL_I2C_Init+0x1a4>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	1e58      	subs	r0, r3, #1
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6859      	ldr	r1, [r3, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	440b      	add	r3, r1
 800166e:	0099      	lsls	r1, r3, #2
 8001670:	440b      	add	r3, r1
 8001672:	fbb0 f3f3 	udiv	r3, r0, r3
 8001676:	3301      	adds	r3, #1
 8001678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800167c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001680:	6879      	ldr	r1, [r7, #4]
 8001682:	6809      	ldr	r1, [r1, #0]
 8001684:	4313      	orrs	r3, r2
 8001686:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69da      	ldr	r2, [r3, #28]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	431a      	orrs	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	430a      	orrs	r2, r1
 80016a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6911      	ldr	r1, [r2, #16]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	68d2      	ldr	r2, [r2, #12]
 80016ba:	4311      	orrs	r1, r2
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	430b      	orrs	r3, r1
 80016c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695a      	ldr	r2, [r3, #20]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	431a      	orrs	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	430a      	orrs	r2, r1
 80016de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 0201 	orr.w	r2, r2, #1
 80016ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2220      	movs	r2, #32
 80016fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	000186a0 	.word	0x000186a0
 800171c:	001e847f 	.word	0x001e847f
 8001720:	003d08ff 	.word	0x003d08ff
 8001724:	431bde83 	.word	0x431bde83
 8001728:	10624dd3 	.word	0x10624dd3

0800172c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af02      	add	r7, sp, #8
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	4608      	mov	r0, r1
 8001736:	4611      	mov	r1, r2
 8001738:	461a      	mov	r2, r3
 800173a:	4603      	mov	r3, r0
 800173c:	817b      	strh	r3, [r7, #10]
 800173e:	460b      	mov	r3, r1
 8001740:	813b      	strh	r3, [r7, #8]
 8001742:	4613      	mov	r3, r2
 8001744:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001746:	f7ff f8a1 	bl	800088c <HAL_GetTick>
 800174a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b20      	cmp	r3, #32
 8001756:	f040 80d9 	bne.w	800190c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	2319      	movs	r3, #25
 8001760:	2201      	movs	r2, #1
 8001762:	496d      	ldr	r1, [pc, #436]	; (8001918 <HAL_I2C_Mem_Write+0x1ec>)
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f000 fc5b 	bl	8002020 <I2C_WaitOnFlagUntilTimeout>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001770:	2302      	movs	r3, #2
 8001772:	e0cc      	b.n	800190e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800177a:	2b01      	cmp	r3, #1
 800177c:	d101      	bne.n	8001782 <HAL_I2C_Mem_Write+0x56>
 800177e:	2302      	movs	r3, #2
 8001780:	e0c5      	b.n	800190e <HAL_I2C_Mem_Write+0x1e2>
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2201      	movs	r2, #1
 8001786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	2b01      	cmp	r3, #1
 8001796:	d007      	beq.n	80017a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f042 0201 	orr.w	r2, r2, #1
 80017a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2221      	movs	r2, #33	; 0x21
 80017bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2240      	movs	r2, #64	; 0x40
 80017c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2200      	movs	r2, #0
 80017cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6a3a      	ldr	r2, [r7, #32]
 80017d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017de:	b29a      	uxth	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4a4d      	ldr	r2, [pc, #308]	; (800191c <HAL_I2C_Mem_Write+0x1f0>)
 80017e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017ea:	88f8      	ldrh	r0, [r7, #6]
 80017ec:	893a      	ldrh	r2, [r7, #8]
 80017ee:	8979      	ldrh	r1, [r7, #10]
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	9301      	str	r3, [sp, #4]
 80017f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	4603      	mov	r3, r0
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f000 fab6 	bl	8001d6c <I2C_RequestMemoryWrite>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d052      	beq.n	80018ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e081      	b.n	800190e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f000 fcdc 	bl	80021cc <I2C_WaitOnTXEFlagUntilTimeout>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00d      	beq.n	8001836 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	2b04      	cmp	r3, #4
 8001820:	d107      	bne.n	8001832 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001830:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e06b      	b.n	800190e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	781a      	ldrb	r2, [r3, #0]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	1c5a      	adds	r2, r3, #1
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001850:	3b01      	subs	r3, #1
 8001852:	b29a      	uxth	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800185c:	b29b      	uxth	r3, r3
 800185e:	3b01      	subs	r3, #1
 8001860:	b29a      	uxth	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	695b      	ldr	r3, [r3, #20]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b04      	cmp	r3, #4
 8001872:	d11b      	bne.n	80018ac <HAL_I2C_Mem_Write+0x180>
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001878:	2b00      	cmp	r3, #0
 800187a:	d017      	beq.n	80018ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001880:	781a      	ldrb	r2, [r3, #0]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	1c5a      	adds	r2, r3, #1
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001896:	3b01      	subs	r3, #1
 8001898:	b29a      	uxth	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	3b01      	subs	r3, #1
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1aa      	bne.n	800180a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	f000 fcc8 	bl	800224e <I2C_WaitOnBTFFlagUntilTimeout>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d00d      	beq.n	80018e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d107      	bne.n	80018dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e016      	b.n	800190e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2220      	movs	r2, #32
 80018f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001908:	2300      	movs	r3, #0
 800190a:	e000      	b.n	800190e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800190c:	2302      	movs	r3, #2
  }
}
 800190e:	4618      	mov	r0, r3
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	00100002 	.word	0x00100002
 800191c:	ffff0000 	.word	0xffff0000

08001920 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08c      	sub	sp, #48	; 0x30
 8001924:	af02      	add	r7, sp, #8
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	4608      	mov	r0, r1
 800192a:	4611      	mov	r1, r2
 800192c:	461a      	mov	r2, r3
 800192e:	4603      	mov	r3, r0
 8001930:	817b      	strh	r3, [r7, #10]
 8001932:	460b      	mov	r3, r1
 8001934:	813b      	strh	r3, [r7, #8]
 8001936:	4613      	mov	r3, r2
 8001938:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800193a:	f7fe ffa7 	bl	800088c <HAL_GetTick>
 800193e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b20      	cmp	r3, #32
 800194a:	f040 8208 	bne.w	8001d5e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	2319      	movs	r3, #25
 8001954:	2201      	movs	r2, #1
 8001956:	497b      	ldr	r1, [pc, #492]	; (8001b44 <HAL_I2C_Mem_Read+0x224>)
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f000 fb61 	bl	8002020 <I2C_WaitOnFlagUntilTimeout>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001964:	2302      	movs	r3, #2
 8001966:	e1fb      	b.n	8001d60 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800196e:	2b01      	cmp	r3, #1
 8001970:	d101      	bne.n	8001976 <HAL_I2C_Mem_Read+0x56>
 8001972:	2302      	movs	r3, #2
 8001974:	e1f4      	b.n	8001d60 <HAL_I2C_Mem_Read+0x440>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b01      	cmp	r3, #1
 800198a:	d007      	beq.n	800199c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f042 0201 	orr.w	r2, r2, #1
 800199a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2222      	movs	r2, #34	; 0x22
 80019b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2240      	movs	r2, #64	; 0x40
 80019b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2200      	movs	r2, #0
 80019c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80019cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4a5b      	ldr	r2, [pc, #364]	; (8001b48 <HAL_I2C_Mem_Read+0x228>)
 80019dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019de:	88f8      	ldrh	r0, [r7, #6]
 80019e0:	893a      	ldrh	r2, [r7, #8]
 80019e2:	8979      	ldrh	r1, [r7, #10]
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	9301      	str	r3, [sp, #4]
 80019e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	4603      	mov	r3, r0
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 fa46 	bl	8001e80 <I2C_RequestMemoryRead>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e1b0      	b.n	8001d60 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d113      	bne.n	8001a2e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a06:	2300      	movs	r3, #0
 8001a08:	623b      	str	r3, [r7, #32]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	623b      	str	r3, [r7, #32]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	623b      	str	r3, [r7, #32]
 8001a1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	e184      	b.n	8001d38 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d11b      	bne.n	8001a6e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	61fb      	str	r3, [r7, #28]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	61fb      	str	r3, [r7, #28]
 8001a5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	e164      	b.n	8001d38 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d11b      	bne.n	8001aae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a96:	2300      	movs	r3, #0
 8001a98:	61bb      	str	r3, [r7, #24]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	61bb      	str	r3, [r7, #24]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	61bb      	str	r3, [r7, #24]
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	e144      	b.n	8001d38 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001ac4:	e138      	b.n	8001d38 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aca:	2b03      	cmp	r3, #3
 8001acc:	f200 80f1 	bhi.w	8001cb2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d123      	bne.n	8001b20 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ada:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f000 fbf7 	bl	80022d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e139      	b.n	8001d60 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	691a      	ldr	r2, [r3, #16]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	3b01      	subs	r3, #1
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b1e:	e10b      	b.n	8001d38 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d14e      	bne.n	8001bc6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b2e:	2200      	movs	r2, #0
 8001b30:	4906      	ldr	r1, [pc, #24]	; (8001b4c <HAL_I2C_Mem_Read+0x22c>)
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f000 fa74 	bl	8002020 <I2C_WaitOnFlagUntilTimeout>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d008      	beq.n	8001b50 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e10e      	b.n	8001d60 <HAL_I2C_Mem_Read+0x440>
 8001b42:	bf00      	nop
 8001b44:	00100002 	.word	0x00100002
 8001b48:	ffff0000 	.word	0xffff0000
 8001b4c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	691a      	ldr	r2, [r3, #16]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bc4:	e0b8      	b.n	8001d38 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bcc:	2200      	movs	r2, #0
 8001bce:	4966      	ldr	r1, [pc, #408]	; (8001d68 <HAL_I2C_Mem_Read+0x448>)
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f000 fa25 	bl	8002020 <I2C_WaitOnFlagUntilTimeout>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0bf      	b.n	8001d60 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	691a      	ldr	r2, [r3, #16]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c28:	2200      	movs	r2, #0
 8001c2a:	494f      	ldr	r1, [pc, #316]	; (8001d68 <HAL_I2C_Mem_Read+0x448>)
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	f000 f9f7 	bl	8002020 <I2C_WaitOnFlagUntilTimeout>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e091      	b.n	8001d60 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	691a      	ldr	r2, [r3, #16]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5e:	1c5a      	adds	r2, r3, #1
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	3b01      	subs	r3, #1
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	691a      	ldr	r2, [r3, #16]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cb0:	e042      	b.n	8001d38 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f000 fb0a 	bl	80022d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e04c      	b.n	8001d60 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	691a      	ldr	r2, [r3, #16]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	1c5a      	adds	r2, r3, #1
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	d118      	bne.n	8001d38 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	691a      	ldr	r2, [r3, #16]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d22:	3b01      	subs	r3, #1
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	3b01      	subs	r3, #1
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f47f aec2 	bne.w	8001ac6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2220      	movs	r2, #32
 8001d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	e000      	b.n	8001d60 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001d5e:	2302      	movs	r3, #2
  }
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3728      	adds	r7, #40	; 0x28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	00010004 	.word	0x00010004

08001d6c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af02      	add	r7, sp, #8
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	4608      	mov	r0, r1
 8001d76:	4611      	mov	r1, r2
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	817b      	strh	r3, [r7, #10]
 8001d7e:	460b      	mov	r3, r1
 8001d80:	813b      	strh	r3, [r7, #8]
 8001d82:	4613      	mov	r3, r2
 8001d84:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	6a3b      	ldr	r3, [r7, #32]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f000 f93c 	bl	8002020 <I2C_WaitOnFlagUntilTimeout>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e05f      	b.n	8001e72 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001db2:	897b      	ldrh	r3, [r7, #10]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	461a      	mov	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001dc0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	6a3a      	ldr	r2, [r7, #32]
 8001dc6:	492d      	ldr	r1, [pc, #180]	; (8001e7c <I2C_RequestMemoryWrite+0x110>)
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f000 f980 	bl	80020ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e04c      	b.n	8001e72 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df0:	6a39      	ldr	r1, [r7, #32]
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f000 f9ea 	bl	80021cc <I2C_WaitOnTXEFlagUntilTimeout>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00d      	beq.n	8001e1a <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d107      	bne.n	8001e16 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e02b      	b.n	8001e72 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d105      	bne.n	8001e2c <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e20:	893b      	ldrh	r3, [r7, #8]
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	611a      	str	r2, [r3, #16]
 8001e2a:	e021      	b.n	8001e70 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001e2c:	893b      	ldrh	r3, [r7, #8]
 8001e2e:	0a1b      	lsrs	r3, r3, #8
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e3c:	6a39      	ldr	r1, [r7, #32]
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 f9c4 	bl	80021cc <I2C_WaitOnTXEFlagUntilTimeout>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00d      	beq.n	8001e66 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d107      	bne.n	8001e62 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e005      	b.n	8001e72 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e66:	893b      	ldrh	r3, [r7, #8]
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	00010002 	.word	0x00010002

08001e80 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af02      	add	r7, sp, #8
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	4608      	mov	r0, r1
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4603      	mov	r3, r0
 8001e90:	817b      	strh	r3, [r7, #10]
 8001e92:	460b      	mov	r3, r1
 8001e94:	813b      	strh	r3, [r7, #8]
 8001e96:	4613      	mov	r3, r2
 8001e98:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ea8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eb8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	6a3b      	ldr	r3, [r7, #32]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 f8aa 	bl	8002020 <I2C_WaitOnFlagUntilTimeout>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e09e      	b.n	8002014 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ed6:	897b      	ldrh	r3, [r7, #10]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	461a      	mov	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ee4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	6a3a      	ldr	r2, [r7, #32]
 8001eea:	494c      	ldr	r1, [pc, #304]	; (800201c <I2C_RequestMemoryRead+0x19c>)
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f000 f8ee 	bl	80020ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e08b      	b.n	8002014 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f14:	6a39      	ldr	r1, [r7, #32]
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f000 f958 	bl	80021cc <I2C_WaitOnTXEFlagUntilTimeout>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00d      	beq.n	8001f3e <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d107      	bne.n	8001f3a <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e06a      	b.n	8002014 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f3e:	88fb      	ldrh	r3, [r7, #6]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d105      	bne.n	8001f50 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f44:	893b      	ldrh	r3, [r7, #8]
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	611a      	str	r2, [r3, #16]
 8001f4e:	e021      	b.n	8001f94 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001f50:	893b      	ldrh	r3, [r7, #8]
 8001f52:	0a1b      	lsrs	r3, r3, #8
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f60:	6a39      	ldr	r1, [r7, #32]
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f000 f932 	bl	80021cc <I2C_WaitOnTXEFlagUntilTimeout>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00d      	beq.n	8001f8a <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d107      	bne.n	8001f86 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e044      	b.n	8002014 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f8a:	893b      	ldrh	r3, [r7, #8]
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f96:	6a39      	ldr	r1, [r7, #32]
 8001f98:	68f8      	ldr	r0, [r7, #12]
 8001f9a:	f000 f917 	bl	80021cc <I2C_WaitOnTXEFlagUntilTimeout>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00d      	beq.n	8001fc0 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	d107      	bne.n	8001fbc <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e029      	b.n	8002014 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f000 f81f 	bl	8002020 <I2C_WaitOnFlagUntilTimeout>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e013      	b.n	8002014 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001fec:	897b      	ldrh	r3, [r7, #10]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	6a3a      	ldr	r2, [r7, #32]
 8002000:	4906      	ldr	r1, [pc, #24]	; (800201c <I2C_RequestMemoryRead+0x19c>)
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f000 f863 	bl	80020ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	00010002 	.word	0x00010002

08002020 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	4613      	mov	r3, r2
 800202e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002030:	e025      	b.n	800207e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002038:	d021      	beq.n	800207e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800203a:	f7fe fc27 	bl	800088c <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	429a      	cmp	r2, r3
 8002048:	d302      	bcc.n	8002050 <I2C_WaitOnFlagUntilTimeout+0x30>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d116      	bne.n	800207e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2220      	movs	r2, #32
 800205a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	f043 0220 	orr.w	r2, r3, #32
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e023      	b.n	80020c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	0c1b      	lsrs	r3, r3, #16
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b01      	cmp	r3, #1
 8002086:	d10d      	bne.n	80020a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	43da      	mvns	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	4013      	ands	r3, r2
 8002094:	b29b      	uxth	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	bf0c      	ite	eq
 800209a:	2301      	moveq	r3, #1
 800209c:	2300      	movne	r3, #0
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	461a      	mov	r2, r3
 80020a2:	e00c      	b.n	80020be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	43da      	mvns	r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	4013      	ands	r3, r2
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	bf0c      	ite	eq
 80020b6:	2301      	moveq	r3, #1
 80020b8:	2300      	movne	r3, #0
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	461a      	mov	r2, r3
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d0b6      	beq.n	8002032 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b084      	sub	sp, #16
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	60f8      	str	r0, [r7, #12]
 80020d6:	60b9      	str	r1, [r7, #8]
 80020d8:	607a      	str	r2, [r7, #4]
 80020da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020dc:	e051      	b.n	8002182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ec:	d123      	bne.n	8002136 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002106:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2220      	movs	r2, #32
 8002112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	f043 0204 	orr.w	r2, r3, #4
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e046      	b.n	80021c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213c:	d021      	beq.n	8002182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800213e:	f7fe fba5 	bl	800088c <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	429a      	cmp	r2, r3
 800214c:	d302      	bcc.n	8002154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d116      	bne.n	8002182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2220      	movs	r2, #32
 800215e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f043 0220 	orr.w	r2, r3, #32
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e020      	b.n	80021c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	0c1b      	lsrs	r3, r3, #16
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b01      	cmp	r3, #1
 800218a:	d10c      	bne.n	80021a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	43da      	mvns	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	4013      	ands	r3, r2
 8002198:	b29b      	uxth	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	bf14      	ite	ne
 800219e:	2301      	movne	r3, #1
 80021a0:	2300      	moveq	r3, #0
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	e00b      	b.n	80021be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	43da      	mvns	r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	4013      	ands	r3, r2
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	bf14      	ite	ne
 80021b8:	2301      	movne	r3, #1
 80021ba:	2300      	moveq	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d18d      	bne.n	80020de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021d8:	e02d      	b.n	8002236 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f000 f8ce 	bl	800237c <I2C_IsAcknowledgeFailed>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e02d      	b.n	8002246 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f0:	d021      	beq.n	8002236 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021f2:	f7fe fb4b 	bl	800088c <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	68ba      	ldr	r2, [r7, #8]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d302      	bcc.n	8002208 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d116      	bne.n	8002236 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2220      	movs	r2, #32
 8002212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f043 0220 	orr.w	r2, r3, #32
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e007      	b.n	8002246 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002240:	2b80      	cmp	r3, #128	; 0x80
 8002242:	d1ca      	bne.n	80021da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b084      	sub	sp, #16
 8002252:	af00      	add	r7, sp, #0
 8002254:	60f8      	str	r0, [r7, #12]
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800225a:	e02d      	b.n	80022b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f000 f88d 	bl	800237c <I2C_IsAcknowledgeFailed>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e02d      	b.n	80022c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002272:	d021      	beq.n	80022b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002274:	f7fe fb0a 	bl	800088c <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	429a      	cmp	r2, r3
 8002282:	d302      	bcc.n	800228a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d116      	bne.n	80022b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2220      	movs	r2, #32
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	f043 0220 	orr.w	r2, r3, #32
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e007      	b.n	80022c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	d1ca      	bne.n	800225c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022dc:	e042      	b.n	8002364 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	f003 0310 	and.w	r3, r3, #16
 80022e8:	2b10      	cmp	r3, #16
 80022ea:	d119      	bne.n	8002320 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f06f 0210 	mvn.w	r2, #16
 80022f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2220      	movs	r2, #32
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e029      	b.n	8002374 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002320:	f7fe fab4 	bl	800088c <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	429a      	cmp	r2, r3
 800232e:	d302      	bcc.n	8002336 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d116      	bne.n	8002364 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2220      	movs	r2, #32
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002350:	f043 0220 	orr.w	r2, r3, #32
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e007      	b.n	8002374 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800236e:	2b40      	cmp	r3, #64	; 0x40
 8002370:	d1b5      	bne.n	80022de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800238e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002392:	d11b      	bne.n	80023cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800239c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	f043 0204 	orr.w	r2, r3, #4
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e000      	b.n	80023ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
	...

080023dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e22d      	b.n	800284a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d075      	beq.n	80024e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023fa:	4ba3      	ldr	r3, [pc, #652]	; (8002688 <HAL_RCC_OscConfig+0x2ac>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	2b04      	cmp	r3, #4
 8002404:	d00c      	beq.n	8002420 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002406:	4ba0      	ldr	r3, [pc, #640]	; (8002688 <HAL_RCC_OscConfig+0x2ac>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800240e:	2b08      	cmp	r3, #8
 8002410:	d112      	bne.n	8002438 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002412:	4b9d      	ldr	r3, [pc, #628]	; (8002688 <HAL_RCC_OscConfig+0x2ac>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800241a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800241e:	d10b      	bne.n	8002438 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002420:	4b99      	ldr	r3, [pc, #612]	; (8002688 <HAL_RCC_OscConfig+0x2ac>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d05b      	beq.n	80024e4 <HAL_RCC_OscConfig+0x108>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d157      	bne.n	80024e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e208      	b.n	800284a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002440:	d106      	bne.n	8002450 <HAL_RCC_OscConfig+0x74>
 8002442:	4b91      	ldr	r3, [pc, #580]	; (8002688 <HAL_RCC_OscConfig+0x2ac>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a90      	ldr	r2, [pc, #576]	; (8002688 <HAL_RCC_OscConfig+0x2ac>)
 8002448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	e01d      	b.n	800248c <HAL_RCC_OscConfig+0xb0>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002458:	d10c      	bne.n	8002474 <HAL_RCC_OscConfig+0x98>
 800245a:	4b8b      	ldr	r3, [pc, #556]	; (8002688 <HAL_RCC_OscConfig+0x2ac>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a8a      	ldr	r2, [pc, #552]	; (8002688 <HAL_RCC_OscConfig+0x2ac>)
 8002460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	4b88      	ldr	r3, [pc, #544]	; (8002688 <HAL_RCC_OscConfig+0x2ac>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a87      	ldr	r2, [pc, #540]	; (8002688 <HAL_RCC_OscConfig+0x2ac>)
 800246c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	e00b      	b.n	800248c <HAL_RCC_OscConfig+0xb0>
 8002474:	4b84      	ldr	r3, [pc, #528]	; (8002688 <HAL_RCC_OscConfig+0x2ac>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a83      	ldr	r2, [pc, #524]	; (8002688 <HAL_RCC_OscConfig+0x2ac>)
 800247a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	4b81      	ldr	r3, [pc, #516]	; (8002688 <HAL_RCC_OscConfig+0x2ac>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a80      	ldr	r2, [pc, #512]	; (8002688 <HAL_RCC_OscConfig+0x2ac>)
 8002486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800248a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d013      	beq.n	80024bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002494:	f7fe f9fa 	bl	800088c <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800249c:	f7fe f9f6 	bl	800088c <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b64      	cmp	r3, #100	; 0x64
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e1cd      	b.n	800284a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ae:	4b76      	ldr	r3, [pc, #472]	; (8002688 <HAL_RCC_OscConfig+0x2ac>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0f0      	beq.n	800249c <HAL_RCC_OscConfig+0xc0>
 80024ba:	e014      	b.n	80024e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024bc:	f7fe f9e6 	bl	800088c <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024c4:	f7fe f9e2 	bl	800088c <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b64      	cmp	r3, #100	; 0x64
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e1b9      	b.n	800284a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d6:	4b6c      	ldr	r3, [pc, #432]	; (8002688 <HAL_RCC_OscConfig+0x2ac>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f0      	bne.n	80024c4 <HAL_RCC_OscConfig+0xe8>
 80024e2:	e000      	b.n	80024e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d063      	beq.n	80025ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024f2:	4b65      	ldr	r3, [pc, #404]	; (8002688 <HAL_RCC_OscConfig+0x2ac>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 030c 	and.w	r3, r3, #12
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00b      	beq.n	8002516 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024fe:	4b62      	ldr	r3, [pc, #392]	; (8002688 <HAL_RCC_OscConfig+0x2ac>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002506:	2b08      	cmp	r3, #8
 8002508:	d11c      	bne.n	8002544 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800250a:	4b5f      	ldr	r3, [pc, #380]	; (8002688 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d116      	bne.n	8002544 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002516:	4b5c      	ldr	r3, [pc, #368]	; (8002688 <HAL_RCC_OscConfig+0x2ac>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d005      	beq.n	800252e <HAL_RCC_OscConfig+0x152>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d001      	beq.n	800252e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e18d      	b.n	800284a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252e:	4b56      	ldr	r3, [pc, #344]	; (8002688 <HAL_RCC_OscConfig+0x2ac>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	4952      	ldr	r1, [pc, #328]	; (8002688 <HAL_RCC_OscConfig+0x2ac>)
 800253e:	4313      	orrs	r3, r2
 8002540:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002542:	e03a      	b.n	80025ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d020      	beq.n	800258e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800254c:	4b4f      	ldr	r3, [pc, #316]	; (800268c <HAL_RCC_OscConfig+0x2b0>)
 800254e:	2201      	movs	r2, #1
 8002550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002552:	f7fe f99b 	bl	800088c <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800255a:	f7fe f997 	bl	800088c <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e16e      	b.n	800284a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256c:	4b46      	ldr	r3, [pc, #280]	; (8002688 <HAL_RCC_OscConfig+0x2ac>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f0      	beq.n	800255a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002578:	4b43      	ldr	r3, [pc, #268]	; (8002688 <HAL_RCC_OscConfig+0x2ac>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	4940      	ldr	r1, [pc, #256]	; (8002688 <HAL_RCC_OscConfig+0x2ac>)
 8002588:	4313      	orrs	r3, r2
 800258a:	600b      	str	r3, [r1, #0]
 800258c:	e015      	b.n	80025ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800258e:	4b3f      	ldr	r3, [pc, #252]	; (800268c <HAL_RCC_OscConfig+0x2b0>)
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002594:	f7fe f97a 	bl	800088c <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800259c:	f7fe f976 	bl	800088c <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e14d      	b.n	800284a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ae:	4b36      	ldr	r3, [pc, #216]	; (8002688 <HAL_RCC_OscConfig+0x2ac>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d030      	beq.n	8002628 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d016      	beq.n	80025fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ce:	4b30      	ldr	r3, [pc, #192]	; (8002690 <HAL_RCC_OscConfig+0x2b4>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d4:	f7fe f95a 	bl	800088c <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025dc:	f7fe f956 	bl	800088c <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e12d      	b.n	800284a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ee:	4b26      	ldr	r3, [pc, #152]	; (8002688 <HAL_RCC_OscConfig+0x2ac>)
 80025f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f0      	beq.n	80025dc <HAL_RCC_OscConfig+0x200>
 80025fa:	e015      	b.n	8002628 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025fc:	4b24      	ldr	r3, [pc, #144]	; (8002690 <HAL_RCC_OscConfig+0x2b4>)
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002602:	f7fe f943 	bl	800088c <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800260a:	f7fe f93f 	bl	800088c <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e116      	b.n	800284a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800261c:	4b1a      	ldr	r3, [pc, #104]	; (8002688 <HAL_RCC_OscConfig+0x2ac>)
 800261e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1f0      	bne.n	800260a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 80a0 	beq.w	8002776 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002636:	2300      	movs	r3, #0
 8002638:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800263a:	4b13      	ldr	r3, [pc, #76]	; (8002688 <HAL_RCC_OscConfig+0x2ac>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10f      	bne.n	8002666 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <HAL_RCC_OscConfig+0x2ac>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	4a0e      	ldr	r2, [pc, #56]	; (8002688 <HAL_RCC_OscConfig+0x2ac>)
 8002650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002654:	6413      	str	r3, [r2, #64]	; 0x40
 8002656:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <HAL_RCC_OscConfig+0x2ac>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002662:	2301      	movs	r3, #1
 8002664:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002666:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <HAL_RCC_OscConfig+0x2b8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266e:	2b00      	cmp	r3, #0
 8002670:	d121      	bne.n	80026b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002672:	4b08      	ldr	r3, [pc, #32]	; (8002694 <HAL_RCC_OscConfig+0x2b8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a07      	ldr	r2, [pc, #28]	; (8002694 <HAL_RCC_OscConfig+0x2b8>)
 8002678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800267c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800267e:	f7fe f905 	bl	800088c <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002684:	e011      	b.n	80026aa <HAL_RCC_OscConfig+0x2ce>
 8002686:	bf00      	nop
 8002688:	40023800 	.word	0x40023800
 800268c:	42470000 	.word	0x42470000
 8002690:	42470e80 	.word	0x42470e80
 8002694:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002698:	f7fe f8f8 	bl	800088c <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e0cf      	b.n	800284a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026aa:	4b6a      	ldr	r3, [pc, #424]	; (8002854 <HAL_RCC_OscConfig+0x478>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d106      	bne.n	80026cc <HAL_RCC_OscConfig+0x2f0>
 80026be:	4b66      	ldr	r3, [pc, #408]	; (8002858 <HAL_RCC_OscConfig+0x47c>)
 80026c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c2:	4a65      	ldr	r2, [pc, #404]	; (8002858 <HAL_RCC_OscConfig+0x47c>)
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	6713      	str	r3, [r2, #112]	; 0x70
 80026ca:	e01c      	b.n	8002706 <HAL_RCC_OscConfig+0x32a>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2b05      	cmp	r3, #5
 80026d2:	d10c      	bne.n	80026ee <HAL_RCC_OscConfig+0x312>
 80026d4:	4b60      	ldr	r3, [pc, #384]	; (8002858 <HAL_RCC_OscConfig+0x47c>)
 80026d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d8:	4a5f      	ldr	r2, [pc, #380]	; (8002858 <HAL_RCC_OscConfig+0x47c>)
 80026da:	f043 0304 	orr.w	r3, r3, #4
 80026de:	6713      	str	r3, [r2, #112]	; 0x70
 80026e0:	4b5d      	ldr	r3, [pc, #372]	; (8002858 <HAL_RCC_OscConfig+0x47c>)
 80026e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e4:	4a5c      	ldr	r2, [pc, #368]	; (8002858 <HAL_RCC_OscConfig+0x47c>)
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	6713      	str	r3, [r2, #112]	; 0x70
 80026ec:	e00b      	b.n	8002706 <HAL_RCC_OscConfig+0x32a>
 80026ee:	4b5a      	ldr	r3, [pc, #360]	; (8002858 <HAL_RCC_OscConfig+0x47c>)
 80026f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f2:	4a59      	ldr	r2, [pc, #356]	; (8002858 <HAL_RCC_OscConfig+0x47c>)
 80026f4:	f023 0301 	bic.w	r3, r3, #1
 80026f8:	6713      	str	r3, [r2, #112]	; 0x70
 80026fa:	4b57      	ldr	r3, [pc, #348]	; (8002858 <HAL_RCC_OscConfig+0x47c>)
 80026fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fe:	4a56      	ldr	r2, [pc, #344]	; (8002858 <HAL_RCC_OscConfig+0x47c>)
 8002700:	f023 0304 	bic.w	r3, r3, #4
 8002704:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d015      	beq.n	800273a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270e:	f7fe f8bd 	bl	800088c <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002714:	e00a      	b.n	800272c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002716:	f7fe f8b9 	bl	800088c <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	f241 3288 	movw	r2, #5000	; 0x1388
 8002724:	4293      	cmp	r3, r2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e08e      	b.n	800284a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800272c:	4b4a      	ldr	r3, [pc, #296]	; (8002858 <HAL_RCC_OscConfig+0x47c>)
 800272e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0ee      	beq.n	8002716 <HAL_RCC_OscConfig+0x33a>
 8002738:	e014      	b.n	8002764 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273a:	f7fe f8a7 	bl	800088c <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002740:	e00a      	b.n	8002758 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002742:	f7fe f8a3 	bl	800088c <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002750:	4293      	cmp	r3, r2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e078      	b.n	800284a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002758:	4b3f      	ldr	r3, [pc, #252]	; (8002858 <HAL_RCC_OscConfig+0x47c>)
 800275a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1ee      	bne.n	8002742 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002764:	7dfb      	ldrb	r3, [r7, #23]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d105      	bne.n	8002776 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800276a:	4b3b      	ldr	r3, [pc, #236]	; (8002858 <HAL_RCC_OscConfig+0x47c>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	4a3a      	ldr	r2, [pc, #232]	; (8002858 <HAL_RCC_OscConfig+0x47c>)
 8002770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002774:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d064      	beq.n	8002848 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800277e:	4b36      	ldr	r3, [pc, #216]	; (8002858 <HAL_RCC_OscConfig+0x47c>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	2b08      	cmp	r3, #8
 8002788:	d05c      	beq.n	8002844 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d141      	bne.n	8002816 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002792:	4b32      	ldr	r3, [pc, #200]	; (800285c <HAL_RCC_OscConfig+0x480>)
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002798:	f7fe f878 	bl	800088c <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a0:	f7fe f874 	bl	800088c <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e04b      	b.n	800284a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b2:	4b29      	ldr	r3, [pc, #164]	; (8002858 <HAL_RCC_OscConfig+0x47c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69da      	ldr	r2, [r3, #28]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	019b      	lsls	r3, r3, #6
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d4:	085b      	lsrs	r3, r3, #1
 80027d6:	3b01      	subs	r3, #1
 80027d8:	041b      	lsls	r3, r3, #16
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e0:	061b      	lsls	r3, r3, #24
 80027e2:	491d      	ldr	r1, [pc, #116]	; (8002858 <HAL_RCC_OscConfig+0x47c>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027e8:	4b1c      	ldr	r3, [pc, #112]	; (800285c <HAL_RCC_OscConfig+0x480>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ee:	f7fe f84d 	bl	800088c <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f6:	f7fe f849 	bl	800088c <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e020      	b.n	800284a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002808:	4b13      	ldr	r3, [pc, #76]	; (8002858 <HAL_RCC_OscConfig+0x47c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0f0      	beq.n	80027f6 <HAL_RCC_OscConfig+0x41a>
 8002814:	e018      	b.n	8002848 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002816:	4b11      	ldr	r3, [pc, #68]	; (800285c <HAL_RCC_OscConfig+0x480>)
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281c:	f7fe f836 	bl	800088c <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002824:	f7fe f832 	bl	800088c <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e009      	b.n	800284a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002836:	4b08      	ldr	r3, [pc, #32]	; (8002858 <HAL_RCC_OscConfig+0x47c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f0      	bne.n	8002824 <HAL_RCC_OscConfig+0x448>
 8002842:	e001      	b.n	8002848 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e000      	b.n	800284a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40007000 	.word	0x40007000
 8002858:	40023800 	.word	0x40023800
 800285c:	42470060 	.word	0x42470060

08002860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e0ca      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002874:	4b67      	ldr	r3, [pc, #412]	; (8002a14 <HAL_RCC_ClockConfig+0x1b4>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 030f 	and.w	r3, r3, #15
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d90c      	bls.n	800289c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002882:	4b64      	ldr	r3, [pc, #400]	; (8002a14 <HAL_RCC_ClockConfig+0x1b4>)
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800288a:	4b62      	ldr	r3, [pc, #392]	; (8002a14 <HAL_RCC_ClockConfig+0x1b4>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	429a      	cmp	r2, r3
 8002896:	d001      	beq.n	800289c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0b6      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d020      	beq.n	80028ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028b4:	4b58      	ldr	r3, [pc, #352]	; (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	4a57      	ldr	r2, [pc, #348]	; (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 80028ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0308 	and.w	r3, r3, #8
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028cc:	4b52      	ldr	r3, [pc, #328]	; (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	4a51      	ldr	r2, [pc, #324]	; (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 80028d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d8:	4b4f      	ldr	r3, [pc, #316]	; (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	494c      	ldr	r1, [pc, #304]	; (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d044      	beq.n	8002980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d107      	bne.n	800290e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fe:	4b46      	ldr	r3, [pc, #280]	; (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d119      	bne.n	800293e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e07d      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b02      	cmp	r3, #2
 8002914:	d003      	beq.n	800291e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800291a:	2b03      	cmp	r3, #3
 800291c:	d107      	bne.n	800292e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800291e:	4b3e      	ldr	r3, [pc, #248]	; (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d109      	bne.n	800293e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e06d      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292e:	4b3a      	ldr	r3, [pc, #232]	; (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e065      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800293e:	4b36      	ldr	r3, [pc, #216]	; (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f023 0203 	bic.w	r2, r3, #3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	4933      	ldr	r1, [pc, #204]	; (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 800294c:	4313      	orrs	r3, r2
 800294e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002950:	f7fd ff9c 	bl	800088c <HAL_GetTick>
 8002954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002956:	e00a      	b.n	800296e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002958:	f7fd ff98 	bl	800088c <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f241 3288 	movw	r2, #5000	; 0x1388
 8002966:	4293      	cmp	r3, r2
 8002968:	d901      	bls.n	800296e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e04d      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296e:	4b2a      	ldr	r3, [pc, #168]	; (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 020c 	and.w	r2, r3, #12
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	429a      	cmp	r2, r3
 800297e:	d1eb      	bne.n	8002958 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002980:	4b24      	ldr	r3, [pc, #144]	; (8002a14 <HAL_RCC_ClockConfig+0x1b4>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 030f 	and.w	r3, r3, #15
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d20c      	bcs.n	80029a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298e:	4b21      	ldr	r3, [pc, #132]	; (8002a14 <HAL_RCC_ClockConfig+0x1b4>)
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002996:	4b1f      	ldr	r3, [pc, #124]	; (8002a14 <HAL_RCC_ClockConfig+0x1b4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e030      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d008      	beq.n	80029c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029b4:	4b18      	ldr	r3, [pc, #96]	; (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	4915      	ldr	r1, [pc, #84]	; (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d009      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029d2:	4b11      	ldr	r3, [pc, #68]	; (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	490d      	ldr	r1, [pc, #52]	; (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029e6:	f000 f81d 	bl	8002a24 <HAL_RCC_GetSysClockFreq>
 80029ea:	4601      	mov	r1, r0
 80029ec:	4b0a      	ldr	r3, [pc, #40]	; (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	091b      	lsrs	r3, r3, #4
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	4a09      	ldr	r2, [pc, #36]	; (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	5cd3      	ldrb	r3, [r2, r3]
 80029fa:	fa21 f303 	lsr.w	r3, r1, r3
 80029fe:	4a08      	ldr	r2, [pc, #32]	; (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 8002a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002a02:	200f      	movs	r0, #15
 8002a04:	f7fd fefe 	bl	8000804 <HAL_InitTick>

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40023c00 	.word	0x40023c00
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	080077d0 	.word	0x080077d0
 8002a20:	2000000c 	.word	0x2000000c

08002a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	607b      	str	r3, [r7, #4]
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	2300      	movs	r3, #0
 8002a34:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a3a:	4b63      	ldr	r3, [pc, #396]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 030c 	and.w	r3, r3, #12
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d007      	beq.n	8002a56 <HAL_RCC_GetSysClockFreq+0x32>
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d008      	beq.n	8002a5c <HAL_RCC_GetSysClockFreq+0x38>
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f040 80b4 	bne.w	8002bb8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a50:	4b5e      	ldr	r3, [pc, #376]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002a52:	60bb      	str	r3, [r7, #8]
       break;
 8002a54:	e0b3      	b.n	8002bbe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a56:	4b5e      	ldr	r3, [pc, #376]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002a58:	60bb      	str	r3, [r7, #8]
      break;
 8002a5a:	e0b0      	b.n	8002bbe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a5c:	4b5a      	ldr	r3, [pc, #360]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a64:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a66:	4b58      	ldr	r3, [pc, #352]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d04a      	beq.n	8002b08 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a72:	4b55      	ldr	r3, [pc, #340]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	099b      	lsrs	r3, r3, #6
 8002a78:	f04f 0400 	mov.w	r4, #0
 8002a7c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	ea03 0501 	and.w	r5, r3, r1
 8002a88:	ea04 0602 	and.w	r6, r4, r2
 8002a8c:	4629      	mov	r1, r5
 8002a8e:	4632      	mov	r2, r6
 8002a90:	f04f 0300 	mov.w	r3, #0
 8002a94:	f04f 0400 	mov.w	r4, #0
 8002a98:	0154      	lsls	r4, r2, #5
 8002a9a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a9e:	014b      	lsls	r3, r1, #5
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4622      	mov	r2, r4
 8002aa4:	1b49      	subs	r1, r1, r5
 8002aa6:	eb62 0206 	sbc.w	r2, r2, r6
 8002aaa:	f04f 0300 	mov.w	r3, #0
 8002aae:	f04f 0400 	mov.w	r4, #0
 8002ab2:	0194      	lsls	r4, r2, #6
 8002ab4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ab8:	018b      	lsls	r3, r1, #6
 8002aba:	1a5b      	subs	r3, r3, r1
 8002abc:	eb64 0402 	sbc.w	r4, r4, r2
 8002ac0:	f04f 0100 	mov.w	r1, #0
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	00e2      	lsls	r2, r4, #3
 8002aca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ace:	00d9      	lsls	r1, r3, #3
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	4614      	mov	r4, r2
 8002ad4:	195b      	adds	r3, r3, r5
 8002ad6:	eb44 0406 	adc.w	r4, r4, r6
 8002ada:	f04f 0100 	mov.w	r1, #0
 8002ade:	f04f 0200 	mov.w	r2, #0
 8002ae2:	0262      	lsls	r2, r4, #9
 8002ae4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002ae8:	0259      	lsls	r1, r3, #9
 8002aea:	460b      	mov	r3, r1
 8002aec:	4614      	mov	r4, r2
 8002aee:	4618      	mov	r0, r3
 8002af0:	4621      	mov	r1, r4
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f04f 0400 	mov.w	r4, #0
 8002af8:	461a      	mov	r2, r3
 8002afa:	4623      	mov	r3, r4
 8002afc:	f7fd fce0 	bl	80004c0 <__aeabi_uldivmod>
 8002b00:	4603      	mov	r3, r0
 8002b02:	460c      	mov	r4, r1
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	e049      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b08:	4b2f      	ldr	r3, [pc, #188]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	099b      	lsrs	r3, r3, #6
 8002b0e:	f04f 0400 	mov.w	r4, #0
 8002b12:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	ea03 0501 	and.w	r5, r3, r1
 8002b1e:	ea04 0602 	and.w	r6, r4, r2
 8002b22:	4629      	mov	r1, r5
 8002b24:	4632      	mov	r2, r6
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	f04f 0400 	mov.w	r4, #0
 8002b2e:	0154      	lsls	r4, r2, #5
 8002b30:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b34:	014b      	lsls	r3, r1, #5
 8002b36:	4619      	mov	r1, r3
 8002b38:	4622      	mov	r2, r4
 8002b3a:	1b49      	subs	r1, r1, r5
 8002b3c:	eb62 0206 	sbc.w	r2, r2, r6
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	f04f 0400 	mov.w	r4, #0
 8002b48:	0194      	lsls	r4, r2, #6
 8002b4a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b4e:	018b      	lsls	r3, r1, #6
 8002b50:	1a5b      	subs	r3, r3, r1
 8002b52:	eb64 0402 	sbc.w	r4, r4, r2
 8002b56:	f04f 0100 	mov.w	r1, #0
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	00e2      	lsls	r2, r4, #3
 8002b60:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b64:	00d9      	lsls	r1, r3, #3
 8002b66:	460b      	mov	r3, r1
 8002b68:	4614      	mov	r4, r2
 8002b6a:	195b      	adds	r3, r3, r5
 8002b6c:	eb44 0406 	adc.w	r4, r4, r6
 8002b70:	f04f 0100 	mov.w	r1, #0
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	02a2      	lsls	r2, r4, #10
 8002b7a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002b7e:	0299      	lsls	r1, r3, #10
 8002b80:	460b      	mov	r3, r1
 8002b82:	4614      	mov	r4, r2
 8002b84:	4618      	mov	r0, r3
 8002b86:	4621      	mov	r1, r4
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f04f 0400 	mov.w	r4, #0
 8002b8e:	461a      	mov	r2, r3
 8002b90:	4623      	mov	r3, r4
 8002b92:	f7fd fc95 	bl	80004c0 <__aeabi_uldivmod>
 8002b96:	4603      	mov	r3, r0
 8002b98:	460c      	mov	r4, r1
 8002b9a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b9c:	4b0a      	ldr	r3, [pc, #40]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	0c1b      	lsrs	r3, r3, #16
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb4:	60bb      	str	r3, [r7, #8]
      break;
 8002bb6:	e002      	b.n	8002bbe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bb8:	4b04      	ldr	r3, [pc, #16]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002bba:	60bb      	str	r3, [r7, #8]
      break;
 8002bbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bbe:	68bb      	ldr	r3, [r7, #8]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	00f42400 	.word	0x00f42400
 8002bd0:	007a1200 	.word	0x007a1200

08002bd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bd8:	4b03      	ldr	r3, [pc, #12]	; (8002be8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bda:	681b      	ldr	r3, [r3, #0]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	2000000c 	.word	0x2000000c

08002bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bf0:	f7ff fff0 	bl	8002bd4 <HAL_RCC_GetHCLKFreq>
 8002bf4:	4601      	mov	r1, r0
 8002bf6:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	0a9b      	lsrs	r3, r3, #10
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	4a03      	ldr	r2, [pc, #12]	; (8002c10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c02:	5cd3      	ldrb	r3, [r2, r3]
 8002c04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	080077e0 	.word	0x080077e0

08002c14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c18:	f7ff ffdc 	bl	8002bd4 <HAL_RCC_GetHCLKFreq>
 8002c1c:	4601      	mov	r1, r0
 8002c1e:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	0b5b      	lsrs	r3, r3, #13
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	4a03      	ldr	r2, [pc, #12]	; (8002c38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c2a:	5cd3      	ldrb	r3, [r2, r3]
 8002c2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40023800 	.word	0x40023800
 8002c38:	080077e0 	.word	0x080077e0

08002c3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e03f      	b.n	8002cce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d106      	bne.n	8002c68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f004 f852 	bl	8006d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2224      	movs	r2, #36	; 0x24
 8002c6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f9a1 	bl	8002fc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695a      	ldr	r2, [r3, #20]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ca4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b088      	sub	sp, #32
 8002cda:	af02      	add	r7, sp, #8
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	603b      	str	r3, [r7, #0]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b20      	cmp	r3, #32
 8002cf4:	d173      	bne.n	8002dde <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <HAL_UART_Transmit+0x2c>
 8002cfc:	88fb      	ldrh	r3, [r7, #6]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e06c      	b.n	8002de0 <HAL_UART_Transmit+0x10a>
    }

    /* Process Locked */
//    __HAL_LOCK(huart);

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2221      	movs	r2, #33	; 0x21
 8002d10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002d14:	f7fd fdba 	bl	800088c <HAL_GetTick>
 8002d18:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	88fa      	ldrh	r2, [r7, #6]
 8002d1e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	88fa      	ldrh	r2, [r7, #6]
 8002d24:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d26:	e042      	b.n	8002dae <HAL_UART_Transmit+0xd8>
    {
      huart->TxXferCount--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d3e:	d122      	bne.n	8002d86 <HAL_UART_Transmit+0xb0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	2200      	movs	r2, #0
 8002d48:	2180      	movs	r1, #128	; 0x80
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 f8f2 	bl	8002f34 <UART_WaitOnFlagUntilTimeout>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <HAL_UART_Transmit+0x84>
        {
          return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e042      	b.n	8002de0 <HAL_UART_Transmit+0x10a>
        }
        tmp = (uint16_t *) pData;
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	461a      	mov	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d6c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d103      	bne.n	8002d7e <HAL_UART_Transmit+0xa8>
        {
          pData += 2U;
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	3302      	adds	r3, #2
 8002d7a:	60bb      	str	r3, [r7, #8]
 8002d7c:	e017      	b.n	8002dae <HAL_UART_Transmit+0xd8>
        }
        else
        {
          pData += 1U;
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	3301      	adds	r3, #1
 8002d82:	60bb      	str	r3, [r7, #8]
 8002d84:	e013      	b.n	8002dae <HAL_UART_Transmit+0xd8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2180      	movs	r1, #128	; 0x80
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 f8cf 	bl	8002f34 <UART_WaitOnFlagUntilTimeout>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <HAL_UART_Transmit+0xca>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e01f      	b.n	8002de0 <HAL_UART_Transmit+0x10a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	60ba      	str	r2, [r7, #8]
 8002da6:	781a      	ldrb	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1b7      	bne.n	8002d28 <HAL_UART_Transmit+0x52>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2140      	movs	r1, #64	; 0x40
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 f8b6 	bl	8002f34 <UART_WaitOnFlagUntilTimeout>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e006      	b.n	8002de0 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
//    __HAL_UNLOCK(huart);

    return HAL_OK;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	e000      	b.n	8002de0 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002dde:	2302      	movs	r3, #2
  }
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b088      	sub	sp, #32
 8002dec:	af02      	add	r7, sp, #8
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	603b      	str	r3, [r7, #0]
 8002df4:	4613      	mov	r3, r2
 8002df6:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b20      	cmp	r3, #32
 8002e06:	f040 8090 	bne.w	8002f2a <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d002      	beq.n	8002e16 <HAL_UART_Receive+0x2e>
 8002e10:	88fb      	ldrh	r3, [r7, #6]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e088      	b.n	8002f2c <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <HAL_UART_Receive+0x40>
 8002e24:	2302      	movs	r3, #2
 8002e26:	e081      	b.n	8002f2c <HAL_UART_Receive+0x144>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2222      	movs	r2, #34	; 0x22
 8002e3a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002e3e:	f7fd fd25 	bl	800088c <HAL_GetTick>
 8002e42:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	88fa      	ldrh	r2, [r7, #6]
 8002e48:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	88fa      	ldrh	r2, [r7, #6]
 8002e4e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002e50:	e05c      	b.n	8002f0c <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e68:	d12b      	bne.n	8002ec2 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2200      	movs	r2, #0
 8002e72:	2120      	movs	r1, #32
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 f85d 	bl	8002f34 <UART_WaitOnFlagUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e053      	b.n	8002f2c <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10c      	bne.n	8002eaa <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	3302      	adds	r3, #2
 8002ea6:	60bb      	str	r3, [r7, #8]
 8002ea8:	e030      	b.n	8002f0c <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	60bb      	str	r3, [r7, #8]
 8002ec0:	e024      	b.n	8002f0c <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	2120      	movs	r1, #32
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 f831 	bl	8002f34 <UART_WaitOnFlagUntilTimeout>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e027      	b.n	8002f2c <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d108      	bne.n	8002ef6 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6859      	ldr	r1, [r3, #4]
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	60ba      	str	r2, [r7, #8]
 8002ef0:	b2ca      	uxtb	r2, r1
 8002ef2:	701a      	strb	r2, [r3, #0]
 8002ef4:	e00a      	b.n	8002f0c <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	1c59      	adds	r1, r3, #1
 8002f02:	60b9      	str	r1, [r7, #8]
 8002f04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f08:	b2d2      	uxtb	r2, r2
 8002f0a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d19d      	bne.n	8002e52 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	e000      	b.n	8002f2c <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8002f2a:	2302      	movs	r3, #2
  }
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	603b      	str	r3, [r7, #0]
 8002f40:	4613      	mov	r3, r2
 8002f42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f44:	e02c      	b.n	8002fa0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4c:	d028      	beq.n	8002fa0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d007      	beq.n	8002f64 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f54:	f7fd fc9a 	bl	800088c <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d21d      	bcs.n	8002fa0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f72:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695a      	ldr	r2, [r3, #20]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0201 	bic.w	r2, r2, #1
 8002f82:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e00f      	b.n	8002fc0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	bf0c      	ite	eq
 8002fb0:	2301      	moveq	r3, #1
 8002fb2:	2300      	movne	r3, #0
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	79fb      	ldrb	r3, [r7, #7]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d0c3      	beq.n	8002f46 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fc8:	b5b0      	push	{r4, r5, r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003008:	f023 030c 	bic.w	r3, r3, #12
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	68f9      	ldr	r1, [r7, #12]
 8003012:	430b      	orrs	r3, r1
 8003014:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699a      	ldr	r2, [r3, #24]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003034:	f040 80e4 	bne.w	8003200 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4aab      	ldr	r2, [pc, #684]	; (80032ec <UART_SetConfig+0x324>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d004      	beq.n	800304c <UART_SetConfig+0x84>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4aaa      	ldr	r2, [pc, #680]	; (80032f0 <UART_SetConfig+0x328>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d16c      	bne.n	8003126 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800304c:	f7ff fde2 	bl	8002c14 <HAL_RCC_GetPCLK2Freq>
 8003050:	4602      	mov	r2, r0
 8003052:	4613      	mov	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	009a      	lsls	r2, r3, #2
 800305a:	441a      	add	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	fbb2 f3f3 	udiv	r3, r2, r3
 8003066:	4aa3      	ldr	r2, [pc, #652]	; (80032f4 <UART_SetConfig+0x32c>)
 8003068:	fba2 2303 	umull	r2, r3, r2, r3
 800306c:	095b      	lsrs	r3, r3, #5
 800306e:	011c      	lsls	r4, r3, #4
 8003070:	f7ff fdd0 	bl	8002c14 <HAL_RCC_GetPCLK2Freq>
 8003074:	4602      	mov	r2, r0
 8003076:	4613      	mov	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	009a      	lsls	r2, r3, #2
 800307e:	441a      	add	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	fbb2 f5f3 	udiv	r5, r2, r3
 800308a:	f7ff fdc3 	bl	8002c14 <HAL_RCC_GetPCLK2Freq>
 800308e:	4602      	mov	r2, r0
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	009a      	lsls	r2, r3, #2
 8003098:	441a      	add	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a4:	4a93      	ldr	r2, [pc, #588]	; (80032f4 <UART_SetConfig+0x32c>)
 80030a6:	fba2 2303 	umull	r2, r3, r2, r3
 80030aa:	095b      	lsrs	r3, r3, #5
 80030ac:	2264      	movs	r2, #100	; 0x64
 80030ae:	fb02 f303 	mul.w	r3, r2, r3
 80030b2:	1aeb      	subs	r3, r5, r3
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	3332      	adds	r3, #50	; 0x32
 80030b8:	4a8e      	ldr	r2, [pc, #568]	; (80032f4 <UART_SetConfig+0x32c>)
 80030ba:	fba2 2303 	umull	r2, r3, r2, r3
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030c6:	441c      	add	r4, r3
 80030c8:	f7ff fda4 	bl	8002c14 <HAL_RCC_GetPCLK2Freq>
 80030cc:	4602      	mov	r2, r0
 80030ce:	4613      	mov	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	009a      	lsls	r2, r3, #2
 80030d6:	441a      	add	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	fbb2 f5f3 	udiv	r5, r2, r3
 80030e2:	f7ff fd97 	bl	8002c14 <HAL_RCC_GetPCLK2Freq>
 80030e6:	4602      	mov	r2, r0
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	009a      	lsls	r2, r3, #2
 80030f0:	441a      	add	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fc:	4a7d      	ldr	r2, [pc, #500]	; (80032f4 <UART_SetConfig+0x32c>)
 80030fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003102:	095b      	lsrs	r3, r3, #5
 8003104:	2264      	movs	r2, #100	; 0x64
 8003106:	fb02 f303 	mul.w	r3, r2, r3
 800310a:	1aeb      	subs	r3, r5, r3
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	3332      	adds	r3, #50	; 0x32
 8003110:	4a78      	ldr	r2, [pc, #480]	; (80032f4 <UART_SetConfig+0x32c>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	095b      	lsrs	r3, r3, #5
 8003118:	f003 0207 	and.w	r2, r3, #7
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4422      	add	r2, r4
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	e154      	b.n	80033d0 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003126:	f7ff fd61 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 800312a:	4602      	mov	r2, r0
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	009a      	lsls	r2, r3, #2
 8003134:	441a      	add	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003140:	4a6c      	ldr	r2, [pc, #432]	; (80032f4 <UART_SetConfig+0x32c>)
 8003142:	fba2 2303 	umull	r2, r3, r2, r3
 8003146:	095b      	lsrs	r3, r3, #5
 8003148:	011c      	lsls	r4, r3, #4
 800314a:	f7ff fd4f 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 800314e:	4602      	mov	r2, r0
 8003150:	4613      	mov	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	009a      	lsls	r2, r3, #2
 8003158:	441a      	add	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	fbb2 f5f3 	udiv	r5, r2, r3
 8003164:	f7ff fd42 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 8003168:	4602      	mov	r2, r0
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	009a      	lsls	r2, r3, #2
 8003172:	441a      	add	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	fbb2 f3f3 	udiv	r3, r2, r3
 800317e:	4a5d      	ldr	r2, [pc, #372]	; (80032f4 <UART_SetConfig+0x32c>)
 8003180:	fba2 2303 	umull	r2, r3, r2, r3
 8003184:	095b      	lsrs	r3, r3, #5
 8003186:	2264      	movs	r2, #100	; 0x64
 8003188:	fb02 f303 	mul.w	r3, r2, r3
 800318c:	1aeb      	subs	r3, r5, r3
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	3332      	adds	r3, #50	; 0x32
 8003192:	4a58      	ldr	r2, [pc, #352]	; (80032f4 <UART_SetConfig+0x32c>)
 8003194:	fba2 2303 	umull	r2, r3, r2, r3
 8003198:	095b      	lsrs	r3, r3, #5
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031a0:	441c      	add	r4, r3
 80031a2:	f7ff fd23 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 80031a6:	4602      	mov	r2, r0
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	009a      	lsls	r2, r3, #2
 80031b0:	441a      	add	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	fbb2 f5f3 	udiv	r5, r2, r3
 80031bc:	f7ff fd16 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 80031c0:	4602      	mov	r2, r0
 80031c2:	4613      	mov	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	009a      	lsls	r2, r3, #2
 80031ca:	441a      	add	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d6:	4a47      	ldr	r2, [pc, #284]	; (80032f4 <UART_SetConfig+0x32c>)
 80031d8:	fba2 2303 	umull	r2, r3, r2, r3
 80031dc:	095b      	lsrs	r3, r3, #5
 80031de:	2264      	movs	r2, #100	; 0x64
 80031e0:	fb02 f303 	mul.w	r3, r2, r3
 80031e4:	1aeb      	subs	r3, r5, r3
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	3332      	adds	r3, #50	; 0x32
 80031ea:	4a42      	ldr	r2, [pc, #264]	; (80032f4 <UART_SetConfig+0x32c>)
 80031ec:	fba2 2303 	umull	r2, r3, r2, r3
 80031f0:	095b      	lsrs	r3, r3, #5
 80031f2:	f003 0207 	and.w	r2, r3, #7
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4422      	add	r2, r4
 80031fc:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80031fe:	e0e7      	b.n	80033d0 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a39      	ldr	r2, [pc, #228]	; (80032ec <UART_SetConfig+0x324>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d004      	beq.n	8003214 <UART_SetConfig+0x24c>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a38      	ldr	r2, [pc, #224]	; (80032f0 <UART_SetConfig+0x328>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d171      	bne.n	80032f8 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003214:	f7ff fcfe 	bl	8002c14 <HAL_RCC_GetPCLK2Freq>
 8003218:	4602      	mov	r2, r0
 800321a:	4613      	mov	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4413      	add	r3, r2
 8003220:	009a      	lsls	r2, r3, #2
 8003222:	441a      	add	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	fbb2 f3f3 	udiv	r3, r2, r3
 800322e:	4a31      	ldr	r2, [pc, #196]	; (80032f4 <UART_SetConfig+0x32c>)
 8003230:	fba2 2303 	umull	r2, r3, r2, r3
 8003234:	095b      	lsrs	r3, r3, #5
 8003236:	011c      	lsls	r4, r3, #4
 8003238:	f7ff fcec 	bl	8002c14 <HAL_RCC_GetPCLK2Freq>
 800323c:	4602      	mov	r2, r0
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	009a      	lsls	r2, r3, #2
 8003246:	441a      	add	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	fbb2 f5f3 	udiv	r5, r2, r3
 8003252:	f7ff fcdf 	bl	8002c14 <HAL_RCC_GetPCLK2Freq>
 8003256:	4602      	mov	r2, r0
 8003258:	4613      	mov	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	009a      	lsls	r2, r3, #2
 8003260:	441a      	add	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	fbb2 f3f3 	udiv	r3, r2, r3
 800326c:	4a21      	ldr	r2, [pc, #132]	; (80032f4 <UART_SetConfig+0x32c>)
 800326e:	fba2 2303 	umull	r2, r3, r2, r3
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	2264      	movs	r2, #100	; 0x64
 8003276:	fb02 f303 	mul.w	r3, r2, r3
 800327a:	1aeb      	subs	r3, r5, r3
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	3332      	adds	r3, #50	; 0x32
 8003280:	4a1c      	ldr	r2, [pc, #112]	; (80032f4 <UART_SetConfig+0x32c>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800328c:	441c      	add	r4, r3
 800328e:	f7ff fcc1 	bl	8002c14 <HAL_RCC_GetPCLK2Freq>
 8003292:	4602      	mov	r2, r0
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	009a      	lsls	r2, r3, #2
 800329c:	441a      	add	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	fbb2 f5f3 	udiv	r5, r2, r3
 80032a8:	f7ff fcb4 	bl	8002c14 <HAL_RCC_GetPCLK2Freq>
 80032ac:	4602      	mov	r2, r0
 80032ae:	4613      	mov	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	009a      	lsls	r2, r3, #2
 80032b6:	441a      	add	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c2:	4a0c      	ldr	r2, [pc, #48]	; (80032f4 <UART_SetConfig+0x32c>)
 80032c4:	fba2 2303 	umull	r2, r3, r2, r3
 80032c8:	095b      	lsrs	r3, r3, #5
 80032ca:	2264      	movs	r2, #100	; 0x64
 80032cc:	fb02 f303 	mul.w	r3, r2, r3
 80032d0:	1aeb      	subs	r3, r5, r3
 80032d2:	011b      	lsls	r3, r3, #4
 80032d4:	3332      	adds	r3, #50	; 0x32
 80032d6:	4a07      	ldr	r2, [pc, #28]	; (80032f4 <UART_SetConfig+0x32c>)
 80032d8:	fba2 2303 	umull	r2, r3, r2, r3
 80032dc:	095b      	lsrs	r3, r3, #5
 80032de:	f003 020f 	and.w	r2, r3, #15
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4422      	add	r2, r4
 80032e8:	609a      	str	r2, [r3, #8]
 80032ea:	e071      	b.n	80033d0 <UART_SetConfig+0x408>
 80032ec:	40011000 	.word	0x40011000
 80032f0:	40011400 	.word	0x40011400
 80032f4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80032f8:	f7ff fc78 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 80032fc:	4602      	mov	r2, r0
 80032fe:	4613      	mov	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	009a      	lsls	r2, r3, #2
 8003306:	441a      	add	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003312:	4a31      	ldr	r2, [pc, #196]	; (80033d8 <UART_SetConfig+0x410>)
 8003314:	fba2 2303 	umull	r2, r3, r2, r3
 8003318:	095b      	lsrs	r3, r3, #5
 800331a:	011c      	lsls	r4, r3, #4
 800331c:	f7ff fc66 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 8003320:	4602      	mov	r2, r0
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	009a      	lsls	r2, r3, #2
 800332a:	441a      	add	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	fbb2 f5f3 	udiv	r5, r2, r3
 8003336:	f7ff fc59 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 800333a:	4602      	mov	r2, r0
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	009a      	lsls	r2, r3, #2
 8003344:	441a      	add	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003350:	4a21      	ldr	r2, [pc, #132]	; (80033d8 <UART_SetConfig+0x410>)
 8003352:	fba2 2303 	umull	r2, r3, r2, r3
 8003356:	095b      	lsrs	r3, r3, #5
 8003358:	2264      	movs	r2, #100	; 0x64
 800335a:	fb02 f303 	mul.w	r3, r2, r3
 800335e:	1aeb      	subs	r3, r5, r3
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	3332      	adds	r3, #50	; 0x32
 8003364:	4a1c      	ldr	r2, [pc, #112]	; (80033d8 <UART_SetConfig+0x410>)
 8003366:	fba2 2303 	umull	r2, r3, r2, r3
 800336a:	095b      	lsrs	r3, r3, #5
 800336c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003370:	441c      	add	r4, r3
 8003372:	f7ff fc3b 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 8003376:	4602      	mov	r2, r0
 8003378:	4613      	mov	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	009a      	lsls	r2, r3, #2
 8003380:	441a      	add	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	fbb2 f5f3 	udiv	r5, r2, r3
 800338c:	f7ff fc2e 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 8003390:	4602      	mov	r2, r0
 8003392:	4613      	mov	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	009a      	lsls	r2, r3, #2
 800339a:	441a      	add	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a6:	4a0c      	ldr	r2, [pc, #48]	; (80033d8 <UART_SetConfig+0x410>)
 80033a8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ac:	095b      	lsrs	r3, r3, #5
 80033ae:	2264      	movs	r2, #100	; 0x64
 80033b0:	fb02 f303 	mul.w	r3, r2, r3
 80033b4:	1aeb      	subs	r3, r5, r3
 80033b6:	011b      	lsls	r3, r3, #4
 80033b8:	3332      	adds	r3, #50	; 0x32
 80033ba:	4a07      	ldr	r2, [pc, #28]	; (80033d8 <UART_SetConfig+0x410>)
 80033bc:	fba2 2303 	umull	r2, r3, r2, r3
 80033c0:	095b      	lsrs	r3, r3, #5
 80033c2:	f003 020f 	and.w	r2, r3, #15
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4422      	add	r2, r4
 80033cc:	609a      	str	r2, [r3, #8]
}
 80033ce:	e7ff      	b.n	80033d0 <UART_SetConfig+0x408>
 80033d0:	bf00      	nop
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bdb0      	pop	{r4, r5, r7, pc}
 80033d8:	51eb851f 	.word	0x51eb851f

080033dc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80033e0:	f000 fe96 	bl	8004110 <vTaskStartScheduler>
  
  return osOK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	bd80      	pop	{r7, pc}

080033ea <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f103 0208 	add.w	r2, r3, #8
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003402:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f103 0208 	add.w	r2, r3, #8
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f103 0208 	add.w	r2, r3, #8
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	1c5a      	adds	r2, r3, #1
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	601a      	str	r2, [r3, #0]
}
 8003480:	bf00      	nop
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a2:	d103      	bne.n	80034ac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	e00c      	b.n	80034c6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3308      	adds	r3, #8
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	e002      	b.n	80034ba <vListInsert+0x2e>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d2f6      	bcs.n	80034b4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	1c5a      	adds	r2, r3, #1
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	601a      	str	r2, [r3, #0]
}
 80034f2:	bf00      	nop
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034fe:	b480      	push	{r7}
 8003500:	b085      	sub	sp, #20
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6892      	ldr	r2, [r2, #8]
 8003514:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6852      	ldr	r2, [r2, #4]
 800351e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	429a      	cmp	r2, r3
 8003528:	d103      	bne.n	8003532 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	1e5a      	subs	r2, r3, #1
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
}
 8003546:	4618      	mov	r0, r3
 8003548:	3714      	adds	r7, #20
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
	...

08003554 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d109      	bne.n	800357c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356c:	f383 8811 	msr	BASEPRI, r3
 8003570:	f3bf 8f6f 	isb	sy
 8003574:	f3bf 8f4f 	dsb	sy
 8003578:	60bb      	str	r3, [r7, #8]
 800357a:	e7fe      	b.n	800357a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800357c:	f001 fc06 	bl	8004d8c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003588:	68f9      	ldr	r1, [r7, #12]
 800358a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800358c:	fb01 f303 	mul.w	r3, r1, r3
 8003590:	441a      	add	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ac:	3b01      	subs	r3, #1
 80035ae:	68f9      	ldr	r1, [r7, #12]
 80035b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80035b2:	fb01 f303 	mul.w	r3, r1, r3
 80035b6:	441a      	add	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	22ff      	movs	r2, #255	; 0xff
 80035c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	22ff      	movs	r2, #255	; 0xff
 80035c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d114      	bne.n	80035fc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d01a      	beq.n	8003610 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	3310      	adds	r3, #16
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 ffe8 	bl	80045b4 <xTaskRemoveFromEventList>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d012      	beq.n	8003610 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80035ea:	4b0d      	ldr	r3, [pc, #52]	; (8003620 <xQueueGenericReset+0xcc>)
 80035ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	f3bf 8f4f 	dsb	sy
 80035f6:	f3bf 8f6f 	isb	sy
 80035fa:	e009      	b.n	8003610 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	3310      	adds	r3, #16
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff fef2 	bl	80033ea <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	3324      	adds	r3, #36	; 0x24
 800360a:	4618      	mov	r0, r3
 800360c:	f7ff feed 	bl	80033ea <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003610:	f001 fbea 	bl	8004de8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003614:	2301      	movs	r3, #1
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	e000ed04 	.word	0xe000ed04

08003624 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08a      	sub	sp, #40	; 0x28
 8003628:	af02      	add	r7, sp, #8
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	4613      	mov	r3, r2
 8003630:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d109      	bne.n	800364c <xQueueGenericCreate+0x28>
 8003638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363c:	f383 8811 	msr	BASEPRI, r3
 8003640:	f3bf 8f6f 	isb	sy
 8003644:	f3bf 8f4f 	dsb	sy
 8003648:	613b      	str	r3, [r7, #16]
 800364a:	e7fe      	b.n	800364a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d102      	bne.n	8003658 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003652:	2300      	movs	r3, #0
 8003654:	61fb      	str	r3, [r7, #28]
 8003656:	e004      	b.n	8003662 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	fb02 f303 	mul.w	r3, r2, r3
 8003660:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	3348      	adds	r3, #72	; 0x48
 8003666:	4618      	mov	r0, r3
 8003668:	f001 fc6c 	bl	8004f44 <pvPortMalloc>
 800366c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00f      	beq.n	8003694 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	3348      	adds	r3, #72	; 0x48
 8003678:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003682:	79fa      	ldrb	r2, [r7, #7]
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	4613      	mov	r3, r2
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	68b9      	ldr	r1, [r7, #8]
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 f805 	bl	800369e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003694:	69bb      	ldr	r3, [r7, #24]
	}
 8003696:	4618      	mov	r0, r3
 8003698:	3720      	adds	r7, #32
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b084      	sub	sp, #16
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	60f8      	str	r0, [r7, #12]
 80036a6:	60b9      	str	r1, [r7, #8]
 80036a8:	607a      	str	r2, [r7, #4]
 80036aa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d103      	bne.n	80036ba <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	e002      	b.n	80036c0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80036cc:	2101      	movs	r1, #1
 80036ce:	69b8      	ldr	r0, [r7, #24]
 80036d0:	f7ff ff40 	bl	8003554 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80036d4:	bf00      	nop
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08e      	sub	sp, #56	; 0x38
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
 80036e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80036ea:	2300      	movs	r3, #0
 80036ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80036f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d109      	bne.n	800370c <xQueueGenericSend+0x30>
 80036f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fc:	f383 8811 	msr	BASEPRI, r3
 8003700:	f3bf 8f6f 	isb	sy
 8003704:	f3bf 8f4f 	dsb	sy
 8003708:	62bb      	str	r3, [r7, #40]	; 0x28
 800370a:	e7fe      	b.n	800370a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d103      	bne.n	800371a <xQueueGenericSend+0x3e>
 8003712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <xQueueGenericSend+0x42>
 800371a:	2301      	movs	r3, #1
 800371c:	e000      	b.n	8003720 <xQueueGenericSend+0x44>
 800371e:	2300      	movs	r3, #0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d109      	bne.n	8003738 <xQueueGenericSend+0x5c>
 8003724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003728:	f383 8811 	msr	BASEPRI, r3
 800372c:	f3bf 8f6f 	isb	sy
 8003730:	f3bf 8f4f 	dsb	sy
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
 8003736:	e7fe      	b.n	8003736 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d103      	bne.n	8003746 <xQueueGenericSend+0x6a>
 800373e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <xQueueGenericSend+0x6e>
 8003746:	2301      	movs	r3, #1
 8003748:	e000      	b.n	800374c <xQueueGenericSend+0x70>
 800374a:	2300      	movs	r3, #0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d109      	bne.n	8003764 <xQueueGenericSend+0x88>
 8003750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003754:	f383 8811 	msr	BASEPRI, r3
 8003758:	f3bf 8f6f 	isb	sy
 800375c:	f3bf 8f4f 	dsb	sy
 8003760:	623b      	str	r3, [r7, #32]
 8003762:	e7fe      	b.n	8003762 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003764:	f001 f8e2 	bl	800492c <xTaskGetSchedulerState>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d102      	bne.n	8003774 <xQueueGenericSend+0x98>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <xQueueGenericSend+0x9c>
 8003774:	2301      	movs	r3, #1
 8003776:	e000      	b.n	800377a <xQueueGenericSend+0x9e>
 8003778:	2300      	movs	r3, #0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d109      	bne.n	8003792 <xQueueGenericSend+0xb6>
 800377e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003782:	f383 8811 	msr	BASEPRI, r3
 8003786:	f3bf 8f6f 	isb	sy
 800378a:	f3bf 8f4f 	dsb	sy
 800378e:	61fb      	str	r3, [r7, #28]
 8003790:	e7fe      	b.n	8003790 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003792:	f001 fafb 	bl	8004d8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003798:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800379a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379e:	429a      	cmp	r2, r3
 80037a0:	d302      	bcc.n	80037a8 <xQueueGenericSend+0xcc>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d129      	bne.n	80037fc <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	68b9      	ldr	r1, [r7, #8]
 80037ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037ae:	f000 f96b 	bl	8003a88 <prvCopyDataToQueue>
 80037b2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d010      	beq.n	80037de <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037be:	3324      	adds	r3, #36	; 0x24
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 fef7 	bl	80045b4 <xTaskRemoveFromEventList>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d013      	beq.n	80037f4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80037cc:	4b3f      	ldr	r3, [pc, #252]	; (80038cc <xQueueGenericSend+0x1f0>)
 80037ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	f3bf 8f4f 	dsb	sy
 80037d8:	f3bf 8f6f 	isb	sy
 80037dc:	e00a      	b.n	80037f4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80037de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d007      	beq.n	80037f4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80037e4:	4b39      	ldr	r3, [pc, #228]	; (80038cc <xQueueGenericSend+0x1f0>)
 80037e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	f3bf 8f4f 	dsb	sy
 80037f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80037f4:	f001 faf8 	bl	8004de8 <vPortExitCritical>
				return pdPASS;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e063      	b.n	80038c4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d103      	bne.n	800380a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003802:	f001 faf1 	bl	8004de8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003806:	2300      	movs	r3, #0
 8003808:	e05c      	b.n	80038c4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800380a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800380c:	2b00      	cmp	r3, #0
 800380e:	d106      	bne.n	800381e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003810:	f107 0314 	add.w	r3, r7, #20
 8003814:	4618      	mov	r0, r3
 8003816:	f000 ff2f 	bl	8004678 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800381a:	2301      	movs	r3, #1
 800381c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800381e:	f001 fae3 	bl	8004de8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003822:	f000 fcd3 	bl	80041cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003826:	f001 fab1 	bl	8004d8c <vPortEnterCritical>
 800382a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003830:	b25b      	sxtb	r3, r3
 8003832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003836:	d103      	bne.n	8003840 <xQueueGenericSend+0x164>
 8003838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003842:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003846:	b25b      	sxtb	r3, r3
 8003848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384c:	d103      	bne.n	8003856 <xQueueGenericSend+0x17a>
 800384e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003856:	f001 fac7 	bl	8004de8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800385a:	1d3a      	adds	r2, r7, #4
 800385c:	f107 0314 	add.w	r3, r7, #20
 8003860:	4611      	mov	r1, r2
 8003862:	4618      	mov	r0, r3
 8003864:	f000 ff1e 	bl	80046a4 <xTaskCheckForTimeOut>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d124      	bne.n	80038b8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800386e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003870:	f000 fa02 	bl	8003c78 <prvIsQueueFull>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d018      	beq.n	80038ac <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800387a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387c:	3310      	adds	r3, #16
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	4611      	mov	r1, r2
 8003882:	4618      	mov	r0, r3
 8003884:	f000 fe72 	bl	800456c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003888:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800388a:	f000 f98d 	bl	8003ba8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800388e:	f000 fcab 	bl	80041e8 <xTaskResumeAll>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	f47f af7c 	bne.w	8003792 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800389a:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <xQueueGenericSend+0x1f0>)
 800389c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	f3bf 8f4f 	dsb	sy
 80038a6:	f3bf 8f6f 	isb	sy
 80038aa:	e772      	b.n	8003792 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80038ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038ae:	f000 f97b 	bl	8003ba8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038b2:	f000 fc99 	bl	80041e8 <xTaskResumeAll>
 80038b6:	e76c      	b.n	8003792 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80038b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038ba:	f000 f975 	bl	8003ba8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038be:	f000 fc93 	bl	80041e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80038c2:	2300      	movs	r3, #0
		}
	}
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3738      	adds	r7, #56	; 0x38
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	e000ed04 	.word	0xe000ed04

080038d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08c      	sub	sp, #48	; 0x30
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80038dc:	2300      	movs	r3, #0
 80038de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80038e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d109      	bne.n	80038fe <xQueueReceive+0x2e>
 80038ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ee:	f383 8811 	msr	BASEPRI, r3
 80038f2:	f3bf 8f6f 	isb	sy
 80038f6:	f3bf 8f4f 	dsb	sy
 80038fa:	623b      	str	r3, [r7, #32]
 80038fc:	e7fe      	b.n	80038fc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d103      	bne.n	800390c <xQueueReceive+0x3c>
 8003904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <xQueueReceive+0x40>
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <xQueueReceive+0x42>
 8003910:	2300      	movs	r3, #0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d109      	bne.n	800392a <xQueueReceive+0x5a>
 8003916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391a:	f383 8811 	msr	BASEPRI, r3
 800391e:	f3bf 8f6f 	isb	sy
 8003922:	f3bf 8f4f 	dsb	sy
 8003926:	61fb      	str	r3, [r7, #28]
 8003928:	e7fe      	b.n	8003928 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800392a:	f000 ffff 	bl	800492c <xTaskGetSchedulerState>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d102      	bne.n	800393a <xQueueReceive+0x6a>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <xQueueReceive+0x6e>
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <xQueueReceive+0x70>
 800393e:	2300      	movs	r3, #0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d109      	bne.n	8003958 <xQueueReceive+0x88>
 8003944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003948:	f383 8811 	msr	BASEPRI, r3
 800394c:	f3bf 8f6f 	isb	sy
 8003950:	f3bf 8f4f 	dsb	sy
 8003954:	61bb      	str	r3, [r7, #24]
 8003956:	e7fe      	b.n	8003956 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003958:	f001 fa18 	bl	8004d8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800395c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003960:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	2b00      	cmp	r3, #0
 8003966:	d01f      	beq.n	80039a8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003968:	68b9      	ldr	r1, [r7, #8]
 800396a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800396c:	f000 f8f6 	bl	8003b5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	1e5a      	subs	r2, r3, #1
 8003974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003976:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00f      	beq.n	80039a0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003982:	3310      	adds	r3, #16
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fe15 	bl	80045b4 <xTaskRemoveFromEventList>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d007      	beq.n	80039a0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003990:	4b3c      	ldr	r3, [pc, #240]	; (8003a84 <xQueueReceive+0x1b4>)
 8003992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	f3bf 8f4f 	dsb	sy
 800399c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80039a0:	f001 fa22 	bl	8004de8 <vPortExitCritical>
				return pdPASS;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e069      	b.n	8003a7c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d103      	bne.n	80039b6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039ae:	f001 fa1b 	bl	8004de8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80039b2:	2300      	movs	r3, #0
 80039b4:	e062      	b.n	8003a7c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d106      	bne.n	80039ca <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039bc:	f107 0310 	add.w	r3, r7, #16
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fe59 	bl	8004678 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039c6:	2301      	movs	r3, #1
 80039c8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039ca:	f001 fa0d 	bl	8004de8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039ce:	f000 fbfd 	bl	80041cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039d2:	f001 f9db 	bl	8004d8c <vPortEnterCritical>
 80039d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039dc:	b25b      	sxtb	r3, r3
 80039de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e2:	d103      	bne.n	80039ec <xQueueReceive+0x11c>
 80039e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039f2:	b25b      	sxtb	r3, r3
 80039f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f8:	d103      	bne.n	8003a02 <xQueueReceive+0x132>
 80039fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a02:	f001 f9f1 	bl	8004de8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a06:	1d3a      	adds	r2, r7, #4
 8003a08:	f107 0310 	add.w	r3, r7, #16
 8003a0c:	4611      	mov	r1, r2
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 fe48 	bl	80046a4 <xTaskCheckForTimeOut>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d123      	bne.n	8003a62 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a1c:	f000 f916 	bl	8003c4c <prvIsQueueEmpty>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d017      	beq.n	8003a56 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a28:	3324      	adds	r3, #36	; 0x24
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	4611      	mov	r1, r2
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fd9c 	bl	800456c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a36:	f000 f8b7 	bl	8003ba8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a3a:	f000 fbd5 	bl	80041e8 <xTaskResumeAll>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d189      	bne.n	8003958 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003a44:	4b0f      	ldr	r3, [pc, #60]	; (8003a84 <xQueueReceive+0x1b4>)
 8003a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	f3bf 8f6f 	isb	sy
 8003a54:	e780      	b.n	8003958 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003a56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a58:	f000 f8a6 	bl	8003ba8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a5c:	f000 fbc4 	bl	80041e8 <xTaskResumeAll>
 8003a60:	e77a      	b.n	8003958 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003a62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a64:	f000 f8a0 	bl	8003ba8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a68:	f000 fbbe 	bl	80041e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a6e:	f000 f8ed 	bl	8003c4c <prvIsQueueEmpty>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f43f af6f 	beq.w	8003958 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003a7a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3730      	adds	r7, #48	; 0x30
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	e000ed04 	.word	0xe000ed04

08003a88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10d      	bne.n	8003ac2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d14d      	bne.n	8003b4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 ff58 	bl	8004968 <xTaskPriorityDisinherit>
 8003ab8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	605a      	str	r2, [r3, #4]
 8003ac0:	e043      	b.n	8003b4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d119      	bne.n	8003afc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6898      	ldr	r0, [r3, #8]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	68b9      	ldr	r1, [r7, #8]
 8003ad4:	f003 fa1e 	bl	8006f14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae0:	441a      	add	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d32b      	bcc.n	8003b4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	609a      	str	r2, [r3, #8]
 8003afa:	e026      	b.n	8003b4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	68d8      	ldr	r0, [r3, #12]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b04:	461a      	mov	r2, r3
 8003b06:	68b9      	ldr	r1, [r7, #8]
 8003b08:	f003 fa04 	bl	8006f14 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	425b      	negs	r3, r3
 8003b16:	441a      	add	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d207      	bcs.n	8003b38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	425b      	negs	r3, r3
 8003b32:	441a      	add	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d105      	bne.n	8003b4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	3b01      	subs	r3, #1
 8003b48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003b52:	697b      	ldr	r3, [r7, #20]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d018      	beq.n	8003ba0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	441a      	add	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68da      	ldr	r2, [r3, #12]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d303      	bcc.n	8003b90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68d9      	ldr	r1, [r3, #12]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	461a      	mov	r2, r3
 8003b9a:	6838      	ldr	r0, [r7, #0]
 8003b9c:	f003 f9ba 	bl	8006f14 <memcpy>
	}
}
 8003ba0:	bf00      	nop
 8003ba2:	3708      	adds	r7, #8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003bb0:	f001 f8ec 	bl	8004d8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003bbc:	e011      	b.n	8003be2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d012      	beq.n	8003bec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	3324      	adds	r3, #36	; 0x24
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 fcf2 	bl	80045b4 <xTaskRemoveFromEventList>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003bd6:	f000 fdc5 	bl	8004764 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003bda:	7bfb      	ldrb	r3, [r7, #15]
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	dce9      	bgt.n	8003bbe <prvUnlockQueue+0x16>
 8003bea:	e000      	b.n	8003bee <prvUnlockQueue+0x46>
					break;
 8003bec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	22ff      	movs	r2, #255	; 0xff
 8003bf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003bf6:	f001 f8f7 	bl	8004de8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003bfa:	f001 f8c7 	bl	8004d8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c06:	e011      	b.n	8003c2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d012      	beq.n	8003c36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3310      	adds	r3, #16
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 fccd 	bl	80045b4 <xTaskRemoveFromEventList>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003c20:	f000 fda0 	bl	8004764 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003c24:	7bbb      	ldrb	r3, [r7, #14]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	dce9      	bgt.n	8003c08 <prvUnlockQueue+0x60>
 8003c34:	e000      	b.n	8003c38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003c36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	22ff      	movs	r2, #255	; 0xff
 8003c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003c40:	f001 f8d2 	bl	8004de8 <vPortExitCritical>
}
 8003c44:	bf00      	nop
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c54:	f001 f89a 	bl	8004d8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d102      	bne.n	8003c66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003c60:	2301      	movs	r3, #1
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	e001      	b.n	8003c6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003c66:	2300      	movs	r3, #0
 8003c68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c6a:	f001 f8bd 	bl	8004de8 <vPortExitCritical>

	return xReturn;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c80:	f001 f884 	bl	8004d8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d102      	bne.n	8003c96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003c90:	2301      	movs	r3, #1
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	e001      	b.n	8003c9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c9a:	f001 f8a5 	bl	8004de8 <vPortExitCritical>

	return xReturn;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b08e      	sub	sp, #56	; 0x38
 8003cac:	af04      	add	r7, sp, #16
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
 8003cb4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d109      	bne.n	8003cd0 <xTaskCreateStatic+0x28>
 8003cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc0:	f383 8811 	msr	BASEPRI, r3
 8003cc4:	f3bf 8f6f 	isb	sy
 8003cc8:	f3bf 8f4f 	dsb	sy
 8003ccc:	623b      	str	r3, [r7, #32]
 8003cce:	e7fe      	b.n	8003cce <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d109      	bne.n	8003cea <xTaskCreateStatic+0x42>
 8003cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cda:	f383 8811 	msr	BASEPRI, r3
 8003cde:	f3bf 8f6f 	isb	sy
 8003ce2:	f3bf 8f4f 	dsb	sy
 8003ce6:	61fb      	str	r3, [r7, #28]
 8003ce8:	e7fe      	b.n	8003ce8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003cea:	2354      	movs	r3, #84	; 0x54
 8003cec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	2b54      	cmp	r3, #84	; 0x54
 8003cf2:	d009      	beq.n	8003d08 <xTaskCreateStatic+0x60>
 8003cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf8:	f383 8811 	msr	BASEPRI, r3
 8003cfc:	f3bf 8f6f 	isb	sy
 8003d00:	f3bf 8f4f 	dsb	sy
 8003d04:	61bb      	str	r3, [r7, #24]
 8003d06:	e7fe      	b.n	8003d06 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d01e      	beq.n	8003d4c <xTaskCreateStatic+0xa4>
 8003d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d01b      	beq.n	8003d4c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d16:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d1c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	2202      	movs	r2, #2
 8003d22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003d26:	2300      	movs	r3, #0
 8003d28:	9303      	str	r3, [sp, #12]
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	9302      	str	r3, [sp, #8]
 8003d2e:	f107 0314 	add.w	r3, r7, #20
 8003d32:	9301      	str	r3, [sp, #4]
 8003d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	68b9      	ldr	r1, [r7, #8]
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 f850 	bl	8003de4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d46:	f000 f8cb 	bl	8003ee0 <prvAddNewTaskToReadyList>
 8003d4a:	e001      	b.n	8003d50 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003d50:	697b      	ldr	r3, [r7, #20]
	}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3728      	adds	r7, #40	; 0x28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b08c      	sub	sp, #48	; 0x30
 8003d5e:	af04      	add	r7, sp, #16
 8003d60:	60f8      	str	r0, [r7, #12]
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	603b      	str	r3, [r7, #0]
 8003d66:	4613      	mov	r3, r2
 8003d68:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d6a:	88fb      	ldrh	r3, [r7, #6]
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f001 f8e8 	bl	8004f44 <pvPortMalloc>
 8003d74:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00e      	beq.n	8003d9a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003d7c:	2054      	movs	r0, #84	; 0x54
 8003d7e:	f001 f8e1 	bl	8004f44 <pvPortMalloc>
 8003d82:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	631a      	str	r2, [r3, #48]	; 0x30
 8003d90:	e005      	b.n	8003d9e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003d92:	6978      	ldr	r0, [r7, #20]
 8003d94:	f001 f998 	bl	80050c8 <vPortFree>
 8003d98:	e001      	b.n	8003d9e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d017      	beq.n	8003dd4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003dac:	88fa      	ldrh	r2, [r7, #6]
 8003dae:	2300      	movs	r3, #0
 8003db0:	9303      	str	r3, [sp, #12]
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	9302      	str	r3, [sp, #8]
 8003db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db8:	9301      	str	r3, [sp, #4]
 8003dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	68b9      	ldr	r1, [r7, #8]
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 f80e 	bl	8003de4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003dc8:	69f8      	ldr	r0, [r7, #28]
 8003dca:	f000 f889 	bl	8003ee0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	61bb      	str	r3, [r7, #24]
 8003dd2:	e002      	b.n	8003dda <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003dda:	69bb      	ldr	r3, [r7, #24]
	}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3720      	adds	r7, #32
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b088      	sub	sp, #32
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
 8003df0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	f023 0307 	bic.w	r3, r3, #7
 8003e0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d009      	beq.n	8003e2a <prvInitialiseNewTask+0x46>
 8003e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1a:	f383 8811 	msr	BASEPRI, r3
 8003e1e:	f3bf 8f6f 	isb	sy
 8003e22:	f3bf 8f4f 	dsb	sy
 8003e26:	617b      	str	r3, [r7, #20]
 8003e28:	e7fe      	b.n	8003e28 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61fb      	str	r3, [r7, #28]
 8003e2e:	e012      	b.n	8003e56 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	4413      	add	r3, r2
 8003e36:	7819      	ldrb	r1, [r3, #0]
 8003e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	3334      	adds	r3, #52	; 0x34
 8003e40:	460a      	mov	r2, r1
 8003e42:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	4413      	add	r3, r2
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d006      	beq.n	8003e5e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	3301      	adds	r3, #1
 8003e54:	61fb      	str	r3, [r7, #28]
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	2b0f      	cmp	r3, #15
 8003e5a:	d9e9      	bls.n	8003e30 <prvInitialiseNewTask+0x4c>
 8003e5c:	e000      	b.n	8003e60 <prvInitialiseNewTask+0x7c>
		{
			break;
 8003e5e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6a:	2b06      	cmp	r3, #6
 8003e6c:	d901      	bls.n	8003e72 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e6e:	2306      	movs	r3, #6
 8003e70:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e76:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e7c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e80:	2200      	movs	r2, #0
 8003e82:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e86:	3304      	adds	r3, #4
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff face 	bl	800342a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e90:	3318      	adds	r3, #24
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7ff fac9 	bl	800342a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e9c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea0:	f1c3 0207 	rsb	r2, r3, #7
 8003ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eac:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	68f9      	ldr	r1, [r7, #12]
 8003ec0:	69b8      	ldr	r0, [r7, #24]
 8003ec2:	f000 fe3b 	bl	8004b3c <pxPortInitialiseStack>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eca:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d002      	beq.n	8003ed8 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ed6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ed8:	bf00      	nop
 8003eda:	3720      	adds	r7, #32
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ee8:	f000 ff50 	bl	8004d8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003eec:	4b2a      	ldr	r3, [pc, #168]	; (8003f98 <prvAddNewTaskToReadyList+0xb8>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	4a29      	ldr	r2, [pc, #164]	; (8003f98 <prvAddNewTaskToReadyList+0xb8>)
 8003ef4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ef6:	4b29      	ldr	r3, [pc, #164]	; (8003f9c <prvAddNewTaskToReadyList+0xbc>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d109      	bne.n	8003f12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003efe:	4a27      	ldr	r2, [pc, #156]	; (8003f9c <prvAddNewTaskToReadyList+0xbc>)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f04:	4b24      	ldr	r3, [pc, #144]	; (8003f98 <prvAddNewTaskToReadyList+0xb8>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d110      	bne.n	8003f2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f0c:	f000 fc4e 	bl	80047ac <prvInitialiseTaskLists>
 8003f10:	e00d      	b.n	8003f2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f12:	4b23      	ldr	r3, [pc, #140]	; (8003fa0 <prvAddNewTaskToReadyList+0xc0>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d109      	bne.n	8003f2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f1a:	4b20      	ldr	r3, [pc, #128]	; (8003f9c <prvAddNewTaskToReadyList+0xbc>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d802      	bhi.n	8003f2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f28:	4a1c      	ldr	r2, [pc, #112]	; (8003f9c <prvAddNewTaskToReadyList+0xbc>)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f2e:	4b1d      	ldr	r3, [pc, #116]	; (8003fa4 <prvAddNewTaskToReadyList+0xc4>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3301      	adds	r3, #1
 8003f34:	4a1b      	ldr	r2, [pc, #108]	; (8003fa4 <prvAddNewTaskToReadyList+0xc4>)
 8003f36:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	409a      	lsls	r2, r3
 8003f40:	4b19      	ldr	r3, [pc, #100]	; (8003fa8 <prvAddNewTaskToReadyList+0xc8>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	4a18      	ldr	r2, [pc, #96]	; (8003fa8 <prvAddNewTaskToReadyList+0xc8>)
 8003f48:	6013      	str	r3, [r2, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f4e:	4613      	mov	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4a15      	ldr	r2, [pc, #84]	; (8003fac <prvAddNewTaskToReadyList+0xcc>)
 8003f58:	441a      	add	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4610      	mov	r0, r2
 8003f62:	f7ff fa6f 	bl	8003444 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f66:	f000 ff3f 	bl	8004de8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f6a:	4b0d      	ldr	r3, [pc, #52]	; (8003fa0 <prvAddNewTaskToReadyList+0xc0>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00e      	beq.n	8003f90 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f72:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <prvAddNewTaskToReadyList+0xbc>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d207      	bcs.n	8003f90 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f80:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <prvAddNewTaskToReadyList+0xd0>)
 8003f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	f3bf 8f4f 	dsb	sy
 8003f8c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f90:	bf00      	nop
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	20000190 	.word	0x20000190
 8003f9c:	20000090 	.word	0x20000090
 8003fa0:	2000019c 	.word	0x2000019c
 8003fa4:	200001ac 	.word	0x200001ac
 8003fa8:	20000198 	.word	0x20000198
 8003fac:	20000094 	.word	0x20000094
 8003fb0:	e000ed04 	.word	0xe000ed04

08003fb4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b08a      	sub	sp, #40	; 0x28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d109      	bne.n	8003fdc <vTaskDelayUntil+0x28>
 8003fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fcc:	f383 8811 	msr	BASEPRI, r3
 8003fd0:	f3bf 8f6f 	isb	sy
 8003fd4:	f3bf 8f4f 	dsb	sy
 8003fd8:	617b      	str	r3, [r7, #20]
 8003fda:	e7fe      	b.n	8003fda <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d109      	bne.n	8003ff6 <vTaskDelayUntil+0x42>
 8003fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe6:	f383 8811 	msr	BASEPRI, r3
 8003fea:	f3bf 8f6f 	isb	sy
 8003fee:	f3bf 8f4f 	dsb	sy
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	e7fe      	b.n	8003ff4 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8003ff6:	4b29      	ldr	r3, [pc, #164]	; (800409c <vTaskDelayUntil+0xe8>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d009      	beq.n	8004012 <vTaskDelayUntil+0x5e>
 8003ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004002:	f383 8811 	msr	BASEPRI, r3
 8004006:	f3bf 8f6f 	isb	sy
 800400a:	f3bf 8f4f 	dsb	sy
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	e7fe      	b.n	8004010 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8004012:	f000 f8db 	bl	80041cc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004016:	4b22      	ldr	r3, [pc, #136]	; (80040a0 <vTaskDelayUntil+0xec>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	4413      	add	r3, r2
 8004024:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6a3a      	ldr	r2, [r7, #32]
 800402c:	429a      	cmp	r2, r3
 800402e:	d20b      	bcs.n	8004048 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	69fa      	ldr	r2, [r7, #28]
 8004036:	429a      	cmp	r2, r3
 8004038:	d211      	bcs.n	800405e <vTaskDelayUntil+0xaa>
 800403a:	69fa      	ldr	r2, [r7, #28]
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	429a      	cmp	r2, r3
 8004040:	d90d      	bls.n	800405e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8004042:	2301      	movs	r3, #1
 8004044:	627b      	str	r3, [r7, #36]	; 0x24
 8004046:	e00a      	b.n	800405e <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	69fa      	ldr	r2, [r7, #28]
 800404e:	429a      	cmp	r2, r3
 8004050:	d303      	bcc.n	800405a <vTaskDelayUntil+0xa6>
 8004052:	69fa      	ldr	r2, [r7, #28]
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	429a      	cmp	r2, r3
 8004058:	d901      	bls.n	800405e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800405a:	2301      	movs	r3, #1
 800405c:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	69fa      	ldr	r2, [r7, #28]
 8004062:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	2b00      	cmp	r3, #0
 8004068:	d006      	beq.n	8004078 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800406a:	69fa      	ldr	r2, [r7, #28]
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2100      	movs	r1, #0
 8004072:	4618      	mov	r0, r3
 8004074:	f000 fcfc 	bl	8004a70 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004078:	f000 f8b6 	bl	80041e8 <xTaskResumeAll>
 800407c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d107      	bne.n	8004094 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8004084:	4b07      	ldr	r3, [pc, #28]	; (80040a4 <vTaskDelayUntil+0xf0>)
 8004086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004094:	bf00      	nop
 8004096:	3728      	adds	r7, #40	; 0x28
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	200001b8 	.word	0x200001b8
 80040a0:	20000194 	.word	0x20000194
 80040a4:	e000ed04 	.word	0xe000ed04

080040a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80040b0:	2300      	movs	r3, #0
 80040b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d016      	beq.n	80040e8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80040ba:	4b13      	ldr	r3, [pc, #76]	; (8004108 <vTaskDelay+0x60>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d009      	beq.n	80040d6 <vTaskDelay+0x2e>
 80040c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c6:	f383 8811 	msr	BASEPRI, r3
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	60bb      	str	r3, [r7, #8]
 80040d4:	e7fe      	b.n	80040d4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80040d6:	f000 f879 	bl	80041cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80040da:	2100      	movs	r1, #0
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 fcc7 	bl	8004a70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80040e2:	f000 f881 	bl	80041e8 <xTaskResumeAll>
 80040e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d107      	bne.n	80040fe <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80040ee:	4b07      	ldr	r3, [pc, #28]	; (800410c <vTaskDelay+0x64>)
 80040f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80040fe:	bf00      	nop
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	200001b8 	.word	0x200001b8
 800410c:	e000ed04 	.word	0xe000ed04

08004110 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b08a      	sub	sp, #40	; 0x28
 8004114:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004116:	2300      	movs	r3, #0
 8004118:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800411a:	2300      	movs	r3, #0
 800411c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800411e:	463a      	mov	r2, r7
 8004120:	1d39      	adds	r1, r7, #4
 8004122:	f107 0308 	add.w	r3, r7, #8
 8004126:	4618      	mov	r0, r3
 8004128:	f002 fae0 	bl	80066ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800412c:	6839      	ldr	r1, [r7, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	9202      	str	r2, [sp, #8]
 8004134:	9301      	str	r3, [sp, #4]
 8004136:	2300      	movs	r3, #0
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	2300      	movs	r3, #0
 800413c:	460a      	mov	r2, r1
 800413e:	491d      	ldr	r1, [pc, #116]	; (80041b4 <vTaskStartScheduler+0xa4>)
 8004140:	481d      	ldr	r0, [pc, #116]	; (80041b8 <vTaskStartScheduler+0xa8>)
 8004142:	f7ff fdb1 	bl	8003ca8 <xTaskCreateStatic>
 8004146:	4602      	mov	r2, r0
 8004148:	4b1c      	ldr	r3, [pc, #112]	; (80041bc <vTaskStartScheduler+0xac>)
 800414a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800414c:	4b1b      	ldr	r3, [pc, #108]	; (80041bc <vTaskStartScheduler+0xac>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d002      	beq.n	800415a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004154:	2301      	movs	r3, #1
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	e001      	b.n	800415e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d115      	bne.n	8004190 <vTaskStartScheduler+0x80>
 8004164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004168:	f383 8811 	msr	BASEPRI, r3
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004176:	4b12      	ldr	r3, [pc, #72]	; (80041c0 <vTaskStartScheduler+0xb0>)
 8004178:	f04f 32ff 	mov.w	r2, #4294967295
 800417c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800417e:	4b11      	ldr	r3, [pc, #68]	; (80041c4 <vTaskStartScheduler+0xb4>)
 8004180:	2201      	movs	r2, #1
 8004182:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004184:	4b10      	ldr	r3, [pc, #64]	; (80041c8 <vTaskStartScheduler+0xb8>)
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800418a:	f000 fd61 	bl	8004c50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800418e:	e00d      	b.n	80041ac <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004196:	d109      	bne.n	80041ac <vTaskStartScheduler+0x9c>
 8004198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419c:	f383 8811 	msr	BASEPRI, r3
 80041a0:	f3bf 8f6f 	isb	sy
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	60fb      	str	r3, [r7, #12]
 80041aa:	e7fe      	b.n	80041aa <vTaskStartScheduler+0x9a>
}
 80041ac:	bf00      	nop
 80041ae:	3718      	adds	r7, #24
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	080071c0 	.word	0x080071c0
 80041b8:	0800477d 	.word	0x0800477d
 80041bc:	200001b4 	.word	0x200001b4
 80041c0:	200001b0 	.word	0x200001b0
 80041c4:	2000019c 	.word	0x2000019c
 80041c8:	20000194 	.word	0x20000194

080041cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80041d0:	4b04      	ldr	r3, [pc, #16]	; (80041e4 <vTaskSuspendAll+0x18>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3301      	adds	r3, #1
 80041d6:	4a03      	ldr	r2, [pc, #12]	; (80041e4 <vTaskSuspendAll+0x18>)
 80041d8:	6013      	str	r3, [r2, #0]
}
 80041da:	bf00      	nop
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	200001b8 	.word	0x200001b8

080041e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80041ee:	2300      	movs	r3, #0
 80041f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80041f2:	2300      	movs	r3, #0
 80041f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80041f6:	4b41      	ldr	r3, [pc, #260]	; (80042fc <xTaskResumeAll+0x114>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d109      	bne.n	8004212 <xTaskResumeAll+0x2a>
 80041fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004202:	f383 8811 	msr	BASEPRI, r3
 8004206:	f3bf 8f6f 	isb	sy
 800420a:	f3bf 8f4f 	dsb	sy
 800420e:	603b      	str	r3, [r7, #0]
 8004210:	e7fe      	b.n	8004210 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004212:	f000 fdbb 	bl	8004d8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004216:	4b39      	ldr	r3, [pc, #228]	; (80042fc <xTaskResumeAll+0x114>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	3b01      	subs	r3, #1
 800421c:	4a37      	ldr	r2, [pc, #220]	; (80042fc <xTaskResumeAll+0x114>)
 800421e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004220:	4b36      	ldr	r3, [pc, #216]	; (80042fc <xTaskResumeAll+0x114>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d161      	bne.n	80042ec <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004228:	4b35      	ldr	r3, [pc, #212]	; (8004300 <xTaskResumeAll+0x118>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d05d      	beq.n	80042ec <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004230:	e02e      	b.n	8004290 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004232:	4b34      	ldr	r3, [pc, #208]	; (8004304 <xTaskResumeAll+0x11c>)
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	3318      	adds	r3, #24
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff f95d 	bl	80034fe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	3304      	adds	r3, #4
 8004248:	4618      	mov	r0, r3
 800424a:	f7ff f958 	bl	80034fe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004252:	2201      	movs	r2, #1
 8004254:	409a      	lsls	r2, r3
 8004256:	4b2c      	ldr	r3, [pc, #176]	; (8004308 <xTaskResumeAll+0x120>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4313      	orrs	r3, r2
 800425c:	4a2a      	ldr	r2, [pc, #168]	; (8004308 <xTaskResumeAll+0x120>)
 800425e:	6013      	str	r3, [r2, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004264:	4613      	mov	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4a27      	ldr	r2, [pc, #156]	; (800430c <xTaskResumeAll+0x124>)
 800426e:	441a      	add	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	3304      	adds	r3, #4
 8004274:	4619      	mov	r1, r3
 8004276:	4610      	mov	r0, r2
 8004278:	f7ff f8e4 	bl	8003444 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004280:	4b23      	ldr	r3, [pc, #140]	; (8004310 <xTaskResumeAll+0x128>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004286:	429a      	cmp	r2, r3
 8004288:	d302      	bcc.n	8004290 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800428a:	4b22      	ldr	r3, [pc, #136]	; (8004314 <xTaskResumeAll+0x12c>)
 800428c:	2201      	movs	r2, #1
 800428e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004290:	4b1c      	ldr	r3, [pc, #112]	; (8004304 <xTaskResumeAll+0x11c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1cc      	bne.n	8004232 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800429e:	f000 fb1f 	bl	80048e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80042a2:	4b1d      	ldr	r3, [pc, #116]	; (8004318 <xTaskResumeAll+0x130>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d010      	beq.n	80042d0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80042ae:	f000 f847 	bl	8004340 <xTaskIncrementTick>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80042b8:	4b16      	ldr	r3, [pc, #88]	; (8004314 <xTaskResumeAll+0x12c>)
 80042ba:	2201      	movs	r2, #1
 80042bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	3b01      	subs	r3, #1
 80042c2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1f1      	bne.n	80042ae <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80042ca:	4b13      	ldr	r3, [pc, #76]	; (8004318 <xTaskResumeAll+0x130>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80042d0:	4b10      	ldr	r3, [pc, #64]	; (8004314 <xTaskResumeAll+0x12c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d009      	beq.n	80042ec <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80042d8:	2301      	movs	r3, #1
 80042da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80042dc:	4b0f      	ldr	r3, [pc, #60]	; (800431c <xTaskResumeAll+0x134>)
 80042de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042ec:	f000 fd7c 	bl	8004de8 <vPortExitCritical>

	return xAlreadyYielded;
 80042f0:	68bb      	ldr	r3, [r7, #8]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	200001b8 	.word	0x200001b8
 8004300:	20000190 	.word	0x20000190
 8004304:	20000150 	.word	0x20000150
 8004308:	20000198 	.word	0x20000198
 800430c:	20000094 	.word	0x20000094
 8004310:	20000090 	.word	0x20000090
 8004314:	200001a4 	.word	0x200001a4
 8004318:	200001a0 	.word	0x200001a0
 800431c:	e000ed04 	.word	0xe000ed04

08004320 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004326:	4b05      	ldr	r3, [pc, #20]	; (800433c <xTaskGetTickCount+0x1c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800432c:	687b      	ldr	r3, [r7, #4]
}
 800432e:	4618      	mov	r0, r3
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	20000194 	.word	0x20000194

08004340 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004346:	2300      	movs	r3, #0
 8004348:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800434a:	4b50      	ldr	r3, [pc, #320]	; (800448c <xTaskIncrementTick+0x14c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	f040 808c 	bne.w	800446c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004354:	4b4e      	ldr	r3, [pc, #312]	; (8004490 <xTaskIncrementTick+0x150>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	3301      	adds	r3, #1
 800435a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800435c:	4a4c      	ldr	r2, [pc, #304]	; (8004490 <xTaskIncrementTick+0x150>)
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d11f      	bne.n	80043a8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004368:	4b4a      	ldr	r3, [pc, #296]	; (8004494 <xTaskIncrementTick+0x154>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d009      	beq.n	8004386 <xTaskIncrementTick+0x46>
 8004372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004376:	f383 8811 	msr	BASEPRI, r3
 800437a:	f3bf 8f6f 	isb	sy
 800437e:	f3bf 8f4f 	dsb	sy
 8004382:	603b      	str	r3, [r7, #0]
 8004384:	e7fe      	b.n	8004384 <xTaskIncrementTick+0x44>
 8004386:	4b43      	ldr	r3, [pc, #268]	; (8004494 <xTaskIncrementTick+0x154>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	4b42      	ldr	r3, [pc, #264]	; (8004498 <xTaskIncrementTick+0x158>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a40      	ldr	r2, [pc, #256]	; (8004494 <xTaskIncrementTick+0x154>)
 8004392:	6013      	str	r3, [r2, #0]
 8004394:	4a40      	ldr	r2, [pc, #256]	; (8004498 <xTaskIncrementTick+0x158>)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	4b40      	ldr	r3, [pc, #256]	; (800449c <xTaskIncrementTick+0x15c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	3301      	adds	r3, #1
 80043a0:	4a3e      	ldr	r2, [pc, #248]	; (800449c <xTaskIncrementTick+0x15c>)
 80043a2:	6013      	str	r3, [r2, #0]
 80043a4:	f000 fa9c 	bl	80048e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80043a8:	4b3d      	ldr	r3, [pc, #244]	; (80044a0 <xTaskIncrementTick+0x160>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d34d      	bcc.n	800444e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043b2:	4b38      	ldr	r3, [pc, #224]	; (8004494 <xTaskIncrementTick+0x154>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <xTaskIncrementTick+0x80>
 80043bc:	2301      	movs	r3, #1
 80043be:	e000      	b.n	80043c2 <xTaskIncrementTick+0x82>
 80043c0:	2300      	movs	r3, #0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d004      	beq.n	80043d0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043c6:	4b36      	ldr	r3, [pc, #216]	; (80044a0 <xTaskIncrementTick+0x160>)
 80043c8:	f04f 32ff 	mov.w	r2, #4294967295
 80043cc:	601a      	str	r2, [r3, #0]
					break;
 80043ce:	e03e      	b.n	800444e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80043d0:	4b30      	ldr	r3, [pc, #192]	; (8004494 <xTaskIncrementTick+0x154>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d203      	bcs.n	80043f0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80043e8:	4a2d      	ldr	r2, [pc, #180]	; (80044a0 <xTaskIncrementTick+0x160>)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6013      	str	r3, [r2, #0]
						break;
 80043ee:	e02e      	b.n	800444e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	3304      	adds	r3, #4
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff f882 	bl	80034fe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d004      	beq.n	800440c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	3318      	adds	r3, #24
 8004406:	4618      	mov	r0, r3
 8004408:	f7ff f879 	bl	80034fe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004410:	2201      	movs	r2, #1
 8004412:	409a      	lsls	r2, r3
 8004414:	4b23      	ldr	r3, [pc, #140]	; (80044a4 <xTaskIncrementTick+0x164>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4313      	orrs	r3, r2
 800441a:	4a22      	ldr	r2, [pc, #136]	; (80044a4 <xTaskIncrementTick+0x164>)
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004422:	4613      	mov	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4a1f      	ldr	r2, [pc, #124]	; (80044a8 <xTaskIncrementTick+0x168>)
 800442c:	441a      	add	r2, r3
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	3304      	adds	r3, #4
 8004432:	4619      	mov	r1, r3
 8004434:	4610      	mov	r0, r2
 8004436:	f7ff f805 	bl	8003444 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443e:	4b1b      	ldr	r3, [pc, #108]	; (80044ac <xTaskIncrementTick+0x16c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004444:	429a      	cmp	r2, r3
 8004446:	d3b4      	bcc.n	80043b2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004448:	2301      	movs	r3, #1
 800444a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800444c:	e7b1      	b.n	80043b2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800444e:	4b17      	ldr	r3, [pc, #92]	; (80044ac <xTaskIncrementTick+0x16c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004454:	4914      	ldr	r1, [pc, #80]	; (80044a8 <xTaskIncrementTick+0x168>)
 8004456:	4613      	mov	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	440b      	add	r3, r1
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d907      	bls.n	8004476 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8004466:	2301      	movs	r3, #1
 8004468:	617b      	str	r3, [r7, #20]
 800446a:	e004      	b.n	8004476 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800446c:	4b10      	ldr	r3, [pc, #64]	; (80044b0 <xTaskIncrementTick+0x170>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	3301      	adds	r3, #1
 8004472:	4a0f      	ldr	r2, [pc, #60]	; (80044b0 <xTaskIncrementTick+0x170>)
 8004474:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004476:	4b0f      	ldr	r3, [pc, #60]	; (80044b4 <xTaskIncrementTick+0x174>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800447e:	2301      	movs	r3, #1
 8004480:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004482:	697b      	ldr	r3, [r7, #20]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3718      	adds	r7, #24
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	200001b8 	.word	0x200001b8
 8004490:	20000194 	.word	0x20000194
 8004494:	20000148 	.word	0x20000148
 8004498:	2000014c 	.word	0x2000014c
 800449c:	200001a8 	.word	0x200001a8
 80044a0:	200001b0 	.word	0x200001b0
 80044a4:	20000198 	.word	0x20000198
 80044a8:	20000094 	.word	0x20000094
 80044ac:	20000090 	.word	0x20000090
 80044b0:	200001a0 	.word	0x200001a0
 80044b4:	200001a4 	.word	0x200001a4

080044b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80044b8:	b480      	push	{r7}
 80044ba:	b087      	sub	sp, #28
 80044bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80044be:	4b26      	ldr	r3, [pc, #152]	; (8004558 <vTaskSwitchContext+0xa0>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80044c6:	4b25      	ldr	r3, [pc, #148]	; (800455c <vTaskSwitchContext+0xa4>)
 80044c8:	2201      	movs	r2, #1
 80044ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80044cc:	e03e      	b.n	800454c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80044ce:	4b23      	ldr	r3, [pc, #140]	; (800455c <vTaskSwitchContext+0xa4>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80044d4:	4b22      	ldr	r3, [pc, #136]	; (8004560 <vTaskSwitchContext+0xa8>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	fab3 f383 	clz	r3, r3
 80044e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80044e2:	7afb      	ldrb	r3, [r7, #11]
 80044e4:	f1c3 031f 	rsb	r3, r3, #31
 80044e8:	617b      	str	r3, [r7, #20]
 80044ea:	491e      	ldr	r1, [pc, #120]	; (8004564 <vTaskSwitchContext+0xac>)
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	4613      	mov	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4413      	add	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	440b      	add	r3, r1
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d109      	bne.n	8004512 <vTaskSwitchContext+0x5a>
	__asm volatile
 80044fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	607b      	str	r3, [r7, #4]
 8004510:	e7fe      	b.n	8004510 <vTaskSwitchContext+0x58>
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	4613      	mov	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4a11      	ldr	r2, [pc, #68]	; (8004564 <vTaskSwitchContext+0xac>)
 800451e:	4413      	add	r3, r2
 8004520:	613b      	str	r3, [r7, #16]
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	605a      	str	r2, [r3, #4]
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	3308      	adds	r3, #8
 8004534:	429a      	cmp	r2, r3
 8004536:	d104      	bne.n	8004542 <vTaskSwitchContext+0x8a>
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	605a      	str	r2, [r3, #4]
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	4a07      	ldr	r2, [pc, #28]	; (8004568 <vTaskSwitchContext+0xb0>)
 800454a:	6013      	str	r3, [r2, #0]
}
 800454c:	bf00      	nop
 800454e:	371c      	adds	r7, #28
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	200001b8 	.word	0x200001b8
 800455c:	200001a4 	.word	0x200001a4
 8004560:	20000198 	.word	0x20000198
 8004564:	20000094 	.word	0x20000094
 8004568:	20000090 	.word	0x20000090

0800456c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d109      	bne.n	8004590 <vTaskPlaceOnEventList+0x24>
 800457c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004580:	f383 8811 	msr	BASEPRI, r3
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	60fb      	str	r3, [r7, #12]
 800458e:	e7fe      	b.n	800458e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004590:	4b07      	ldr	r3, [pc, #28]	; (80045b0 <vTaskPlaceOnEventList+0x44>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	3318      	adds	r3, #24
 8004596:	4619      	mov	r1, r3
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7fe ff77 	bl	800348c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800459e:	2101      	movs	r1, #1
 80045a0:	6838      	ldr	r0, [r7, #0]
 80045a2:	f000 fa65 	bl	8004a70 <prvAddCurrentTaskToDelayedList>
}
 80045a6:	bf00      	nop
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	20000090 	.word	0x20000090

080045b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d109      	bne.n	80045de <xTaskRemoveFromEventList+0x2a>
 80045ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ce:	f383 8811 	msr	BASEPRI, r3
 80045d2:	f3bf 8f6f 	isb	sy
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	e7fe      	b.n	80045dc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	3318      	adds	r3, #24
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fe ff8b 	bl	80034fe <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045e8:	4b1d      	ldr	r3, [pc, #116]	; (8004660 <xTaskRemoveFromEventList+0xac>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d11c      	bne.n	800462a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	3304      	adds	r3, #4
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7fe ff82 	bl	80034fe <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fe:	2201      	movs	r2, #1
 8004600:	409a      	lsls	r2, r3
 8004602:	4b18      	ldr	r3, [pc, #96]	; (8004664 <xTaskRemoveFromEventList+0xb0>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4313      	orrs	r3, r2
 8004608:	4a16      	ldr	r2, [pc, #88]	; (8004664 <xTaskRemoveFromEventList+0xb0>)
 800460a:	6013      	str	r3, [r2, #0]
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004610:	4613      	mov	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4a13      	ldr	r2, [pc, #76]	; (8004668 <xTaskRemoveFromEventList+0xb4>)
 800461a:	441a      	add	r2, r3
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	3304      	adds	r3, #4
 8004620:	4619      	mov	r1, r3
 8004622:	4610      	mov	r0, r2
 8004624:	f7fe ff0e 	bl	8003444 <vListInsertEnd>
 8004628:	e005      	b.n	8004636 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	3318      	adds	r3, #24
 800462e:	4619      	mov	r1, r3
 8004630:	480e      	ldr	r0, [pc, #56]	; (800466c <xTaskRemoveFromEventList+0xb8>)
 8004632:	f7fe ff07 	bl	8003444 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463a:	4b0d      	ldr	r3, [pc, #52]	; (8004670 <xTaskRemoveFromEventList+0xbc>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	429a      	cmp	r2, r3
 8004642:	d905      	bls.n	8004650 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004644:	2301      	movs	r3, #1
 8004646:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004648:	4b0a      	ldr	r3, [pc, #40]	; (8004674 <xTaskRemoveFromEventList+0xc0>)
 800464a:	2201      	movs	r2, #1
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	e001      	b.n	8004654 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8004650:	2300      	movs	r3, #0
 8004652:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004654:	697b      	ldr	r3, [r7, #20]
}
 8004656:	4618      	mov	r0, r3
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	200001b8 	.word	0x200001b8
 8004664:	20000198 	.word	0x20000198
 8004668:	20000094 	.word	0x20000094
 800466c:	20000150 	.word	0x20000150
 8004670:	20000090 	.word	0x20000090
 8004674:	200001a4 	.word	0x200001a4

08004678 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004680:	4b06      	ldr	r3, [pc, #24]	; (800469c <vTaskInternalSetTimeOutState+0x24>)
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004688:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <vTaskInternalSetTimeOutState+0x28>)
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	605a      	str	r2, [r3, #4]
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	200001a8 	.word	0x200001a8
 80046a0:	20000194 	.word	0x20000194

080046a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b088      	sub	sp, #32
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d109      	bne.n	80046c8 <xTaskCheckForTimeOut+0x24>
 80046b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	613b      	str	r3, [r7, #16]
 80046c6:	e7fe      	b.n	80046c6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d109      	bne.n	80046e2 <xTaskCheckForTimeOut+0x3e>
 80046ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	e7fe      	b.n	80046e0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80046e2:	f000 fb53 	bl	8004d8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80046e6:	4b1d      	ldr	r3, [pc, #116]	; (800475c <xTaskCheckForTimeOut+0xb8>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fe:	d102      	bne.n	8004706 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004700:	2300      	movs	r3, #0
 8004702:	61fb      	str	r3, [r7, #28]
 8004704:	e023      	b.n	800474e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	4b15      	ldr	r3, [pc, #84]	; (8004760 <xTaskCheckForTimeOut+0xbc>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	429a      	cmp	r2, r3
 8004710:	d007      	beq.n	8004722 <xTaskCheckForTimeOut+0x7e>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	429a      	cmp	r2, r3
 800471a:	d302      	bcc.n	8004722 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800471c:	2301      	movs	r3, #1
 800471e:	61fb      	str	r3, [r7, #28]
 8004720:	e015      	b.n	800474e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	429a      	cmp	r2, r3
 800472a:	d20b      	bcs.n	8004744 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	1ad2      	subs	r2, r2, r3
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f7ff ff9d 	bl	8004678 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800473e:	2300      	movs	r3, #0
 8004740:	61fb      	str	r3, [r7, #28]
 8004742:	e004      	b.n	800474e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	2200      	movs	r2, #0
 8004748:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800474a:	2301      	movs	r3, #1
 800474c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800474e:	f000 fb4b 	bl	8004de8 <vPortExitCritical>

	return xReturn;
 8004752:	69fb      	ldr	r3, [r7, #28]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3720      	adds	r7, #32
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	20000194 	.word	0x20000194
 8004760:	200001a8 	.word	0x200001a8

08004764 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004768:	4b03      	ldr	r3, [pc, #12]	; (8004778 <vTaskMissedYield+0x14>)
 800476a:	2201      	movs	r2, #1
 800476c:	601a      	str	r2, [r3, #0]
}
 800476e:	bf00      	nop
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	200001a4 	.word	0x200001a4

0800477c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004784:	f000 f852 	bl	800482c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004788:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <prvIdleTask+0x28>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d9f9      	bls.n	8004784 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004790:	4b05      	ldr	r3, [pc, #20]	; (80047a8 <prvIdleTask+0x2c>)
 8004792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80047a0:	e7f0      	b.n	8004784 <prvIdleTask+0x8>
 80047a2:	bf00      	nop
 80047a4:	20000094 	.word	0x20000094
 80047a8:	e000ed04 	.word	0xe000ed04

080047ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047b2:	2300      	movs	r3, #0
 80047b4:	607b      	str	r3, [r7, #4]
 80047b6:	e00c      	b.n	80047d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	4613      	mov	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4a12      	ldr	r2, [pc, #72]	; (800480c <prvInitialiseTaskLists+0x60>)
 80047c4:	4413      	add	r3, r2
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7fe fe0f 	bl	80033ea <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3301      	adds	r3, #1
 80047d0:	607b      	str	r3, [r7, #4]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b06      	cmp	r3, #6
 80047d6:	d9ef      	bls.n	80047b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80047d8:	480d      	ldr	r0, [pc, #52]	; (8004810 <prvInitialiseTaskLists+0x64>)
 80047da:	f7fe fe06 	bl	80033ea <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80047de:	480d      	ldr	r0, [pc, #52]	; (8004814 <prvInitialiseTaskLists+0x68>)
 80047e0:	f7fe fe03 	bl	80033ea <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80047e4:	480c      	ldr	r0, [pc, #48]	; (8004818 <prvInitialiseTaskLists+0x6c>)
 80047e6:	f7fe fe00 	bl	80033ea <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80047ea:	480c      	ldr	r0, [pc, #48]	; (800481c <prvInitialiseTaskLists+0x70>)
 80047ec:	f7fe fdfd 	bl	80033ea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80047f0:	480b      	ldr	r0, [pc, #44]	; (8004820 <prvInitialiseTaskLists+0x74>)
 80047f2:	f7fe fdfa 	bl	80033ea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80047f6:	4b0b      	ldr	r3, [pc, #44]	; (8004824 <prvInitialiseTaskLists+0x78>)
 80047f8:	4a05      	ldr	r2, [pc, #20]	; (8004810 <prvInitialiseTaskLists+0x64>)
 80047fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80047fc:	4b0a      	ldr	r3, [pc, #40]	; (8004828 <prvInitialiseTaskLists+0x7c>)
 80047fe:	4a05      	ldr	r2, [pc, #20]	; (8004814 <prvInitialiseTaskLists+0x68>)
 8004800:	601a      	str	r2, [r3, #0]
}
 8004802:	bf00      	nop
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	20000094 	.word	0x20000094
 8004810:	20000120 	.word	0x20000120
 8004814:	20000134 	.word	0x20000134
 8004818:	20000150 	.word	0x20000150
 800481c:	20000164 	.word	0x20000164
 8004820:	2000017c 	.word	0x2000017c
 8004824:	20000148 	.word	0x20000148
 8004828:	2000014c 	.word	0x2000014c

0800482c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004832:	e019      	b.n	8004868 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004834:	f000 faaa 	bl	8004d8c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004838:	4b0f      	ldr	r3, [pc, #60]	; (8004878 <prvCheckTasksWaitingTermination+0x4c>)
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3304      	adds	r3, #4
 8004844:	4618      	mov	r0, r3
 8004846:	f7fe fe5a 	bl	80034fe <uxListRemove>
				--uxCurrentNumberOfTasks;
 800484a:	4b0c      	ldr	r3, [pc, #48]	; (800487c <prvCheckTasksWaitingTermination+0x50>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	3b01      	subs	r3, #1
 8004850:	4a0a      	ldr	r2, [pc, #40]	; (800487c <prvCheckTasksWaitingTermination+0x50>)
 8004852:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004854:	4b0a      	ldr	r3, [pc, #40]	; (8004880 <prvCheckTasksWaitingTermination+0x54>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3b01      	subs	r3, #1
 800485a:	4a09      	ldr	r2, [pc, #36]	; (8004880 <prvCheckTasksWaitingTermination+0x54>)
 800485c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800485e:	f000 fac3 	bl	8004de8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f80e 	bl	8004884 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004868:	4b05      	ldr	r3, [pc, #20]	; (8004880 <prvCheckTasksWaitingTermination+0x54>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1e1      	bne.n	8004834 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004870:	bf00      	nop
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	20000164 	.word	0x20000164
 800487c:	20000190 	.word	0x20000190
 8004880:	20000178 	.word	0x20000178

08004884 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004892:	2b00      	cmp	r3, #0
 8004894:	d108      	bne.n	80048a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489a:	4618      	mov	r0, r3
 800489c:	f000 fc14 	bl	80050c8 <vPortFree>
				vPortFree( pxTCB );
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 fc11 	bl	80050c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80048a6:	e017      	b.n	80048d8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d103      	bne.n	80048ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 fc08 	bl	80050c8 <vPortFree>
	}
 80048b8:	e00e      	b.n	80048d8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d009      	beq.n	80048d8 <prvDeleteTCB+0x54>
 80048c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c8:	f383 8811 	msr	BASEPRI, r3
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	f3bf 8f4f 	dsb	sy
 80048d4:	60fb      	str	r3, [r7, #12]
 80048d6:	e7fe      	b.n	80048d6 <prvDeleteTCB+0x52>
	}
 80048d8:	bf00      	nop
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048e6:	4b0f      	ldr	r3, [pc, #60]	; (8004924 <prvResetNextTaskUnblockTime+0x44>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <prvResetNextTaskUnblockTime+0x14>
 80048f0:	2301      	movs	r3, #1
 80048f2:	e000      	b.n	80048f6 <prvResetNextTaskUnblockTime+0x16>
 80048f4:	2300      	movs	r3, #0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d004      	beq.n	8004904 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80048fa:	4b0b      	ldr	r3, [pc, #44]	; (8004928 <prvResetNextTaskUnblockTime+0x48>)
 80048fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004900:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004902:	e008      	b.n	8004916 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004904:	4b07      	ldr	r3, [pc, #28]	; (8004924 <prvResetNextTaskUnblockTime+0x44>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	4a05      	ldr	r2, [pc, #20]	; (8004928 <prvResetNextTaskUnblockTime+0x48>)
 8004914:	6013      	str	r3, [r2, #0]
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	20000148 	.word	0x20000148
 8004928:	200001b0 	.word	0x200001b0

0800492c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004932:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <xTaskGetSchedulerState+0x34>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d102      	bne.n	8004940 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800493a:	2301      	movs	r3, #1
 800493c:	607b      	str	r3, [r7, #4]
 800493e:	e008      	b.n	8004952 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004940:	4b08      	ldr	r3, [pc, #32]	; (8004964 <xTaskGetSchedulerState+0x38>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d102      	bne.n	800494e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004948:	2302      	movs	r3, #2
 800494a:	607b      	str	r3, [r7, #4]
 800494c:	e001      	b.n	8004952 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800494e:	2300      	movs	r3, #0
 8004950:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004952:	687b      	ldr	r3, [r7, #4]
	}
 8004954:	4618      	mov	r0, r3
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr
 8004960:	2000019c 	.word	0x2000019c
 8004964:	200001b8 	.word	0x200001b8

08004968 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004974:	2300      	movs	r3, #0
 8004976:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d06c      	beq.n	8004a58 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800497e:	4b39      	ldr	r3, [pc, #228]	; (8004a64 <xTaskPriorityDisinherit+0xfc>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	429a      	cmp	r2, r3
 8004986:	d009      	beq.n	800499c <xTaskPriorityDisinherit+0x34>
 8004988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498c:	f383 8811 	msr	BASEPRI, r3
 8004990:	f3bf 8f6f 	isb	sy
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	e7fe      	b.n	800499a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d109      	bne.n	80049b8 <xTaskPriorityDisinherit+0x50>
 80049a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a8:	f383 8811 	msr	BASEPRI, r3
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	60bb      	str	r3, [r7, #8]
 80049b6:	e7fe      	b.n	80049b6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049bc:	1e5a      	subs	r2, r3, #1
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d044      	beq.n	8004a58 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d140      	bne.n	8004a58 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	3304      	adds	r3, #4
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fe fd8f 	bl	80034fe <uxListRemove>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d115      	bne.n	8004a12 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ea:	491f      	ldr	r1, [pc, #124]	; (8004a68 <xTaskPriorityDisinherit+0x100>)
 80049ec:	4613      	mov	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	440b      	add	r3, r1
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10a      	bne.n	8004a12 <xTaskPriorityDisinherit+0xaa>
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a00:	2201      	movs	r2, #1
 8004a02:	fa02 f303 	lsl.w	r3, r2, r3
 8004a06:	43da      	mvns	r2, r3
 8004a08:	4b18      	ldr	r3, [pc, #96]	; (8004a6c <xTaskPriorityDisinherit+0x104>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	4a17      	ldr	r2, [pc, #92]	; (8004a6c <xTaskPriorityDisinherit+0x104>)
 8004a10:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1e:	f1c3 0207 	rsb	r2, r3, #7
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	409a      	lsls	r2, r3
 8004a2e:	4b0f      	ldr	r3, [pc, #60]	; (8004a6c <xTaskPriorityDisinherit+0x104>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	4a0d      	ldr	r2, [pc, #52]	; (8004a6c <xTaskPriorityDisinherit+0x104>)
 8004a36:	6013      	str	r3, [r2, #0]
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4a08      	ldr	r2, [pc, #32]	; (8004a68 <xTaskPriorityDisinherit+0x100>)
 8004a46:	441a      	add	r2, r3
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	4610      	mov	r0, r2
 8004a50:	f7fe fcf8 	bl	8003444 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004a54:	2301      	movs	r3, #1
 8004a56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004a58:	697b      	ldr	r3, [r7, #20]
	}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3718      	adds	r7, #24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	20000090 	.word	0x20000090
 8004a68:	20000094 	.word	0x20000094
 8004a6c:	20000198 	.word	0x20000198

08004a70 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a7a:	4b29      	ldr	r3, [pc, #164]	; (8004b20 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a80:	4b28      	ldr	r3, [pc, #160]	; (8004b24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3304      	adds	r3, #4
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7fe fd39 	bl	80034fe <uxListRemove>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10b      	bne.n	8004aaa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004a92:	4b24      	ldr	r3, [pc, #144]	; (8004b24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a98:	2201      	movs	r2, #1
 8004a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9e:	43da      	mvns	r2, r3
 8004aa0:	4b21      	ldr	r3, [pc, #132]	; (8004b28 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	4a20      	ldr	r2, [pc, #128]	; (8004b28 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004aa8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab0:	d10a      	bne.n	8004ac8 <prvAddCurrentTaskToDelayedList+0x58>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d007      	beq.n	8004ac8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ab8:	4b1a      	ldr	r3, [pc, #104]	; (8004b24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3304      	adds	r3, #4
 8004abe:	4619      	mov	r1, r3
 8004ac0:	481a      	ldr	r0, [pc, #104]	; (8004b2c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004ac2:	f7fe fcbf 	bl	8003444 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ac6:	e026      	b.n	8004b16 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4413      	add	r3, r2
 8004ace:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ad0:	4b14      	ldr	r3, [pc, #80]	; (8004b24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d209      	bcs.n	8004af4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ae0:	4b13      	ldr	r3, [pc, #76]	; (8004b30 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	4b0f      	ldr	r3, [pc, #60]	; (8004b24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	3304      	adds	r3, #4
 8004aea:	4619      	mov	r1, r3
 8004aec:	4610      	mov	r0, r2
 8004aee:	f7fe fccd 	bl	800348c <vListInsert>
}
 8004af2:	e010      	b.n	8004b16 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004af4:	4b0f      	ldr	r3, [pc, #60]	; (8004b34 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	4b0a      	ldr	r3, [pc, #40]	; (8004b24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3304      	adds	r3, #4
 8004afe:	4619      	mov	r1, r3
 8004b00:	4610      	mov	r0, r2
 8004b02:	f7fe fcc3 	bl	800348c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b06:	4b0c      	ldr	r3, [pc, #48]	; (8004b38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d202      	bcs.n	8004b16 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004b10:	4a09      	ldr	r2, [pc, #36]	; (8004b38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	6013      	str	r3, [r2, #0]
}
 8004b16:	bf00      	nop
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	20000194 	.word	0x20000194
 8004b24:	20000090 	.word	0x20000090
 8004b28:	20000198 	.word	0x20000198
 8004b2c:	2000017c 	.word	0x2000017c
 8004b30:	2000014c 	.word	0x2000014c
 8004b34:	20000148 	.word	0x20000148
 8004b38:	200001b0 	.word	0x200001b0

08004b3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	3b04      	subs	r3, #4
 8004b4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	3b04      	subs	r3, #4
 8004b5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	f023 0201 	bic.w	r2, r3, #1
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	3b04      	subs	r3, #4
 8004b6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b6c:	4a0c      	ldr	r2, [pc, #48]	; (8004ba0 <pxPortInitialiseStack+0x64>)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	3b14      	subs	r3, #20
 8004b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	3b04      	subs	r3, #4
 8004b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f06f 0202 	mvn.w	r2, #2
 8004b8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	3b20      	subs	r3, #32
 8004b90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b92:	68fb      	ldr	r3, [r7, #12]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	08004ba5 	.word	0x08004ba5

08004ba4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004baa:	2300      	movs	r3, #0
 8004bac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004bae:	4b11      	ldr	r3, [pc, #68]	; (8004bf4 <prvTaskExitError+0x50>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb6:	d009      	beq.n	8004bcc <prvTaskExitError+0x28>
 8004bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbc:	f383 8811 	msr	BASEPRI, r3
 8004bc0:	f3bf 8f6f 	isb	sy
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	e7fe      	b.n	8004bca <prvTaskExitError+0x26>
 8004bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004bde:	bf00      	nop
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d0fc      	beq.n	8004be0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004be6:	bf00      	nop
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	20000008 	.word	0x20000008
	...

08004c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c00:	4b07      	ldr	r3, [pc, #28]	; (8004c20 <pxCurrentTCBConst2>)
 8004c02:	6819      	ldr	r1, [r3, #0]
 8004c04:	6808      	ldr	r0, [r1, #0]
 8004c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c0a:	f380 8809 	msr	PSP, r0
 8004c0e:	f3bf 8f6f 	isb	sy
 8004c12:	f04f 0000 	mov.w	r0, #0
 8004c16:	f380 8811 	msr	BASEPRI, r0
 8004c1a:	4770      	bx	lr
 8004c1c:	f3af 8000 	nop.w

08004c20 <pxCurrentTCBConst2>:
 8004c20:	20000090 	.word	0x20000090
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c24:	bf00      	nop
 8004c26:	bf00      	nop

08004c28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c28:	4808      	ldr	r0, [pc, #32]	; (8004c4c <prvPortStartFirstTask+0x24>)
 8004c2a:	6800      	ldr	r0, [r0, #0]
 8004c2c:	6800      	ldr	r0, [r0, #0]
 8004c2e:	f380 8808 	msr	MSP, r0
 8004c32:	f04f 0000 	mov.w	r0, #0
 8004c36:	f380 8814 	msr	CONTROL, r0
 8004c3a:	b662      	cpsie	i
 8004c3c:	b661      	cpsie	f
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	df00      	svc	0
 8004c48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c4a:	bf00      	nop
 8004c4c:	e000ed08 	.word	0xe000ed08

08004c50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c56:	4b44      	ldr	r3, [pc, #272]	; (8004d68 <xPortStartScheduler+0x118>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a44      	ldr	r2, [pc, #272]	; (8004d6c <xPortStartScheduler+0x11c>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d109      	bne.n	8004c74 <xPortStartScheduler+0x24>
 8004c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	613b      	str	r3, [r7, #16]
 8004c72:	e7fe      	b.n	8004c72 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c74:	4b3c      	ldr	r3, [pc, #240]	; (8004d68 <xPortStartScheduler+0x118>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a3d      	ldr	r2, [pc, #244]	; (8004d70 <xPortStartScheduler+0x120>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d109      	bne.n	8004c92 <xPortStartScheduler+0x42>
 8004c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c82:	f383 8811 	msr	BASEPRI, r3
 8004c86:	f3bf 8f6f 	isb	sy
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	e7fe      	b.n	8004c90 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c92:	4b38      	ldr	r3, [pc, #224]	; (8004d74 <xPortStartScheduler+0x124>)
 8004c94:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	22ff      	movs	r2, #255	; 0xff
 8004ca2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004cac:	78fb      	ldrb	r3, [r7, #3]
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	4b30      	ldr	r3, [pc, #192]	; (8004d78 <xPortStartScheduler+0x128>)
 8004cb8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004cba:	4b30      	ldr	r3, [pc, #192]	; (8004d7c <xPortStartScheduler+0x12c>)
 8004cbc:	2207      	movs	r2, #7
 8004cbe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cc0:	e009      	b.n	8004cd6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004cc2:	4b2e      	ldr	r3, [pc, #184]	; (8004d7c <xPortStartScheduler+0x12c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	4a2c      	ldr	r2, [pc, #176]	; (8004d7c <xPortStartScheduler+0x12c>)
 8004cca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ccc:	78fb      	ldrb	r3, [r7, #3]
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cd6:	78fb      	ldrb	r3, [r7, #3]
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cde:	2b80      	cmp	r3, #128	; 0x80
 8004ce0:	d0ef      	beq.n	8004cc2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ce2:	4b26      	ldr	r3, [pc, #152]	; (8004d7c <xPortStartScheduler+0x12c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f1c3 0307 	rsb	r3, r3, #7
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	d009      	beq.n	8004d02 <xPortStartScheduler+0xb2>
 8004cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf2:	f383 8811 	msr	BASEPRI, r3
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	f3bf 8f4f 	dsb	sy
 8004cfe:	60bb      	str	r3, [r7, #8]
 8004d00:	e7fe      	b.n	8004d00 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d02:	4b1e      	ldr	r3, [pc, #120]	; (8004d7c <xPortStartScheduler+0x12c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	021b      	lsls	r3, r3, #8
 8004d08:	4a1c      	ldr	r2, [pc, #112]	; (8004d7c <xPortStartScheduler+0x12c>)
 8004d0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d0c:	4b1b      	ldr	r3, [pc, #108]	; (8004d7c <xPortStartScheduler+0x12c>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d14:	4a19      	ldr	r2, [pc, #100]	; (8004d7c <xPortStartScheduler+0x12c>)
 8004d16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	b2da      	uxtb	r2, r3
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d20:	4b17      	ldr	r3, [pc, #92]	; (8004d80 <xPortStartScheduler+0x130>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a16      	ldr	r2, [pc, #88]	; (8004d80 <xPortStartScheduler+0x130>)
 8004d26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d2c:	4b14      	ldr	r3, [pc, #80]	; (8004d80 <xPortStartScheduler+0x130>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a13      	ldr	r2, [pc, #76]	; (8004d80 <xPortStartScheduler+0x130>)
 8004d32:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d38:	f000 f8d6 	bl	8004ee8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d3c:	4b11      	ldr	r3, [pc, #68]	; (8004d84 <xPortStartScheduler+0x134>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d42:	f000 f8f5 	bl	8004f30 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d46:	4b10      	ldr	r3, [pc, #64]	; (8004d88 <xPortStartScheduler+0x138>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a0f      	ldr	r2, [pc, #60]	; (8004d88 <xPortStartScheduler+0x138>)
 8004d4c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d50:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d52:	f7ff ff69 	bl	8004c28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d56:	f7ff fbaf 	bl	80044b8 <vTaskSwitchContext>
	prvTaskExitError();
 8004d5a:	f7ff ff23 	bl	8004ba4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3718      	adds	r7, #24
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	e000ed00 	.word	0xe000ed00
 8004d6c:	410fc271 	.word	0x410fc271
 8004d70:	410fc270 	.word	0x410fc270
 8004d74:	e000e400 	.word	0xe000e400
 8004d78:	200001bc 	.word	0x200001bc
 8004d7c:	200001c0 	.word	0x200001c0
 8004d80:	e000ed20 	.word	0xe000ed20
 8004d84:	20000008 	.word	0x20000008
 8004d88:	e000ef34 	.word	0xe000ef34

08004d8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d96:	f383 8811 	msr	BASEPRI, r3
 8004d9a:	f3bf 8f6f 	isb	sy
 8004d9e:	f3bf 8f4f 	dsb	sy
 8004da2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004da4:	4b0e      	ldr	r3, [pc, #56]	; (8004de0 <vPortEnterCritical+0x54>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3301      	adds	r3, #1
 8004daa:	4a0d      	ldr	r2, [pc, #52]	; (8004de0 <vPortEnterCritical+0x54>)
 8004dac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004dae:	4b0c      	ldr	r3, [pc, #48]	; (8004de0 <vPortEnterCritical+0x54>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d10e      	bne.n	8004dd4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004db6:	4b0b      	ldr	r3, [pc, #44]	; (8004de4 <vPortEnterCritical+0x58>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d009      	beq.n	8004dd4 <vPortEnterCritical+0x48>
 8004dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc4:	f383 8811 	msr	BASEPRI, r3
 8004dc8:	f3bf 8f6f 	isb	sy
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	603b      	str	r3, [r7, #0]
 8004dd2:	e7fe      	b.n	8004dd2 <vPortEnterCritical+0x46>
	}
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	20000008 	.word	0x20000008
 8004de4:	e000ed04 	.word	0xe000ed04

08004de8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004dee:	4b11      	ldr	r3, [pc, #68]	; (8004e34 <vPortExitCritical+0x4c>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d109      	bne.n	8004e0a <vPortExitCritical+0x22>
 8004df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfa:	f383 8811 	msr	BASEPRI, r3
 8004dfe:	f3bf 8f6f 	isb	sy
 8004e02:	f3bf 8f4f 	dsb	sy
 8004e06:	607b      	str	r3, [r7, #4]
 8004e08:	e7fe      	b.n	8004e08 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004e0a:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <vPortExitCritical+0x4c>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	4a08      	ldr	r2, [pc, #32]	; (8004e34 <vPortExitCritical+0x4c>)
 8004e12:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e14:	4b07      	ldr	r3, [pc, #28]	; (8004e34 <vPortExitCritical+0x4c>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d104      	bne.n	8004e26 <vPortExitCritical+0x3e>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	20000008 	.word	0x20000008
	...

08004e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e40:	f3ef 8009 	mrs	r0, PSP
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	4b15      	ldr	r3, [pc, #84]	; (8004ea0 <pxCurrentTCBConst>)
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	f01e 0f10 	tst.w	lr, #16
 8004e50:	bf08      	it	eq
 8004e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e5a:	6010      	str	r0, [r2, #0]
 8004e5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e64:	f380 8811 	msr	BASEPRI, r0
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f7ff fb22 	bl	80044b8 <vTaskSwitchContext>
 8004e74:	f04f 0000 	mov.w	r0, #0
 8004e78:	f380 8811 	msr	BASEPRI, r0
 8004e7c:	bc09      	pop	{r0, r3}
 8004e7e:	6819      	ldr	r1, [r3, #0]
 8004e80:	6808      	ldr	r0, [r1, #0]
 8004e82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e86:	f01e 0f10 	tst.w	lr, #16
 8004e8a:	bf08      	it	eq
 8004e8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e90:	f380 8809 	msr	PSP, r0
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	f3af 8000 	nop.w

08004ea0 <pxCurrentTCBConst>:
 8004ea0:	20000090 	.word	0x20000090
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ea4:	bf00      	nop
 8004ea6:	bf00      	nop

08004ea8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
	__asm volatile
 8004eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb2:	f383 8811 	msr	BASEPRI, r3
 8004eb6:	f3bf 8f6f 	isb	sy
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ec0:	f7ff fa3e 	bl	8004340 <xTaskIncrementTick>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004eca:	4b06      	ldr	r3, [pc, #24]	; (8004ee4 <xPortSysTickHandler+0x3c>)
 8004ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004edc:	bf00      	nop
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	e000ed04 	.word	0xe000ed04

08004ee8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004ee8:	b480      	push	{r7}
 8004eea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004eec:	4b0b      	ldr	r3, [pc, #44]	; (8004f1c <vPortSetupTimerInterrupt+0x34>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ef2:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <vPortSetupTimerInterrupt+0x38>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004ef8:	4b0a      	ldr	r3, [pc, #40]	; (8004f24 <vPortSetupTimerInterrupt+0x3c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a0a      	ldr	r2, [pc, #40]	; (8004f28 <vPortSetupTimerInterrupt+0x40>)
 8004efe:	fba2 2303 	umull	r2, r3, r2, r3
 8004f02:	099b      	lsrs	r3, r3, #6
 8004f04:	4a09      	ldr	r2, [pc, #36]	; (8004f2c <vPortSetupTimerInterrupt+0x44>)
 8004f06:	3b01      	subs	r3, #1
 8004f08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f0a:	4b04      	ldr	r3, [pc, #16]	; (8004f1c <vPortSetupTimerInterrupt+0x34>)
 8004f0c:	2207      	movs	r2, #7
 8004f0e:	601a      	str	r2, [r3, #0]
}
 8004f10:	bf00      	nop
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	e000e010 	.word	0xe000e010
 8004f20:	e000e018 	.word	0xe000e018
 8004f24:	2000000c 	.word	0x2000000c
 8004f28:	10624dd3 	.word	0x10624dd3
 8004f2c:	e000e014 	.word	0xe000e014

08004f30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004f40 <vPortEnableVFP+0x10>
 8004f34:	6801      	ldr	r1, [r0, #0]
 8004f36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f3a:	6001      	str	r1, [r0, #0]
 8004f3c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f3e:	bf00      	nop
 8004f40:	e000ed88 	.word	0xe000ed88

08004f44 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b08a      	sub	sp, #40	; 0x28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f50:	f7ff f93c 	bl	80041cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f54:	4b57      	ldr	r3, [pc, #348]	; (80050b4 <pvPortMalloc+0x170>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d101      	bne.n	8004f60 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f5c:	f000 f90c 	bl	8005178 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f60:	4b55      	ldr	r3, [pc, #340]	; (80050b8 <pvPortMalloc+0x174>)
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4013      	ands	r3, r2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f040 808c 	bne.w	8005086 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d01c      	beq.n	8004fae <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004f74:	2208      	movs	r2, #8
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4413      	add	r3, r2
 8004f7a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f003 0307 	and.w	r3, r3, #7
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d013      	beq.n	8004fae <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f023 0307 	bic.w	r3, r3, #7
 8004f8c:	3308      	adds	r3, #8
 8004f8e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d009      	beq.n	8004fae <pvPortMalloc+0x6a>
	__asm volatile
 8004f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9e:	f383 8811 	msr	BASEPRI, r3
 8004fa2:	f3bf 8f6f 	isb	sy
 8004fa6:	f3bf 8f4f 	dsb	sy
 8004faa:	617b      	str	r3, [r7, #20]
 8004fac:	e7fe      	b.n	8004fac <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d068      	beq.n	8005086 <pvPortMalloc+0x142>
 8004fb4:	4b41      	ldr	r3, [pc, #260]	; (80050bc <pvPortMalloc+0x178>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d863      	bhi.n	8005086 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004fbe:	4b40      	ldr	r3, [pc, #256]	; (80050c0 <pvPortMalloc+0x17c>)
 8004fc0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004fc2:	4b3f      	ldr	r3, [pc, #252]	; (80050c0 <pvPortMalloc+0x17c>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fc8:	e004      	b.n	8004fd4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d903      	bls.n	8004fe6 <pvPortMalloc+0xa2>
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1f1      	bne.n	8004fca <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004fe6:	4b33      	ldr	r3, [pc, #204]	; (80050b4 <pvPortMalloc+0x170>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d04a      	beq.n	8005086 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2208      	movs	r2, #8
 8004ff6:	4413      	add	r3, r2
 8004ff8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	6a3b      	ldr	r3, [r7, #32]
 8005000:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	685a      	ldr	r2, [r3, #4]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	1ad2      	subs	r2, r2, r3
 800500a:	2308      	movs	r3, #8
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	429a      	cmp	r2, r3
 8005010:	d91e      	bls.n	8005050 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4413      	add	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	f003 0307 	and.w	r3, r3, #7
 8005020:	2b00      	cmp	r3, #0
 8005022:	d009      	beq.n	8005038 <pvPortMalloc+0xf4>
 8005024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005028:	f383 8811 	msr	BASEPRI, r3
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	613b      	str	r3, [r7, #16]
 8005036:	e7fe      	b.n	8005036 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	1ad2      	subs	r2, r2, r3
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800504a:	69b8      	ldr	r0, [r7, #24]
 800504c:	f000 f8f6 	bl	800523c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005050:	4b1a      	ldr	r3, [pc, #104]	; (80050bc <pvPortMalloc+0x178>)
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	4a18      	ldr	r2, [pc, #96]	; (80050bc <pvPortMalloc+0x178>)
 800505c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800505e:	4b17      	ldr	r3, [pc, #92]	; (80050bc <pvPortMalloc+0x178>)
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	4b18      	ldr	r3, [pc, #96]	; (80050c4 <pvPortMalloc+0x180>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	d203      	bcs.n	8005072 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800506a:	4b14      	ldr	r3, [pc, #80]	; (80050bc <pvPortMalloc+0x178>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a15      	ldr	r2, [pc, #84]	; (80050c4 <pvPortMalloc+0x180>)
 8005070:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005074:	685a      	ldr	r2, [r3, #4]
 8005076:	4b10      	ldr	r3, [pc, #64]	; (80050b8 <pvPortMalloc+0x174>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	431a      	orrs	r2, r3
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005082:	2200      	movs	r2, #0
 8005084:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005086:	f7ff f8af 	bl	80041e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	2b00      	cmp	r3, #0
 8005092:	d009      	beq.n	80050a8 <pvPortMalloc+0x164>
 8005094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005098:	f383 8811 	msr	BASEPRI, r3
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	e7fe      	b.n	80050a6 <pvPortMalloc+0x162>
	return pvReturn;
 80050a8:	69fb      	ldr	r3, [r7, #28]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3728      	adds	r7, #40	; 0x28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	20003dcc 	.word	0x20003dcc
 80050b8:	20003dd8 	.word	0x20003dd8
 80050bc:	20003dd0 	.word	0x20003dd0
 80050c0:	20003dc4 	.word	0x20003dc4
 80050c4:	20003dd4 	.word	0x20003dd4

080050c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d046      	beq.n	8005168 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80050da:	2308      	movs	r3, #8
 80050dc:	425b      	negs	r3, r3
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	4413      	add	r3, r2
 80050e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	4b20      	ldr	r3, [pc, #128]	; (8005170 <vPortFree+0xa8>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4013      	ands	r3, r2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d109      	bne.n	800510a <vPortFree+0x42>
 80050f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fa:	f383 8811 	msr	BASEPRI, r3
 80050fe:	f3bf 8f6f 	isb	sy
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	e7fe      	b.n	8005108 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d009      	beq.n	8005126 <vPortFree+0x5e>
 8005112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005116:	f383 8811 	msr	BASEPRI, r3
 800511a:	f3bf 8f6f 	isb	sy
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	60bb      	str	r3, [r7, #8]
 8005124:	e7fe      	b.n	8005124 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	4b11      	ldr	r3, [pc, #68]	; (8005170 <vPortFree+0xa8>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4013      	ands	r3, r2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d019      	beq.n	8005168 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d115      	bne.n	8005168 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	4b0b      	ldr	r3, [pc, #44]	; (8005170 <vPortFree+0xa8>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	43db      	mvns	r3, r3
 8005146:	401a      	ands	r2, r3
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800514c:	f7ff f83e 	bl	80041cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	4b07      	ldr	r3, [pc, #28]	; (8005174 <vPortFree+0xac>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4413      	add	r3, r2
 800515a:	4a06      	ldr	r2, [pc, #24]	; (8005174 <vPortFree+0xac>)
 800515c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800515e:	6938      	ldr	r0, [r7, #16]
 8005160:	f000 f86c 	bl	800523c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005164:	f7ff f840 	bl	80041e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005168:	bf00      	nop
 800516a:	3718      	adds	r7, #24
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	20003dd8 	.word	0x20003dd8
 8005174:	20003dd0 	.word	0x20003dd0

08005178 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800517e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005182:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005184:	4b27      	ldr	r3, [pc, #156]	; (8005224 <prvHeapInit+0xac>)
 8005186:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f003 0307 	and.w	r3, r3, #7
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00c      	beq.n	80051ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	3307      	adds	r3, #7
 8005196:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 0307 	bic.w	r3, r3, #7
 800519e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	4a1f      	ldr	r2, [pc, #124]	; (8005224 <prvHeapInit+0xac>)
 80051a8:	4413      	add	r3, r2
 80051aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051b0:	4a1d      	ldr	r2, [pc, #116]	; (8005228 <prvHeapInit+0xb0>)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80051b6:	4b1c      	ldr	r3, [pc, #112]	; (8005228 <prvHeapInit+0xb0>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	4413      	add	r3, r2
 80051c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80051c4:	2208      	movs	r2, #8
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	1a9b      	subs	r3, r3, r2
 80051ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f023 0307 	bic.w	r3, r3, #7
 80051d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4a15      	ldr	r2, [pc, #84]	; (800522c <prvHeapInit+0xb4>)
 80051d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80051da:	4b14      	ldr	r3, [pc, #80]	; (800522c <prvHeapInit+0xb4>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2200      	movs	r2, #0
 80051e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80051e2:	4b12      	ldr	r3, [pc, #72]	; (800522c <prvHeapInit+0xb4>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2200      	movs	r2, #0
 80051e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	1ad2      	subs	r2, r2, r3
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051f8:	4b0c      	ldr	r3, [pc, #48]	; (800522c <prvHeapInit+0xb4>)
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	4a0a      	ldr	r2, [pc, #40]	; (8005230 <prvHeapInit+0xb8>)
 8005206:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	4a09      	ldr	r2, [pc, #36]	; (8005234 <prvHeapInit+0xbc>)
 800520e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005210:	4b09      	ldr	r3, [pc, #36]	; (8005238 <prvHeapInit+0xc0>)
 8005212:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005216:	601a      	str	r2, [r3, #0]
}
 8005218:	bf00      	nop
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	200001c4 	.word	0x200001c4
 8005228:	20003dc4 	.word	0x20003dc4
 800522c:	20003dcc 	.word	0x20003dcc
 8005230:	20003dd4 	.word	0x20003dd4
 8005234:	20003dd0 	.word	0x20003dd0
 8005238:	20003dd8 	.word	0x20003dd8

0800523c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005244:	4b28      	ldr	r3, [pc, #160]	; (80052e8 <prvInsertBlockIntoFreeList+0xac>)
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	e002      	b.n	8005250 <prvInsertBlockIntoFreeList+0x14>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	429a      	cmp	r2, r3
 8005258:	d8f7      	bhi.n	800524a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	4413      	add	r3, r2
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	429a      	cmp	r2, r3
 800526a:	d108      	bne.n	800527e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	441a      	add	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	441a      	add	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	429a      	cmp	r2, r3
 8005290:	d118      	bne.n	80052c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	4b15      	ldr	r3, [pc, #84]	; (80052ec <prvInsertBlockIntoFreeList+0xb0>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	429a      	cmp	r2, r3
 800529c:	d00d      	beq.n	80052ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685a      	ldr	r2, [r3, #4]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	441a      	add	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	e008      	b.n	80052cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80052ba:	4b0c      	ldr	r3, [pc, #48]	; (80052ec <prvInsertBlockIntoFreeList+0xb0>)
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	e003      	b.n	80052cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d002      	beq.n	80052da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052da:	bf00      	nop
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	20003dc4 	.word	0x20003dc4
 80052ec:	20003dcc 	.word	0x20003dcc

080052f0 <MX_ADC1_Init>:

#include "adc.h"


void MX_ADC1_Init(void)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80052f6:	463b      	mov	r3, r7
 80052f8:	2200      	movs	r2, #0
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	605a      	str	r2, [r3, #4]
 80052fe:	609a      	str	r2, [r3, #8]
 8005300:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8005302:	4b21      	ldr	r3, [pc, #132]	; (8005388 <MX_ADC1_Init+0x98>)
 8005304:	4a21      	ldr	r2, [pc, #132]	; (800538c <MX_ADC1_Init+0x9c>)
 8005306:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005308:	4b1f      	ldr	r3, [pc, #124]	; (8005388 <MX_ADC1_Init+0x98>)
 800530a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800530e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005310:	4b1d      	ldr	r3, [pc, #116]	; (8005388 <MX_ADC1_Init+0x98>)
 8005312:	2200      	movs	r2, #0
 8005314:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8005316:	4b1c      	ldr	r3, [pc, #112]	; (8005388 <MX_ADC1_Init+0x98>)
 8005318:	2200      	movs	r2, #0
 800531a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800531c:	4b1a      	ldr	r3, [pc, #104]	; (8005388 <MX_ADC1_Init+0x98>)
 800531e:	2201      	movs	r2, #1
 8005320:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005322:	4b19      	ldr	r3, [pc, #100]	; (8005388 <MX_ADC1_Init+0x98>)
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800532a:	4b17      	ldr	r3, [pc, #92]	; (8005388 <MX_ADC1_Init+0x98>)
 800532c:	2200      	movs	r2, #0
 800532e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005330:	4b15      	ldr	r3, [pc, #84]	; (8005388 <MX_ADC1_Init+0x98>)
 8005332:	4a17      	ldr	r2, [pc, #92]	; (8005390 <MX_ADC1_Init+0xa0>)
 8005334:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005336:	4b14      	ldr	r3, [pc, #80]	; (8005388 <MX_ADC1_Init+0x98>)
 8005338:	2200      	movs	r2, #0
 800533a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800533c:	4b12      	ldr	r3, [pc, #72]	; (8005388 <MX_ADC1_Init+0x98>)
 800533e:	2201      	movs	r2, #1
 8005340:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005342:	4b11      	ldr	r3, [pc, #68]	; (8005388 <MX_ADC1_Init+0x98>)
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = EOC_SEQ_CONV;
 800534a:	4b0f      	ldr	r3, [pc, #60]	; (8005388 <MX_ADC1_Init+0x98>)
 800534c:	2200      	movs	r2, #0
 800534e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005350:	480d      	ldr	r0, [pc, #52]	; (8005388 <MX_ADC1_Init+0x98>)
 8005352:	f7fb faa7 	bl	80008a4 <HAL_ADC_Init>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800535c:	f001 fbec 	bl	8006b38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005360:	2301      	movs	r3, #1
 8005362:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005364:	2301      	movs	r3, #1
 8005366:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8005368:	2307      	movs	r3, #7
 800536a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800536c:	463b      	mov	r3, r7
 800536e:	4619      	mov	r1, r3
 8005370:	4805      	ldr	r0, [pc, #20]	; (8005388 <MX_ADC1_Init+0x98>)
 8005372:	f7fb fc13 	bl	8000b9c <HAL_ADC_ConfigChannel>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800537c:	f001 fbdc 	bl	8006b38 <Error_Handler>
  }

}
 8005380:	bf00      	nop
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	200040ac 	.word	0x200040ac
 800538c:	40012000 	.word	0x40012000
 8005390:	0f000001 	.word	0x0f000001

08005394 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b08a      	sub	sp, #40	; 0x28
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
	if (adcHandle->Instance == ADC1)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a1c      	ldr	r2, [pc, #112]	; (8005414 <HAL_ADC_MspInit+0x80>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d131      	bne.n	800540a <HAL_ADC_MspInit+0x76>
	{
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80053a6:	2300      	movs	r3, #0
 80053a8:	613b      	str	r3, [r7, #16]
 80053aa:	4b1b      	ldr	r3, [pc, #108]	; (8005418 <HAL_ADC_MspInit+0x84>)
 80053ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ae:	4a1a      	ldr	r2, [pc, #104]	; (8005418 <HAL_ADC_MspInit+0x84>)
 80053b0:	f043 0301 	orr.w	r3, r3, #1
 80053b4:	6313      	str	r3, [r2, #48]	; 0x30
 80053b6:	4b18      	ldr	r3, [pc, #96]	; (8005418 <HAL_ADC_MspInit+0x84>)
 80053b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	613b      	str	r3, [r7, #16]
 80053c0:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_ADC1_CLK_ENABLE();
 80053c2:	2300      	movs	r3, #0
 80053c4:	60fb      	str	r3, [r7, #12]
 80053c6:	4b14      	ldr	r3, [pc, #80]	; (8005418 <HAL_ADC_MspInit+0x84>)
 80053c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ca:	4a13      	ldr	r2, [pc, #76]	; (8005418 <HAL_ADC_MspInit+0x84>)
 80053cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053d0:	6453      	str	r3, [r2, #68]	; 0x44
 80053d2:	4b11      	ldr	r3, [pc, #68]	; (8005418 <HAL_ADC_MspInit+0x84>)
 80053d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053de:	f107 0314 	add.w	r3, r7, #20
 80053e2:	2200      	movs	r2, #0
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	605a      	str	r2, [r3, #4]
 80053e8:	609a      	str	r2, [r3, #8]
 80053ea:	60da      	str	r2, [r3, #12]
 80053ec:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct.Pin = GPIO_PIN_1;
 80053ee:	2302      	movs	r3, #2
 80053f0:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80053f2:	2303      	movs	r3, #3
 80053f4:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053f6:	2300      	movs	r3, #0
 80053f8:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053fa:	2300      	movs	r3, #0
 80053fc:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053fe:	f107 0314 	add.w	r3, r7, #20
 8005402:	4619      	mov	r1, r3
 8005404:	4805      	ldr	r0, [pc, #20]	; (800541c <HAL_ADC_MspInit+0x88>)
 8005406:	f7fb fecd 	bl	80011a4 <HAL_GPIO_Init>
	}
}
 800540a:	bf00      	nop
 800540c:	3728      	adds	r7, #40	; 0x28
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	40012000 	.word	0x40012000
 8005418:	40023800 	.word	0x40023800
 800541c:	40020000 	.word	0x40020000

08005420 <cli_init>:
#define NEW_LINE_VALUE			0xa

static char data_buffer[CFG_DATA_BUFFER_SIZE];

void cli_init(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
	memset(data_buffer, 0, CFG_DATA_BUFFER_SIZE);
 8005424:	2264      	movs	r2, #100	; 0x64
 8005426:	2100      	movs	r1, #0
 8005428:	4802      	ldr	r0, [pc, #8]	; (8005434 <cli_init+0x14>)
 800542a:	f001 fd7e 	bl	8006f2a <memset>
}
 800542e:	bf00      	nop
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	20003ddc 	.word	0x20003ddc

08005438 <cli_send_string>:

bool cli_send_string(const char* text)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
	if(text == NULL)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <cli_send_string+0x12>
		return false;
 8005446:	2300      	movs	r3, #0
 8005448:	e014      	b.n	8005474 <cli_send_string+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800544a:	b672      	cpsid	i

	__disable_irq();
	uint16_t len = strlen(text);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7fa fed1 	bl	80001f4 <strlen>
 8005452:	4603      	mov	r3, r0
 8005454:	81fb      	strh	r3, [r7, #14]

	if (HAL_UART_Transmit(&huart1, (uint8_t*)text, len, 1000) == HAL_OK)
 8005456:	89fa      	ldrh	r2, [r7, #14]
 8005458:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800545c:	6879      	ldr	r1, [r7, #4]
 800545e:	4807      	ldr	r0, [pc, #28]	; (800547c <cli_send_string+0x44>)
 8005460:	f7fd fc39 	bl	8002cd6 <HAL_UART_Transmit>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d102      	bne.n	8005470 <cli_send_string+0x38>
  __ASM volatile ("cpsie i" : : : "memory");
 800546a:	b662      	cpsie	i
	{
		__enable_irq();
		return true;
 800546c:	2301      	movs	r3, #1
 800546e:	e001      	b.n	8005474 <cli_send_string+0x3c>
 8005470:	b662      	cpsie	i
	}

	__enable_irq();

	return false;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	200040f4 	.word	0x200040f4

08005480 <cli_process>:

void cli_process(void)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
	uint8_t tmp;
	static uint16_t iterator = 0;
	 if (HAL_UART_Receive(&huart1, &tmp, 1, 5) == HAL_OK)
 8005486:	1df9      	adds	r1, r7, #7
 8005488:	2305      	movs	r3, #5
 800548a:	2201      	movs	r2, #1
 800548c:	4829      	ldr	r0, [pc, #164]	; (8005534 <cli_process+0xb4>)
 800548e:	f7fd fcab 	bl	8002de8 <HAL_UART_Receive>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d148      	bne.n	800552a <cli_process+0xaa>
	 {
		 /* If read symbol is backspace, delete previous character from buffer. */
		 if (tmp == NEW_LINE_VALUE)
 8005498:	79fb      	ldrb	r3, [r7, #7]
 800549a:	2b0a      	cmp	r3, #10
 800549c:	d111      	bne.n	80054c2 <cli_process+0x42>
		 {
			event_send(data_buffer);
 800549e:	4826      	ldr	r0, [pc, #152]	; (8005538 <cli_process+0xb8>)
 80054a0:	f001 f8c4 	bl	800662c <event_send>
			memset(data_buffer, 0, CFG_DATA_BUFFER_SIZE);
 80054a4:	2264      	movs	r2, #100	; 0x64
 80054a6:	2100      	movs	r1, #0
 80054a8:	4823      	ldr	r0, [pc, #140]	; (8005538 <cli_process+0xb8>)
 80054aa:	f001 fd3e 	bl	8006f2a <memset>
			iterator = 0;
 80054ae:	4b23      	ldr	r3, [pc, #140]	; (800553c <cli_process+0xbc>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, &tmp, 1, 5);
 80054b4:	1df9      	adds	r1, r7, #7
 80054b6:	2305      	movs	r3, #5
 80054b8:	2201      	movs	r2, #1
 80054ba:	481e      	ldr	r0, [pc, #120]	; (8005534 <cli_process+0xb4>)
 80054bc:	f7fd fc0b 	bl	8002cd6 <HAL_UART_Transmit>
				 iterator++;
				 HAL_UART_Transmit(&huart1, &tmp, 1, 5);
			 }
		 }
	 }
}
 80054c0:	e033      	b.n	800552a <cli_process+0xaa>
		 else if (tmp == BACKSPACE_VALUE)
 80054c2:	79fb      	ldrb	r3, [r7, #7]
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d116      	bne.n	80054f6 <cli_process+0x76>
			 HAL_UART_Transmit(&huart1, &tmp, 1, 5);
 80054c8:	1df9      	adds	r1, r7, #7
 80054ca:	2305      	movs	r3, #5
 80054cc:	2201      	movs	r2, #1
 80054ce:	4819      	ldr	r0, [pc, #100]	; (8005534 <cli_process+0xb4>)
 80054d0:	f7fd fc01 	bl	8002cd6 <HAL_UART_Transmit>
			if(strcmp(data_buffer,"") != 0)
 80054d4:	4b18      	ldr	r3, [pc, #96]	; (8005538 <cli_process+0xb8>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d026      	beq.n	800552a <cli_process+0xaa>
				iterator--;
 80054dc:	4b17      	ldr	r3, [pc, #92]	; (800553c <cli_process+0xbc>)
 80054de:	881b      	ldrh	r3, [r3, #0]
 80054e0:	3b01      	subs	r3, #1
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	4b15      	ldr	r3, [pc, #84]	; (800553c <cli_process+0xbc>)
 80054e6:	801a      	strh	r2, [r3, #0]
				data_buffer[iterator] = 0;
 80054e8:	4b14      	ldr	r3, [pc, #80]	; (800553c <cli_process+0xbc>)
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	461a      	mov	r2, r3
 80054ee:	4b12      	ldr	r3, [pc, #72]	; (8005538 <cli_process+0xb8>)
 80054f0:	2100      	movs	r1, #0
 80054f2:	5499      	strb	r1, [r3, r2]
}
 80054f4:	e019      	b.n	800552a <cli_process+0xaa>
			 if (iterator >= CFG_DATA_BUFFER_SIZE)
 80054f6:	4b11      	ldr	r3, [pc, #68]	; (800553c <cli_process+0xbc>)
 80054f8:	881b      	ldrh	r3, [r3, #0]
 80054fa:	2b63      	cmp	r3, #99	; 0x63
 80054fc:	d903      	bls.n	8005506 <cli_process+0x86>
				 cli_send_string("Buffer overflow!\n");
 80054fe:	4810      	ldr	r0, [pc, #64]	; (8005540 <cli_process+0xc0>)
 8005500:	f7ff ff9a 	bl	8005438 <cli_send_string>
}
 8005504:	e011      	b.n	800552a <cli_process+0xaa>
				 data_buffer[iterator] = tmp;
 8005506:	4b0d      	ldr	r3, [pc, #52]	; (800553c <cli_process+0xbc>)
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	461a      	mov	r2, r3
 800550c:	79f9      	ldrb	r1, [r7, #7]
 800550e:	4b0a      	ldr	r3, [pc, #40]	; (8005538 <cli_process+0xb8>)
 8005510:	5499      	strb	r1, [r3, r2]
				 iterator++;
 8005512:	4b0a      	ldr	r3, [pc, #40]	; (800553c <cli_process+0xbc>)
 8005514:	881b      	ldrh	r3, [r3, #0]
 8005516:	3301      	adds	r3, #1
 8005518:	b29a      	uxth	r2, r3
 800551a:	4b08      	ldr	r3, [pc, #32]	; (800553c <cli_process+0xbc>)
 800551c:	801a      	strh	r2, [r3, #0]
				 HAL_UART_Transmit(&huart1, &tmp, 1, 5);
 800551e:	1df9      	adds	r1, r7, #7
 8005520:	2305      	movs	r3, #5
 8005522:	2201      	movs	r2, #1
 8005524:	4803      	ldr	r0, [pc, #12]	; (8005534 <cli_process+0xb4>)
 8005526:	f7fd fbd6 	bl	8002cd6 <HAL_UART_Transmit>
}
 800552a:	bf00      	nop
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	200040f4 	.word	0x200040f4
 8005538:	20003ddc 	.word	0x20003ddc
 800553c:	20003e40 	.word	0x20003e40
 8005540:	080071c8 	.word	0x080071c8

08005544 <led_on_off>:
	struct float_bq78350 f;
	uint8_t bytes[sizeof(struct float_bq78350)];
};

static void led_on_off(void* args)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
	if (strcmp(args,"ON") == 0)
 800554c:	490f      	ldr	r1, [pc, #60]	; (800558c <led_on_off+0x48>)
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7fa fe46 	bl	80001e0 <strcmp>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d106      	bne.n	8005568 <led_on_off+0x24>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800555a:	2201      	movs	r2, #1
 800555c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005560:	480b      	ldr	r0, [pc, #44]	; (8005590 <led_on_off+0x4c>)
 8005562:	f7fb ffa1 	bl	80014a8 <HAL_GPIO_WritePin>
	}
	else if (strcmp(args,"OFF") == 0)
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
	}
}
 8005566:	e00c      	b.n	8005582 <led_on_off+0x3e>
	else if (strcmp(args,"OFF") == 0)
 8005568:	490a      	ldr	r1, [pc, #40]	; (8005594 <led_on_off+0x50>)
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7fa fe38 	bl	80001e0 <strcmp>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d105      	bne.n	8005582 <led_on_off+0x3e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8005576:	2200      	movs	r2, #0
 8005578:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800557c:	4804      	ldr	r0, [pc, #16]	; (8005590 <led_on_off+0x4c>)
 800557e:	f7fb ff93 	bl	80014a8 <HAL_GPIO_WritePin>
}
 8005582:	bf00      	nop
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	080071dc 	.word	0x080071dc
 8005590:	40020c00 	.word	0x40020c00
 8005594:	080071e0 	.word	0x080071e0

08005598 <read>:

static void read(void* args)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b0a6      	sub	sp, #152	; 0x98
 800559c:	af04      	add	r7, sp, #16
 800559e:	6078      	str	r0, [r7, #4]
	char tmp[7];
	char tmp2[3];
	char type[4];

	memset(tmp, 0, 7);
 80055a0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80055a4:	2207      	movs	r2, #7
 80055a6:	2100      	movs	r1, #0
 80055a8:	4618      	mov	r0, r3
 80055aa:	f001 fcbe 	bl	8006f2a <memset>
	memcpy(tmp, args, 6);
 80055ae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80055b2:	2206      	movs	r2, #6
 80055b4:	6879      	ldr	r1, [r7, #4]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f001 fcac 	bl	8006f14 <memcpy>
	uint16_t reg_addr = hex2int(tmp); /* TODO: check if that works properly */
 80055bc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80055c0:	4618      	mov	r0, r3
 80055c2:	f001 fbeb 	bl	8006d9c <hex2int>
 80055c6:	4603      	mov	r3, r0
 80055c8:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

	memcpy(tmp2, args + 7, 3);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	1dda      	adds	r2, r3, #7
 80055d0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80055d4:	8811      	ldrh	r1, [r2, #0]
 80055d6:	7892      	ldrb	r2, [r2, #2]
 80055d8:	8019      	strh	r1, [r3, #0]
 80055da:	709a      	strb	r2, [r3, #2]
	if (strstr(tmp2," ") != NULL)
 80055dc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80055e0:	2120      	movs	r1, #32
 80055e2:	4618      	mov	r0, r3
 80055e4:	f001 fd71 	bl	80070ca <strchr>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d002      	beq.n	80055f4 <read+0x5c>
		tmp2[2] = '\0';
 80055ee:	2300      	movs	r3, #0
 80055f0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

	uint16_t len = hex2int(tmp2);
 80055f4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80055f8:	4618      	mov	r0, r3
 80055fa:	f001 fbcf 	bl	8006d9c <hex2int>
 80055fe:	4603      	mov	r3, r0
 8005600:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

	memcpy(type, args + 10, 4);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	330a      	adds	r3, #10
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	673b      	str	r3, [r7, #112]	; 0x70

	uint8_t data[40];
	memset(data, 0, 40);
 800560c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005610:	2228      	movs	r2, #40	; 0x28
 8005612:	2100      	movs	r1, #0
 8005614:	4618      	mov	r0, r3
 8005616:	f001 fc88 	bl	8006f2a <memset>

	if (HAL_I2C_Mem_Read(&hi2c3, I2C_ADDRESS, reg_addr, 1, (uint8_t*)data, len, 1000) != HAL_OK)
 800561a:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 800561e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005622:	9302      	str	r3, [sp, #8]
 8005624:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8005628:	9301      	str	r3, [sp, #4]
 800562a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	2301      	movs	r3, #1
 8005632:	2116      	movs	r1, #22
 8005634:	484b      	ldr	r0, [pc, #300]	; (8005764 <read+0x1cc>)
 8005636:	f7fc f973 	bl	8001920 <HAL_I2C_Mem_Read>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d003      	beq.n	8005648 <read+0xb0>
	{
		cli_send_string("[I2C] Read ERROR \n\r");
 8005640:	4849      	ldr	r0, [pc, #292]	; (8005768 <read+0x1d0>)
 8005642:	f7ff fef9 	bl	8005438 <cli_send_string>
 8005646:	e08a      	b.n	800575e <read+0x1c6>
		return;
	}

	memcpy((uint8_t *)args, data, len);
 8005648:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 800564c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005650:	4619      	mov	r1, r3
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f001 fc5e 	bl	8006f14 <memcpy>

	if (strstr(type, "int") != NULL)
 8005658:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800565c:	4943      	ldr	r1, [pc, #268]	; (800576c <read+0x1d4>)
 800565e:	4618      	mov	r0, r3
 8005660:	f001 fd48 	bl	80070f4 <strstr>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d05b      	beq.n	8005722 <read+0x18a>
	{
		char tmp_string[60];

		memset(tmp_string, 0, 60);
 800566a:	f107 0308 	add.w	r3, r7, #8
 800566e:	223c      	movs	r2, #60	; 0x3c
 8005670:	2100      	movs	r1, #0
 8005672:	4618      	mov	r0, r3
 8005674:	f001 fc59 	bl	8006f2a <memset>

		uint8_t iterator = 0;
 8005678:	2300      	movs	r3, #0
 800567a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		for (uint8_t i = 0; i < len; i++)
 800567e:	2300      	movs	r3, #0
 8005680:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8005684:	e034      	b.n	80056f0 <read+0x158>
		{
			char c[sizeof(int)];
			itoa(data[i], c, 16);
 8005686:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800568a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800568e:	4413      	add	r3, r2
 8005690:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8005694:	4618      	mov	r0, r3
 8005696:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800569a:	2210      	movs	r2, #16
 800569c:	4619      	mov	r1, r3
 800569e:	f001 fc27 	bl	8006ef0 <itoa>
			strcpy(tmp_string + iterator, c);
 80056a2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80056a6:	f107 0208 	add.w	r2, r7, #8
 80056aa:	4413      	add	r3, r2
 80056ac:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80056b0:	4611      	mov	r1, r2
 80056b2:	4618      	mov	r0, r3
 80056b4:	f001 fd16 	bl	80070e4 <strcpy>

			iterator += strlen(c) + 1;
 80056b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80056bc:	4618      	mov	r0, r3
 80056be:	f7fa fd99 	bl	80001f4 <strlen>
 80056c2:	4603      	mov	r3, r0
 80056c4:	b2da      	uxtb	r2, r3
 80056c6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80056ca:	4413      	add	r3, r2
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	3301      	adds	r3, #1
 80056d0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			tmp_string[iterator - 1] = ' ';
 80056d4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80056d8:	3b01      	subs	r3, #1
 80056da:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80056de:	4413      	add	r3, r2
 80056e0:	2220      	movs	r2, #32
 80056e2:	f803 2c80 	strb.w	r2, [r3, #-128]
		for (uint8_t i = 0; i < len; i++)
 80056e6:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80056ea:	3301      	adds	r3, #1
 80056ec:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80056f0:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d8c3      	bhi.n	8005686 <read+0xee>
		}
		tmp_string[strlen(tmp_string)] = '\n';
 80056fe:	f107 0308 	add.w	r3, r7, #8
 8005702:	4618      	mov	r0, r3
 8005704:	f7fa fd76 	bl	80001f4 <strlen>
 8005708:	4603      	mov	r3, r0
 800570a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800570e:	4413      	add	r3, r2
 8005710:	220a      	movs	r2, #10
 8005712:	f803 2c80 	strb.w	r2, [r3, #-128]
		cli_send_string(tmp_string);
 8005716:	f107 0308 	add.w	r3, r7, #8
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff fe8c 	bl	8005438 <cli_send_string>
 8005720:	e01d      	b.n	800575e <read+0x1c6>
	}
	else if (strstr(type, "char") != NULL)
 8005722:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005726:	4912      	ldr	r1, [pc, #72]	; (8005770 <read+0x1d8>)
 8005728:	4618      	mov	r0, r3
 800572a:	f001 fce3 	bl	80070f4 <strstr>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d011      	beq.n	8005758 <read+0x1c0>
	{
		data[strlen((char*)data)] = '\n';
 8005734:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005738:	4618      	mov	r0, r3
 800573a:	f7fa fd5b 	bl	80001f4 <strlen>
 800573e:	4603      	mov	r3, r0
 8005740:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005744:	4413      	add	r3, r2
 8005746:	220a      	movs	r2, #10
 8005748:	f803 2c40 	strb.w	r2, [r3, #-64]
		cli_send_string((char*)data);
 800574c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff fe71 	bl	8005438 <cli_send_string>
 8005756:	e002      	b.n	800575e <read+0x1c6>
	}
	else
	{
		cli_send_string("Unknown type!\n\r");
 8005758:	4806      	ldr	r0, [pc, #24]	; (8005774 <read+0x1dc>)
 800575a:	f7ff fe6d 	bl	8005438 <cli_send_string>
	}
}
 800575e:	3788      	adds	r7, #136	; 0x88
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	20004134 	.word	0x20004134
 8005768:	080071e4 	.word	0x080071e4
 800576c:	080071f8 	.word	0x080071f8
 8005770:	080071fc 	.word	0x080071fc
 8005774:	08007204 	.word	0x08007204

08005778 <write>:

static void write(void* args)
{
 8005778:	b590      	push	{r4, r7, lr}
 800577a:	b0b9      	sub	sp, #228	; 0xe4
 800577c:	af04      	add	r7, sp, #16
 800577e:	6078      	str	r0, [r7, #4]

	char reg_str[7];
	memset(reg_str, 0, 7);
 8005780:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005784:	2207      	movs	r2, #7
 8005786:	2100      	movs	r1, #0
 8005788:	4618      	mov	r0, r3
 800578a:	f001 fbce 	bl	8006f2a <memset>
	memcpy(reg_str, args, 6);
 800578e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005792:	2206      	movs	r2, #6
 8005794:	6879      	ldr	r1, [r7, #4]
 8005796:	4618      	mov	r0, r3
 8005798:	f001 fbbc 	bl	8006f14 <memcpy>
	uint16_t reg_addr = hex2int(reg_str); /* TODO: check if that works properly */
 800579c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80057a0:	4618      	mov	r0, r3
 80057a2:	f001 fafb 	bl	8006d9c <hex2int>
 80057a6:	4603      	mov	r3, r0
 80057a8:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc

	char data[90];
	memset(data, 0, 90);
 80057ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80057b0:	225a      	movs	r2, #90	; 0x5a
 80057b2:	2100      	movs	r1, #0
 80057b4:	4618      	mov	r0, r3
 80057b6:	f001 fbb8 	bl	8006f2a <memset>
	memcpy(data, args + 7, strlen(args));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	1ddc      	adds	r4, r3, #7
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f7fa fd18 	bl	80001f4 <strlen>
 80057c4:	4602      	mov	r2, r0
 80057c6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80057ca:	4621      	mov	r1, r4
 80057cc:	4618      	mov	r0, r3
 80057ce:	f001 fba1 	bl	8006f14 <memcpy>


	uint8_t hex_data[50];
	memset(hex_data, 0, 50);
 80057d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80057d6:	2232      	movs	r2, #50	; 0x32
 80057d8:	2100      	movs	r1, #0
 80057da:	4618      	mov	r0, r3
 80057dc:	f001 fba5 	bl	8006f2a <memset>

	char str_tmp [40];
	itoa(strlen(data) / 2, str_tmp, 10);
 80057e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7fa fd05 	bl	80001f4 <strlen>
 80057ea:	4603      	mov	r3, r0
 80057ec:	085b      	lsrs	r3, r3, #1
 80057ee:	4618      	mov	r0, r3
 80057f0:	f107 030c 	add.w	r3, r7, #12
 80057f4:	220a      	movs	r2, #10
 80057f6:	4619      	mov	r1, r3
 80057f8:	f001 fb7a 	bl	8006ef0 <itoa>
	str_tmp[strlen(str_tmp)] = '\n';
 80057fc:	f107 030c 	add.w	r3, r7, #12
 8005800:	4618      	mov	r0, r3
 8005802:	f7fa fcf7 	bl	80001f4 <strlen>
 8005806:	4603      	mov	r3, r0
 8005808:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800580c:	4413      	add	r3, r2
 800580e:	220a      	movs	r2, #10
 8005810:	f803 2cc4 	strb.w	r2, [r3, #-196]
	cli_send_string(str_tmp);
 8005814:	f107 030c 	add.w	r3, r7, #12
 8005818:	4618      	mov	r0, r3
 800581a:	f7ff fe0d 	bl	8005438 <cli_send_string>

	for (uint16_t i = 0; i < strlen(data) / 2; i++)
 800581e:	2300      	movs	r3, #0
 8005820:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 8005824:	e025      	b.n	8005872 <write+0xfa>
	{
		char hex_string[2];
		hex_string[0] = data[2 * i];
 8005826:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800582a:	005b      	lsls	r3, r3, #1
 800582c:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8005830:	4413      	add	r3, r2
 8005832:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8005836:	723b      	strb	r3, [r7, #8]
		hex_string[1] = data[2 * i + 1];
 8005838:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800583c:	005b      	lsls	r3, r3, #1
 800583e:	3301      	adds	r3, #1
 8005840:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8005844:	4413      	add	r3, r2
 8005846:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800584a:	727b      	strb	r3, [r7, #9]
		hex_data[i] = hex2int(hex_string);
 800584c:	f107 0308 	add.w	r3, r7, #8
 8005850:	4618      	mov	r0, r3
 8005852:	f001 faa3 	bl	8006d9c <hex2int>
 8005856:	4602      	mov	r2, r0
 8005858:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800585c:	b2d2      	uxtb	r2, r2
 800585e:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8005862:	440b      	add	r3, r1
 8005864:	f803 2c9c 	strb.w	r2, [r3, #-156]
	for (uint16_t i = 0; i < strlen(data) / 2; i++)
 8005868:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800586c:	3301      	adds	r3, #1
 800586e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 8005872:	f8b7 40ce 	ldrh.w	r4, [r7, #206]	; 0xce
 8005876:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800587a:	4618      	mov	r0, r3
 800587c:	f7fa fcba 	bl	80001f4 <strlen>
 8005880:	4603      	mov	r3, r0
 8005882:	085b      	lsrs	r3, r3, #1
 8005884:	429c      	cmp	r4, r3
 8005886:	d3ce      	bcc.n	8005826 <write+0xae>
	}
	HAL_StatusTypeDef hal_status = HAL_I2C_Mem_Write(&hi2c3, I2C_ADDRESS, reg_addr, 1, hex_data, strlen(data) / 2, 100000);
 8005888:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800588c:	4618      	mov	r0, r3
 800588e:	f7fa fcb1 	bl	80001f4 <strlen>
 8005892:	4603      	mov	r3, r0
 8005894:	085b      	lsrs	r3, r3, #1
 8005896:	b29b      	uxth	r3, r3
 8005898:	f8b7 10cc 	ldrh.w	r1, [r7, #204]	; 0xcc
 800589c:	4a0c      	ldr	r2, [pc, #48]	; (80058d0 <write+0x158>)
 800589e:	9202      	str	r2, [sp, #8]
 80058a0:	9301      	str	r3, [sp, #4]
 80058a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	2301      	movs	r3, #1
 80058aa:	460a      	mov	r2, r1
 80058ac:	2116      	movs	r1, #22
 80058ae:	4809      	ldr	r0, [pc, #36]	; (80058d4 <write+0x15c>)
 80058b0:	f7fb ff3c 	bl	800172c <HAL_I2C_Mem_Write>
 80058b4:	4603      	mov	r3, r0
 80058b6:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb

	if( hal_status != HAL_OK)
 80058ba:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <write+0x150>
		cli_send_string("I2C data send ERROR \n\r");
 80058c2:	4805      	ldr	r0, [pc, #20]	; (80058d8 <write+0x160>)
 80058c4:	f7ff fdb8 	bl	8005438 <cli_send_string>
}
 80058c8:	bf00      	nop
 80058ca:	37d4      	adds	r7, #212	; 0xd4
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd90      	pop	{r4, r7, pc}
 80058d0:	000186a0 	.word	0x000186a0
 80058d4:	20004134 	.word	0x20004134
 80058d8:	08007214 	.word	0x08007214

080058dc <adc_fun>:

static void adc_fun(void* args)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b08a      	sub	sp, #40	; 0x28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
    uint16_t ADCValue;


    HAL_ADC_Start(&hadc1);
 80058e4:	4841      	ldr	r0, [pc, #260]	; (80059ec <adc_fun+0x110>)
 80058e6:	f7fb f821 	bl	800092c <HAL_ADC_Start>
    vTaskDelay(2000);
 80058ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80058ee:	f7fe fbdb 	bl	80040a8 <vTaskDelay>
    float average_voltage = 0;
 80058f2:	f04f 0300 	mov.w	r3, #0
 80058f6:	627b      	str	r3, [r7, #36]	; 0x24

    for(uint8_t i = 0; i < 100; i++)
 80058f8:	2300      	movs	r3, #0
 80058fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058fe:	e038      	b.n	8005972 <adc_fun+0x96>
    {
    	TickType_t start = xTaskGetTickCount();
 8005900:	f7fe fd0e 	bl	8004320 <xTaskGetTickCount>
 8005904:	4603      	mov	r3, r0
 8005906:	60fb      	str	r3, [r7, #12]
    	if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8005908:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800590c:	4837      	ldr	r0, [pc, #220]	; (80059ec <adc_fun+0x110>)
 800590e:	f7fb f8b3 	bl	8000a78 <HAL_ADC_PollForConversion>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <adc_fun+0x42>
    		cli_send_string("ADC conversion error!\n\r");
 8005918:	4835      	ldr	r0, [pc, #212]	; (80059f0 <adc_fun+0x114>)
 800591a:	f7ff fd8d 	bl	8005438 <cli_send_string>
        ADCValue = HAL_ADC_GetValue(&hadc1);
 800591e:	4833      	ldr	r0, [pc, #204]	; (80059ec <adc_fun+0x110>)
 8005920:	f7fb f92e 	bl	8000b80 <HAL_ADC_GetValue>
 8005924:	4603      	mov	r3, r0
 8005926:	83fb      	strh	r3, [r7, #30]
        float voltage = ADCValue * ADC_REFERENCE_VOLTAGE / 4095;
 8005928:	8bfb      	ldrh	r3, [r7, #30]
 800592a:	f640 3299 	movw	r2, #2969	; 0xb99
 800592e:	fb02 f303 	mul.w	r3, r2, r3
 8005932:	4a30      	ldr	r2, [pc, #192]	; (80059f4 <adc_fun+0x118>)
 8005934:	fb82 1203 	smull	r1, r2, r2, r3
 8005938:	441a      	add	r2, r3
 800593a:	12d2      	asrs	r2, r2, #11
 800593c:	17db      	asrs	r3, r3, #31
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	ee07 3a90 	vmov	s15, r3
 8005944:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005948:	edc7 7a06 	vstr	s15, [r7, #24]
        average_voltage += voltage;
 800594c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005950:	edd7 7a06 	vldr	s15, [r7, #24]
 8005954:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005958:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        vTaskDelayUntil(&start, 20);
 800595c:	f107 030c 	add.w	r3, r7, #12
 8005960:	2114      	movs	r1, #20
 8005962:	4618      	mov	r0, r3
 8005964:	f7fe fb26 	bl	8003fb4 <vTaskDelayUntil>
    for(uint8_t i = 0; i < 100; i++)
 8005968:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800596c:	3301      	adds	r3, #1
 800596e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005972:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005976:	2b63      	cmp	r3, #99	; 0x63
 8005978:	d9c2      	bls.n	8005900 <adc_fun+0x24>
    }

    average_voltage /= 100;
 800597a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800597e:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80059f8 <adc_fun+0x11c>
 8005982:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005986:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    average_voltage -= ADC_OFFSET;
 800598a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800598e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005992:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005996:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    uint16_t int_voltage = average_voltage;
 800599a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800599e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059a2:	ee17 3a90 	vmov	r3, s15
 80059a6:	843b      	strh	r3, [r7, #32]
//    if(average_voltage - int_voltage > 0.5f)
//    	int_voltage++;

    *(float *)args = average_voltage;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ac:	601a      	str	r2, [r3, #0]
    char tmp[6];

    itoa(int_voltage, tmp, 10);
 80059ae:	8c3b      	ldrh	r3, [r7, #32]
 80059b0:	f107 0110 	add.w	r1, r7, #16
 80059b4:	220a      	movs	r2, #10
 80059b6:	4618      	mov	r0, r3
 80059b8:	f001 fa9a 	bl	8006ef0 <itoa>
    strcat(tmp, "\n\r");
 80059bc:	f107 0310 	add.w	r3, r7, #16
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7fa fc17 	bl	80001f4 <strlen>
 80059c6:	4603      	mov	r3, r0
 80059c8:	461a      	mov	r2, r3
 80059ca:	f107 0310 	add.w	r3, r7, #16
 80059ce:	4413      	add	r3, r2
 80059d0:	4a0a      	ldr	r2, [pc, #40]	; (80059fc <adc_fun+0x120>)
 80059d2:	8811      	ldrh	r1, [r2, #0]
 80059d4:	7892      	ldrb	r2, [r2, #2]
 80059d6:	8019      	strh	r1, [r3, #0]
 80059d8:	709a      	strb	r2, [r3, #2]
    cli_send_string(tmp);
 80059da:	f107 0310 	add.w	r3, r7, #16
 80059de:	4618      	mov	r0, r3
 80059e0:	f7ff fd2a 	bl	8005438 <cli_send_string>

}
 80059e4:	bf00      	nop
 80059e6:	3728      	adds	r7, #40	; 0x28
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	200040ac 	.word	0x200040ac
 80059f0:	0800722c 	.word	0x0800722c
 80059f4:	80080081 	.word	0x80080081
 80059f8:	42c80000 	.word	0x42c80000
 80059fc:	08007244 	.word	0x08007244

08005a00 <volt_cal>:

static void volt_cal(void* args)
{
 8005a00:	b590      	push	{r4, r7, lr}
 8005a02:	b0b9      	sub	sp, #228	; 0xe4
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
	write("0x0000 2d00");
 8005a08:	48ca      	ldr	r0, [pc, #808]	; (8005d34 <volt_cal+0x334>)
 8005a0a:	f7ff feb5 	bl	8005778 <write>
	write("0x0000 81f0");
 8005a0e:	48ca      	ldr	r0, [pc, #808]	; (8005d38 <volt_cal+0x338>)
 8005a10:	f7ff feb2 	bl	8005778 <write>

	uint8_t prev_counter = 0;
 8005a14:	2300      	movs	r3, #0
 8005a16:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
	while(true)
	{
		char data[33] = "0x0023 02 int";
 8005a1a:	4bc8      	ldr	r3, [pc, #800]	; (8005d3c <volt_cal+0x33c>)
 8005a1c:	f107 040c 	add.w	r4, r7, #12
 8005a20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a22:	c407      	stmia	r4!, {r0, r1, r2}
 8005a24:	8023      	strh	r3, [r4, #0]
 8005a26:	f107 031a 	add.w	r3, r7, #26
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	601a      	str	r2, [r3, #0]
 8005a2e:	605a      	str	r2, [r3, #4]
 8005a30:	609a      	str	r2, [r3, #8]
 8005a32:	60da      	str	r2, [r3, #12]
 8005a34:	f8c3 200f 	str.w	r2, [r3, #15]
		read(data);
 8005a38:	f107 030c 	add.w	r3, r7, #12
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7ff fdab 	bl	8005598 <read>

		uint8_t counter = (uint8_t)(data[1]);
 8005a42:	7b7b      	ldrb	r3, [r7, #13]
 8005a44:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
		if (prev_counter == 0)
 8005a48:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d102      	bne.n	8005a56 <volt_cal+0x56>
			prev_counter = (uint8_t)(data[1]);
 8005a50:	7b7b      	ldrb	r3, [r7, #13]
 8005a52:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

		if (counter - prev_counter > 2)
 8005a56:	f897 20d7 	ldrb.w	r2, [r7, #215]	; 0xd7
 8005a5a:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	ddda      	ble.n	8005a1a <volt_cal+0x1a>
		{
			cli_send_string("counter increments by 2 \n\r");
 8005a64:	48b6      	ldr	r0, [pc, #728]	; (8005d40 <volt_cal+0x340>)
 8005a66:	f7ff fce7 	bl	8005438 <cli_send_string>
			break;
		}
	}

	uint8_t measurement_counter = 0;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
	prev_counter = 0;
 8005a70:	2300      	movs	r3, #0
 8005a72:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

	uint16_t cell_voltage_measurements[NUMBER_OF_CELLS][AVERAGE_VOLTAGE_CAL_NUM_OF_SAMPLE];

	while(true)
	{
		if (measurement_counter >= AVERAGE_VOLTAGE_CAL_NUM_OF_SAMPLE)
 8005a76:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8005a7a:	2b09      	cmp	r3, #9
 8005a7c:	d903      	bls.n	8005a86 <volt_cal+0x86>
			}
			measurement_counter ++;
		}
	}
	uint32_t cells_voltage_average[NUMBER_OF_CELLS];
	for(uint8_t i = 0; i < NUMBER_OF_CELLS; i++)
 8005a7e:	2300      	movs	r3, #0
 8005a80:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 8005a84:	e0aa      	b.n	8005bdc <volt_cal+0x1dc>
		char data[33] = "0x0023 0D int";
 8005a86:	4baf      	ldr	r3, [pc, #700]	; (8005d44 <volt_cal+0x344>)
 8005a88:	f107 040c 	add.w	r4, r7, #12
 8005a8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a8e:	c407      	stmia	r4!, {r0, r1, r2}
 8005a90:	8023      	strh	r3, [r4, #0]
 8005a92:	f107 031a 	add.w	r3, r7, #26
 8005a96:	2200      	movs	r2, #0
 8005a98:	601a      	str	r2, [r3, #0]
 8005a9a:	605a      	str	r2, [r3, #4]
 8005a9c:	609a      	str	r2, [r3, #8]
 8005a9e:	60da      	str	r2, [r3, #12]
 8005aa0:	f8c3 200f 	str.w	r2, [r3, #15]
		read(data);
 8005aa4:	f107 030c 	add.w	r3, r7, #12
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7ff fd75 	bl	8005598 <read>
		uint8_t counter = (uint8_t)(data[1]);
 8005aae:	7b7b      	ldrb	r3, [r7, #13]
 8005ab0:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
		if (prev_counter == 0)
 8005ab4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d102      	bne.n	8005ac2 <volt_cal+0xc2>
			prev_counter = (uint8_t)(data[1]);
 8005abc:	7b7b      	ldrb	r3, [r7, #13]
 8005abe:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
		if (counter - prev_counter >= 1)
 8005ac2:	f897 20d6 	ldrb.w	r2, [r7, #214]	; 0xd6
 8005ac6:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	ddd2      	ble.n	8005a76 <volt_cal+0x76>
			prev_counter = counter;
 8005ad0:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8005ad4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
			for(uint8_t j = 0; j < NUMBER_OF_CELLS; j++)
 8005ad8:	2300      	movs	r3, #0
 8005ada:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
 8005ade:	e02c      	b.n	8005b3a <volt_cal+0x13a>
				cell_voltage_measurements[j][measurement_counter] = (uint8_t)(data[j * 2 + 5]) + 256 * (uint8_t)(data[j * 2 + 6]);
 8005ae0:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	3305      	adds	r3, #5
 8005ae8:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8005aec:	4413      	add	r3, r2
 8005aee:	f813 3cd4 	ldrb.w	r3, [r3, #-212]
 8005af2:	b298      	uxth	r0, r3
 8005af4:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8005af8:	3303      	adds	r3, #3
 8005afa:	005b      	lsls	r3, r3, #1
 8005afc:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8005b00:	4413      	add	r3, r2
 8005b02:	f813 3cd4 	ldrb.w	r3, [r3, #-212]
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	021b      	lsls	r3, r3, #8
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	f897 20dd 	ldrb.w	r2, [r7, #221]	; 0xdd
 8005b10:	f897 10de 	ldrb.w	r1, [r7, #222]	; 0xde
 8005b14:	4403      	add	r3, r0
 8005b16:	b298      	uxth	r0, r3
 8005b18:	4613      	mov	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	005b      	lsls	r3, r3, #1
 8005b20:	440b      	add	r3, r1
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8005b28:	4413      	add	r3, r2
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	f823 2c60 	strh.w	r2, [r3, #-96]
			for(uint8_t j = 0; j < NUMBER_OF_CELLS; j++)
 8005b30:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8005b34:	3301      	adds	r3, #1
 8005b36:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
 8005b3a:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8005b3e:	2b03      	cmp	r3, #3
 8005b40:	d9ce      	bls.n	8005ae0 <volt_cal+0xe0>
			measurement_counter ++;
 8005b42:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8005b46:	3301      	adds	r3, #1
 8005b48:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
	{
 8005b4c:	e793      	b.n	8005a76 <volt_cal+0x76>
	{
		for(uint8_t j = 0; j < AVERAGE_VOLTAGE_CAL_NUM_OF_SAMPLE; j++)
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 8005b54:	e025      	b.n	8005ba2 <volt_cal+0x1a2>
			cells_voltage_average[i] +=  cell_voltage_measurements[i][j];
 8005b56:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8005b60:	4413      	add	r3, r2
 8005b62:	f853 1c70 	ldr.w	r1, [r3, #-112]
 8005b66:	f897 20dc 	ldrb.w	r2, [r7, #220]	; 0xdc
 8005b6a:	f897 00db 	ldrb.w	r0, [r7, #219]	; 0xdb
 8005b6e:	4613      	mov	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	005b      	lsls	r3, r3, #1
 8005b76:	4403      	add	r3, r0
 8005b78:	005b      	lsls	r3, r3, #1
 8005b7a:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8005b7e:	4413      	add	r3, r2
 8005b80:	f833 3c60 	ldrh.w	r3, [r3, #-96]
 8005b84:	461a      	mov	r2, r3
 8005b86:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8005b8a:	440a      	add	r2, r1
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8005b92:	440b      	add	r3, r1
 8005b94:	f843 2c70 	str.w	r2, [r3, #-112]
		for(uint8_t j = 0; j < AVERAGE_VOLTAGE_CAL_NUM_OF_SAMPLE; j++)
 8005b98:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 8005ba2:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005ba6:	2b09      	cmp	r3, #9
 8005ba8:	d9d5      	bls.n	8005b56 <volt_cal+0x156>

		cells_voltage_average[i] /= AVERAGE_VOLTAGE_CAL_NUM_OF_SAMPLE;
 8005baa:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f853 2c70 	ldr.w	r2, [r3, #-112]
 8005bba:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8005bbe:	4962      	ldr	r1, [pc, #392]	; (8005d48 <volt_cal+0x348>)
 8005bc0:	fba1 1202 	umull	r1, r2, r1, r2
 8005bc4:	08d2      	lsrs	r2, r2, #3
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8005bcc:	440b      	add	r3, r1
 8005bce:	f843 2c70 	str.w	r2, [r3, #-112]
	for(uint8_t i = 0; i < NUMBER_OF_CELLS; i++)
 8005bd2:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 8005bdc:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8005be0:	2b03      	cmp	r3, #3
 8005be2:	d9b4      	bls.n	8005b4e <volt_cal+0x14e>
	}

	int8_t cells_voltage_offset[NUMBER_OF_CELLS];
	bool overflow = false;
 8005be4:	2300      	movs	r3, #0
 8005be6:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda

	for(uint8_t i = 0; i < NUMBER_OF_CELLS; i++)
 8005bea:	2300      	movs	r3, #0
 8005bec:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
 8005bf0:	e026      	b.n	8005c40 <volt_cal+0x240>
	{
		uint16_t tmp_offset = REFERENCE_VOLTAGE - cells_voltage_average[i];
 8005bf2:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8005c08:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
		if (tmp_offset > 0xFF)
 8005c0c:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8005c10:	2bff      	cmp	r3, #255	; 0xff
 8005c12:	d906      	bls.n	8005c22 <volt_cal+0x222>
		{
			cli_send_string("OFFSET IS TOO BIG\n");
 8005c14:	484d      	ldr	r0, [pc, #308]	; (8005d4c <volt_cal+0x34c>)
 8005c16:	f7ff fc0f 	bl	8005438 <cli_send_string>
			overflow = true;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 8005c20:	e009      	b.n	8005c36 <volt_cal+0x236>
		}
		else
		{
			cells_voltage_offset[i] = (int8_t)tmp_offset;
 8005c22:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8005c26:	f8b7 20d2 	ldrh.w	r2, [r7, #210]	; 0xd2
 8005c2a:	b252      	sxtb	r2, r2
 8005c2c:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8005c30:	440b      	add	r3, r1
 8005c32:	f803 2c74 	strb.w	r2, [r3, #-116]
	for(uint8_t i = 0; i < NUMBER_OF_CELLS; i++)
 8005c36:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
 8005c40:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8005c44:	2b03      	cmp	r3, #3
 8005c46:	d9d4      	bls.n	8005bf2 <volt_cal+0x1f2>
		}
	}

	if (!overflow)
 8005c48:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8005c4c:	f083 0301 	eor.w	r3, r3, #1
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d033      	beq.n	8005cbe <volt_cal+0x2be>
	{
		char offsets[22] = "0x0044 06c040";
 8005c56:	4b3e      	ldr	r3, [pc, #248]	; (8005d50 <volt_cal+0x350>)
 8005c58:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8005c5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005c5e:	c407      	stmia	r4!, {r0, r1, r2}
 8005c60:	8023      	strh	r3, [r4, #0]
 8005c62:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8005c66:	2200      	movs	r2, #0
 8005c68:	601a      	str	r2, [r3, #0]
 8005c6a:	605a      	str	r2, [r3, #4]
		offsets[21] = 0;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		for(uint8_t i = 0; i < NUMBER_OF_CELLS; i++)
 8005c72:	2300      	movs	r3, #0
 8005c74:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
 8005c78:	e018      	b.n	8005cac <volt_cal+0x2ac>
			itoa((uint8_t)cells_voltage_offset[i], offsets + 13 + i*2, 16);
 8005c7a:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8005c7e:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8005c82:	4413      	add	r3, r2
 8005c84:	f913 3c74 	ldrsb.w	r3, [r3, #-116]
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8005c90:	005b      	lsls	r3, r3, #1
 8005c92:	330d      	adds	r3, #13
 8005c94:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005c98:	4413      	add	r3, r2
 8005c9a:	2210      	movs	r2, #16
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	f001 f927 	bl	8006ef0 <itoa>
		for(uint8_t i = 0; i < NUMBER_OF_CELLS; i++)
 8005ca2:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
 8005cac:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8005cb0:	2b03      	cmp	r3, #3
 8005cb2:	d9e2      	bls.n	8005c7a <volt_cal+0x27a>
		write(offsets);
 8005cb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7ff fd5d 	bl	8005778 <write>
	}

	write("0x0000 2d00");
 8005cbe:	481d      	ldr	r0, [pc, #116]	; (8005d34 <volt_cal+0x334>)
 8005cc0:	f7ff fd5a 	bl	8005778 <write>

	char voltage[33] = "0x0009 02 int";
 8005cc4:	4b23      	ldr	r3, [pc, #140]	; (8005d54 <volt_cal+0x354>)
 8005cc6:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8005cca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ccc:	c407      	stmia	r4!, {r0, r1, r2}
 8005cce:	8023      	strh	r3, [r4, #0]
 8005cd0:	f107 0356 	add.w	r3, r7, #86	; 0x56
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	601a      	str	r2, [r3, #0]
 8005cd8:	605a      	str	r2, [r3, #4]
 8005cda:	609a      	str	r2, [r3, #8]
 8005cdc:	60da      	str	r2, [r3, #12]
 8005cde:	f8c3 200f 	str.w	r2, [r3, #15]
	read(voltage);
 8005ce2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7ff fc56 	bl	8005598 <read>

	uint16_t voltage_mv = (uint8_t)(voltage[0]) + (uint8_t)(voltage[1])*256;
 8005cec:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	021b      	lsls	r3, r3, #8
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	if ((voltage_mv - 4 * REFERENCE_VOLTAGE < 2 ) && (voltage_mv - 4 * REFERENCE_VOLTAGE > -2 ))
 8005d02:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8005d06:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	dc0a      	bgt.n	8005d24 <volt_cal+0x324>
 8005d0e:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8005d12:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8005d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1a:	db03      	blt.n	8005d24 <volt_cal+0x324>
		cli_send_string("Voltage calibration success!\n");
 8005d1c:	480e      	ldr	r0, [pc, #56]	; (8005d58 <volt_cal+0x358>)
 8005d1e:	f7ff fb8b 	bl	8005438 <cli_send_string>
 8005d22:	e002      	b.n	8005d2a <volt_cal+0x32a>
	else
		cli_send_string("Voltage calibration fail!\n");
 8005d24:	480d      	ldr	r0, [pc, #52]	; (8005d5c <volt_cal+0x35c>)
 8005d26:	f7ff fb87 	bl	8005438 <cli_send_string>

	/*TODO: ADD SAVING THIS DATA TO FLASH MEMORY */
}
 8005d2a:	bf00      	nop
 8005d2c:	37e4      	adds	r7, #228	; 0xe4
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd90      	pop	{r4, r7, pc}
 8005d32:	bf00      	nop
 8005d34:	08007248 	.word	0x08007248
 8005d38:	08007254 	.word	0x08007254
 8005d3c:	080072cc 	.word	0x080072cc
 8005d40:	08007260 	.word	0x08007260
 8005d44:	080072f0 	.word	0x080072f0
 8005d48:	cccccccd 	.word	0xcccccccd
 8005d4c:	0800727c 	.word	0x0800727c
 8005d50:	08007314 	.word	0x08007314
 8005d54:	0800732c 	.word	0x0800732c
 8005d58:	08007290 	.word	0x08007290
 8005d5c:	080072b0 	.word	0x080072b0

08005d60 <current_cal>:

static void current_cal(void *args)
{
 8005d60:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005d64:	b0ae      	sub	sp, #184	; 0xb8
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
	/* CC Offset Calibration */

	write("0x0000 2d00");
 8005d6a:	4885      	ldr	r0, [pc, #532]	; (8005f80 <current_cal+0x220>)
 8005d6c:	f7ff fd04 	bl	8005778 <write>
	write("0x0000 82f0");
 8005d70:	4884      	ldr	r0, [pc, #528]	; (8005f84 <current_cal+0x224>)
 8005d72:	f7ff fd01 	bl	8005778 <write>

	uint8_t prev_counter = 0;
 8005d76:	2300      	movs	r3, #0
 8005d78:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	while(true)
	{
		char data[33] = "0x0023 03 int";
 8005d7c:	4b82      	ldr	r3, [pc, #520]	; (8005f88 <current_cal+0x228>)
 8005d7e:	f107 0408 	add.w	r4, r7, #8
 8005d82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d84:	c407      	stmia	r4!, {r0, r1, r2}
 8005d86:	8023      	strh	r3, [r4, #0]
 8005d88:	f107 0316 	add.w	r3, r7, #22
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	601a      	str	r2, [r3, #0]
 8005d90:	605a      	str	r2, [r3, #4]
 8005d92:	609a      	str	r2, [r3, #8]
 8005d94:	60da      	str	r2, [r3, #12]
 8005d96:	f8c3 200f 	str.w	r2, [r3, #15]
		read(data);
 8005d9a:	f107 0308 	add.w	r3, r7, #8
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7ff fbfa 	bl	8005598 <read>

		if((uint8_t)(data[2]) != 2)
 8005da4:	7abb      	ldrb	r3, [r7, #10]
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d003      	beq.n	8005db2 <current_cal+0x52>
		{
			write("0x0000 82f0");
 8005daa:	4876      	ldr	r0, [pc, #472]	; (8005f84 <current_cal+0x224>)
 8005dac:	f7ff fce4 	bl	8005778 <write>
 8005db0:	e7e4      	b.n	8005d7c <current_cal+0x1c>
			continue;
		}

		uint8_t counter = (uint8_t)(data[1]);
 8005db2:	7a7b      	ldrb	r3, [r7, #9]
 8005db4:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
		if (prev_counter == 0)
 8005db8:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d102      	bne.n	8005dc6 <current_cal+0x66>
			prev_counter = (uint8_t)(data[1]);
 8005dc0:	7a7b      	ldrb	r3, [r7, #9]
 8005dc2:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

		if (counter - prev_counter > 2)
 8005dc6:	f897 20a5 	ldrb.w	r2, [r7, #165]	; 0xa5
 8005dca:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	ddd3      	ble.n	8005d7c <current_cal+0x1c>
		{
			cli_send_string("counter increments by 2 \n\r");
 8005dd4:	486d      	ldr	r0, [pc, #436]	; (8005f8c <current_cal+0x22c>)
 8005dd6:	f7ff fb2f 	bl	8005438 <cli_send_string>
			break;
		}
	}

	uint8_t measurement_counter = 0;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
	int64_t fcal = 0;
 8005de0:	f04f 0300 	mov.w	r3, #0
 8005de4:	f04f 0400 	mov.w	r4, #0
 8005de8:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
	uint8_t current_data[20];


	while(true)
	{
		if (measurement_counter >= AVERAGE_VOLTAGE_CAL_NUM_OF_SAMPLE)
 8005dec:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8005df0:	2b09      	cmp	r3, #9
 8005df2:	d93e      	bls.n	8005e72 <current_cal+0x112>
				fcal += (0xFFFF - current_data[15] - current_data[16] * 256 + 0x0001);

			measurement_counter ++;
		}
	}
	fcal /= AVERAGE_VOLTAGE_CAL_NUM_OF_SAMPLE;
 8005df4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8005df8:	f04f 020a 	mov.w	r2, #10
 8005dfc:	f04f 0300 	mov.w	r3, #0
 8005e00:	f7fa fb0e 	bl	8000420 <__aeabi_ldivmod>
 8005e04:	4603      	mov	r3, r0
 8005e06:	460c      	mov	r4, r1
 8005e08:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
	write("0x0000 1a40");
 8005e0c:	4860      	ldr	r0, [pc, #384]	; (8005f90 <current_cal+0x230>)
 8005e0e:	f7ff fcb3 	bl	8005778 <write>
	char data[33] = "0x0023 03 int";
 8005e12:	4b5d      	ldr	r3, [pc, #372]	; (8005f88 <current_cal+0x228>)
 8005e14:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8005e18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e1a:	c407      	stmia	r4!, {r0, r1, r2}
 8005e1c:	8023      	strh	r3, [r4, #0]
 8005e1e:	f107 036e 	add.w	r3, r7, #110	; 0x6e
 8005e22:	2200      	movs	r2, #0
 8005e24:	601a      	str	r2, [r3, #0]
 8005e26:	605a      	str	r2, [r3, #4]
 8005e28:	609a      	str	r2, [r3, #8]
 8005e2a:	60da      	str	r2, [r3, #12]
 8005e2c:	f8c3 200f 	str.w	r2, [r3, #15]
	read(data);
 8005e30:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7ff fbaf 	bl	8005598 <read>
	uint16_t coulomb_offset = ((uint8_t)data[1] + (uint8_t)data[2] * 256);
 8005e3a:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	021b      	lsls	r3, r3, #8
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	uint16_t cc_offset =  coulomb_offset * fcal;
 8005e50:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005e54:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8005e58:	fb12 f303 	smulbb	r3, r2, r3
 8005e5c:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
	/*TODO WRITE THIS OFFSET TO DATAFLASH */

	/* CC Gain / Capacity Gain calibration */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8005e60:	2201      	movs	r2, #1
 8005e62:	2104      	movs	r1, #4
 8005e64:	484b      	ldr	r0, [pc, #300]	; (8005f94 <current_cal+0x234>)
 8005e66:	f7fb fb1f 	bl	80014a8 <HAL_GPIO_WritePin>
	write("0x0000 82f0");
 8005e6a:	4846      	ldr	r0, [pc, #280]	; (8005f84 <current_cal+0x224>)
 8005e6c:	f7ff fc84 	bl	8005778 <write>
 8005e70:	e06b      	b.n	8005f4a <current_cal+0x1ea>
		char data[33] = "0x0023 11 int";
 8005e72:	4b49      	ldr	r3, [pc, #292]	; (8005f98 <current_cal+0x238>)
 8005e74:	f107 0408 	add.w	r4, r7, #8
 8005e78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e7a:	c407      	stmia	r4!, {r0, r1, r2}
 8005e7c:	8023      	strh	r3, [r4, #0]
 8005e7e:	f107 0316 	add.w	r3, r7, #22
 8005e82:	2200      	movs	r2, #0
 8005e84:	601a      	str	r2, [r3, #0]
 8005e86:	605a      	str	r2, [r3, #4]
 8005e88:	609a      	str	r2, [r3, #8]
 8005e8a:	60da      	str	r2, [r3, #12]
 8005e8c:	f8c3 200f 	str.w	r2, [r3, #15]
		read(data);
 8005e90:	f107 0308 	add.w	r3, r7, #8
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7ff fb7f 	bl	8005598 <read>
		if((uint8_t)(data[2]) != 2)
 8005e9a:	7abb      	ldrb	r3, [r7, #10]
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d003      	beq.n	8005ea8 <current_cal+0x148>
			write("0x0000 82f0");
 8005ea0:	4838      	ldr	r0, [pc, #224]	; (8005f84 <current_cal+0x224>)
 8005ea2:	f7ff fc69 	bl	8005778 <write>
 8005ea6:	e7a1      	b.n	8005dec <current_cal+0x8c>
		memcpy(current_data, (uint8_t*)data, 17);
 8005ea8:	f107 0108 	add.w	r1, r7, #8
 8005eac:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005eb0:	2211      	movs	r2, #17
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f001 f82e 	bl	8006f14 <memcpy>
		uint8_t counter = (uint8_t)(data[1]);
 8005eb8:	7a7b      	ldrb	r3, [r7, #9]
 8005eba:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
		if (counter - prev_counter >= 1)
 8005ebe:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 8005ec2:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	dd8f      	ble.n	8005dec <current_cal+0x8c>
			prev_counter = counter;
 8005ecc:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8005ed0:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
			if((current_data[15] + current_data[16] * 255) < 0x8000)
 8005ed4:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8005ed8:	4619      	mov	r1, r3
 8005eda:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8005ede:	461a      	mov	r2, r3
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	021b      	lsls	r3, r3, #8
 8005ee4:	1a9b      	subs	r3, r3, r2
 8005ee6:	440b      	add	r3, r1
 8005ee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eec:	da12      	bge.n	8005f14 <current_cal+0x1b4>
				fcal += (current_data[15] + current_data[16] * 256);
 8005eee:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8005ef8:	021b      	lsls	r3, r3, #8
 8005efa:	4413      	add	r3, r2
 8005efc:	469b      	mov	fp, r3
 8005efe:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8005f02:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f06:	eb1b 0301 	adds.w	r3, fp, r1
 8005f0a:	eb4c 0402 	adc.w	r4, ip, r2
 8005f0e:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 8005f12:	e014      	b.n	8005f3e <current_cal+0x1de>
				fcal += (0xFFFF - current_data[15] - current_data[16] * 256 + 0x0001);
 8005f14:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8005f18:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8005f1c:	33ff      	adds	r3, #255	; 0xff
 8005f1e:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 8005f22:	0212      	lsls	r2, r2, #8
 8005f24:	1a9b      	subs	r3, r3, r2
 8005f26:	3301      	adds	r3, #1
 8005f28:	469b      	mov	fp, r3
 8005f2a:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8005f2e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f32:	eb1b 0301 	adds.w	r3, fp, r1
 8005f36:	eb4c 0402 	adc.w	r4, ip, r2
 8005f3a:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
			measurement_counter ++;
 8005f3e:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8005f42:	3301      	adds	r3, #1
 8005f44:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
	{
 8005f48:	e750      	b.n	8005dec <current_cal+0x8c>

	while(true)
	{
		char data[33] = "0x0023 03 int";
 8005f4a:	4b0f      	ldr	r3, [pc, #60]	; (8005f88 <current_cal+0x228>)
 8005f4c:	f107 0408 	add.w	r4, r7, #8
 8005f50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005f52:	c407      	stmia	r4!, {r0, r1, r2}
 8005f54:	8023      	strh	r3, [r4, #0]
 8005f56:	f107 0316 	add.w	r3, r7, #22
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	601a      	str	r2, [r3, #0]
 8005f5e:	605a      	str	r2, [r3, #4]
 8005f60:	609a      	str	r2, [r3, #8]
 8005f62:	60da      	str	r2, [r3, #12]
 8005f64:	f8c3 200f 	str.w	r2, [r3, #15]
		read(data);
 8005f68:	f107 0308 	add.w	r3, r7, #8
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7ff fb13 	bl	8005598 <read>

		if((uint8_t)(data[2]) != 2)
 8005f72:	7abb      	ldrb	r3, [r7, #10]
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d011      	beq.n	8005f9c <current_cal+0x23c>
		{
			write("0x0000 82f0");
 8005f78:	4802      	ldr	r0, [pc, #8]	; (8005f84 <current_cal+0x224>)
 8005f7a:	f7ff fbfd 	bl	8005778 <write>
 8005f7e:	e7e4      	b.n	8005f4a <current_cal+0x1ea>
 8005f80:	08007248 	.word	0x08007248
 8005f84:	08007350 	.word	0x08007350
 8005f88:	0800739c 	.word	0x0800739c
 8005f8c:	08007260 	.word	0x08007260
 8005f90:	0800735c 	.word	0x0800735c
 8005f94:	40020000 	.word	0x40020000
 8005f98:	080073c0 	.word	0x080073c0
			continue;
		}

		uint8_t counter = (uint8_t)(data[1]);
 8005f9c:	7a7b      	ldrb	r3, [r7, #9]
 8005f9e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		if (prev_counter == 0)
 8005fa2:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d102      	bne.n	8005fb0 <current_cal+0x250>
			prev_counter = (uint8_t)(data[1]);
 8005faa:	7a7b      	ldrb	r3, [r7, #9]
 8005fac:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

		if (counter - prev_counter > 5)
 8005fb0:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8005fb4:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	2b05      	cmp	r3, #5
 8005fbc:	ddc5      	ble.n	8005f4a <current_cal+0x1ea>
		{
			cli_send_string("counter increments by 5 \n\r");
 8005fbe:	48cc      	ldr	r0, [pc, #816]	; (80062f0 <current_cal+0x590>)
 8005fc0:	f7ff fa3a 	bl	8005438 <cli_send_string>
			break;
		}
	}

	write("0x0000 1f00");
 8005fc4:	48cb      	ldr	r0, [pc, #812]	; (80062f4 <current_cal+0x594>)
 8005fc6:	f7ff fbd7 	bl	8005778 <write>
	write("0x0000 2000");
 8005fca:	48cb      	ldr	r0, [pc, #812]	; (80062f8 <current_cal+0x598>)
 8005fcc:	f7ff fbd4 	bl	8005778 <write>

	fcal = 0;
 8005fd0:	f04f 0300 	mov.w	r3, #0
 8005fd4:	f04f 0400 	mov.w	r4, #0
 8005fd8:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
	memset(current_data, 0, 20);
 8005fdc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005fe0:	2214      	movs	r2, #20
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f000 ffa0 	bl	8006f2a <memset>
	measurement_counter = 0;
 8005fea:	2300      	movs	r3, #0
 8005fec:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
	prev_counter = 0;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

	while(true)
	{
		if (measurement_counter >= AVERAGE_VOLTAGE_CAL_NUM_OF_SAMPLE)
 8005ff6:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8005ffa:	2b09      	cmp	r3, #9
 8005ffc:	f240 80bf 	bls.w	800617e <current_cal+0x41e>

			measurement_counter++;
		}
	}

	write("0x0000 1f00");
 8006000:	48bc      	ldr	r0, [pc, #752]	; (80062f4 <current_cal+0x594>)
 8006002:	f7ff fbb9 	bl	8005778 <write>
	write("0x0000 2000");
 8006006:	48bc      	ldr	r0, [pc, #752]	; (80062f8 <current_cal+0x598>)
 8006008:	f7ff fbb6 	bl	8005778 <write>
	float adc_measurement = 0;
 800600c:	f04f 0300 	mov.w	r3, #0
 8006010:	65fb      	str	r3, [r7, #92]	; 0x5c
	adc_fun(&adc_measurement);
 8006012:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006016:	4618      	mov	r0, r3
 8006018:	f7ff fc60 	bl	80058dc <adc_fun>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800601c:	2200      	movs	r2, #0
 800601e:	2104      	movs	r1, #4
 8006020:	48b6      	ldr	r0, [pc, #728]	; (80062fc <current_cal+0x59c>)
 8006022:	f7fb fa41 	bl	80014a8 <HAL_GPIO_WritePin>

    fcal /= AVERAGE_VOLTAGE_CAL_NUM_OF_SAMPLE;
 8006026:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800602a:	f04f 020a 	mov.w	r2, #10
 800602e:	f04f 0300 	mov.w	r3, #0
 8006032:	f7fa f9f5 	bl	8000420 <__aeabi_ldivmod>
 8006036:	4603      	mov	r3, r0
 8006038:	460c      	mov	r4, r1
 800603a:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
	float icc = adc_measurement * CURRENT_DISCHARGE_COEFFICIENT;
 800603e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006042:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 8006300 <current_cal+0x5a0>
 8006046:	ee67 7a87 	vmul.f32	s15, s15, s14
 800604a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98

	union float_data cc_gain;
	union float_data capacity_gain;

	cc_gain.f =  icc/(fcal - cc_offset / coulomb_offset) * 1000;
 800604e:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8006052:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8006056:	fbb2 f3f3 	udiv	r3, r2, r3
 800605a:	b29b      	uxth	r3, r3
 800605c:	fa1f fb83 	uxth.w	fp, r3
 8006060:	f04f 0c00 	mov.w	ip, #0
 8006064:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006068:	460b      	mov	r3, r1
 800606a:	4614      	mov	r4, r2
 800606c:	ebb3 030b 	subs.w	r3, r3, fp
 8006070:	eb64 040c 	sbc.w	r4, r4, ip
 8006074:	4618      	mov	r0, r3
 8006076:	4621      	mov	r1, r4
 8006078:	f7fa f994 	bl	80003a4 <__aeabi_l2f>
 800607c:	ee06 0a90 	vmov	s13, r0
 8006080:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8006084:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006088:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8006304 <current_cal+0x5a4>
 800608c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006090:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	capacity_gain.f = cc_gain.f * 298261.6178f;
 8006094:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006098:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8006308 <current_cal+0x5a8>
 800609c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060a0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	union send_conv cc_gain_data;
	union send_conv capacity_gain_data;

	cc_gain_data.f.mantissa_lsb = cc_gain.f_stct.mantissa;
 80060a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060a6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80060aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ae:	b2da      	uxtb	r2, r3
 80060b0:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80060b4:	f362 0347 	bfi	r3, r2, #1, #7
 80060b8:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	cc_gain_data.f.mantissa_7to15 = cc_gain.f_stct.mantissa >> 7;
 80060bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060be:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80060c2:	11db      	asrs	r3, r3, #7
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	cc_gain_data.f.mantissa_msb = cc_gain.f_stct.mantissa >> 15;
 80060ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060cc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80060d0:	13db      	asrs	r3, r3, #15
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

	cc_gain_data.f.exponent = cc_gain.f_stct.exponent;
 80060d8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80060dc:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	cc_gain_data.f.sign_bit = cc_gain.f_stct.sign_bit;
 80060e6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80060ea:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80060ee:	b2da      	uxtb	r2, r3
 80060f0:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80060f4:	f362 0300 	bfi	r3, r2, #0, #1
 80060f8:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51

	capacity_gain_data.f.mantissa_lsb = capacity_gain.f_stct.mantissa;
 80060fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060fe:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006106:	b2da      	uxtb	r2, r3
 8006108:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800610c:	f362 0347 	bfi	r3, r2, #1, #7
 8006110:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	capacity_gain_data.f.mantissa_7to15 = capacity_gain.f_stct.mantissa >> 7;
 8006114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006116:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800611a:	11db      	asrs	r3, r3, #7
 800611c:	b2db      	uxtb	r3, r3
 800611e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	capacity_gain_data.f.mantissa_msb = capacity_gain.f_stct.mantissa >> 15;
 8006122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006124:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006128:	13db      	asrs	r3, r3, #15
 800612a:	b2db      	uxtb	r3, r3
 800612c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	capacity_gain_data.f.exponent = capacity_gain.f_stct.exponent;
 8006130:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006134:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 8006138:	b2db      	uxtb	r3, r3
 800613a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	capacity_gain_data.f.sign_bit = capacity_gain.f_stct.sign_bit;
 800613e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006142:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006146:	b2da      	uxtb	r2, r3
 8006148:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800614c:	f362 0300 	bfi	r3, r2, #0, #1
 8006150:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d


	char offsets[31] = "0x0044 0a0040";
 8006154:	4b6d      	ldr	r3, [pc, #436]	; (800630c <current_cal+0x5ac>)
 8006156:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800615a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800615c:	c407      	stmia	r4!, {r0, r1, r2}
 800615e:	8023      	strh	r3, [r4, #0]
 8006160:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8006164:	2200      	movs	r2, #0
 8006166:	601a      	str	r2, [r3, #0]
 8006168:	605a      	str	r2, [r3, #4]
 800616a:	609a      	str	r2, [r3, #8]
 800616c:	60da      	str	r2, [r3, #12]
 800616e:	741a      	strb	r2, [r3, #16]
	offsets[30] = 0;
 8006170:	2300      	movs	r3, #0
 8006172:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	for(uint8_t i = 0; i < sizeof(struct float_bq78350); i++)
 8006176:	2300      	movs	r3, #0
 8006178:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800617c:	e0af      	b.n	80062de <current_cal+0x57e>
		char data[33] = "0x0023 14 int";
 800617e:	4b64      	ldr	r3, [pc, #400]	; (8006310 <current_cal+0x5b0>)
 8006180:	f107 0408 	add.w	r4, r7, #8
 8006184:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006186:	c407      	stmia	r4!, {r0, r1, r2}
 8006188:	8023      	strh	r3, [r4, #0]
 800618a:	f107 0316 	add.w	r3, r7, #22
 800618e:	2200      	movs	r2, #0
 8006190:	601a      	str	r2, [r3, #0]
 8006192:	605a      	str	r2, [r3, #4]
 8006194:	609a      	str	r2, [r3, #8]
 8006196:	60da      	str	r2, [r3, #12]
 8006198:	f8c3 200f 	str.w	r2, [r3, #15]
		read(data);
 800619c:	f107 0308 	add.w	r3, r7, #8
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7ff f9f9 	bl	8005598 <read>
		if((uint8_t)(data[2]) != 2)
 80061a6:	7abb      	ldrb	r3, [r7, #10]
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d003      	beq.n	80061b4 <current_cal+0x454>
			write("0x0000 82f0");
 80061ac:	4859      	ldr	r0, [pc, #356]	; (8006314 <current_cal+0x5b4>)
 80061ae:	f7ff fae3 	bl	8005778 <write>
 80061b2:	e720      	b.n	8005ff6 <current_cal+0x296>
		memcpy(current_data, (uint8_t*)data, 17);
 80061b4:	f107 0108 	add.w	r1, r7, #8
 80061b8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80061bc:	2211      	movs	r2, #17
 80061be:	4618      	mov	r0, r3
 80061c0:	f000 fea8 	bl	8006f14 <memcpy>
		uint8_t counter = (uint8_t)(data[1]);
 80061c4:	7a7b      	ldrb	r3, [r7, #9]
 80061c6:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
		if (prev_counter == 0)
 80061ca:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d102      	bne.n	80061d8 <current_cal+0x478>
			prev_counter = (uint8_t)(data[1]);
 80061d2:	7a7b      	ldrb	r3, [r7, #9]
 80061d4:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
		if (counter - prev_counter >= 1)
 80061d8:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
 80061dc:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f77f af07 	ble.w	8005ff6 <current_cal+0x296>
			prev_counter = counter;
 80061e8:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80061ec:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
			if((current_data[15] + current_data[16] * 256) < 0x8000)
 80061f0:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80061f4:	461a      	mov	r2, r3
 80061f6:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 80061fa:	021b      	lsls	r3, r3, #8
 80061fc:	4413      	add	r3, r2
 80061fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006202:	da12      	bge.n	800622a <current_cal+0x4ca>
				fcal += (current_data[15] + current_data[16] * 256);
 8006204:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8006208:	461a      	mov	r2, r3
 800620a:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800620e:	021b      	lsls	r3, r3, #8
 8006210:	4413      	add	r3, r2
 8006212:	469b      	mov	fp, r3
 8006214:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8006218:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800621c:	eb1b 0301 	adds.w	r3, fp, r1
 8006220:	eb4c 0402 	adc.w	r4, ip, r2
 8006224:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 8006228:	e014      	b.n	8006254 <current_cal+0x4f4>
				fcal += (0xFFFF - current_data[15] - current_data[16] * 256 + 0x0001);
 800622a:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800622e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8006232:	33ff      	adds	r3, #255	; 0xff
 8006234:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 8006238:	0212      	lsls	r2, r2, #8
 800623a:	1a9b      	subs	r3, r3, r2
 800623c:	3301      	adds	r3, #1
 800623e:	469b      	mov	fp, r3
 8006240:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8006244:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006248:	eb1b 0301 	adds.w	r3, fp, r1
 800624c:	eb4c 0402 	adc.w	r4, ip, r2
 8006250:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
			measurement_counter++;
 8006254:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8006258:	3301      	adds	r3, #1
 800625a:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
	{
 800625e:	e6ca      	b.n	8005ff6 <current_cal+0x296>
	{
		if (cc_gain_data.bytes[i] <= 0x0F)
 8006260:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006264:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006268:	4413      	add	r3, r2
 800626a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800626e:	2b0f      	cmp	r3, #15
 8006270:	d81d      	bhi.n	80062ae <current_cal+0x54e>
		{
			itoa(cc_gain_data.bytes[i], offsets + 13 + i*2 + 1, 16);
 8006272:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006276:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800627a:	4413      	add	r3, r2
 800627c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8006280:	4618      	mov	r0, r3
 8006282:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006286:	005b      	lsls	r3, r3, #1
 8006288:	330e      	adds	r3, #14
 800628a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800628e:	4413      	add	r3, r2
 8006290:	2210      	movs	r2, #16
 8006292:	4619      	mov	r1, r3
 8006294:	f000 fe2c 	bl	8006ef0 <itoa>
			offsets[13 + i * 2] = '0';
 8006298:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800629c:	005b      	lsls	r3, r3, #1
 800629e:	330d      	adds	r3, #13
 80062a0:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80062a4:	4413      	add	r3, r2
 80062a6:	2230      	movs	r2, #48	; 0x30
 80062a8:	f803 2c8c 	strb.w	r2, [r3, #-140]
 80062ac:	e012      	b.n	80062d4 <current_cal+0x574>
		}
		else
			itoa(cc_gain_data.bytes[i], offsets + 13 + i*2, 16);
 80062ae:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80062b2:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80062b6:	4413      	add	r3, r2
 80062b8:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80062bc:	4618      	mov	r0, r3
 80062be:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80062c2:	005b      	lsls	r3, r3, #1
 80062c4:	330d      	adds	r3, #13
 80062c6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80062ca:	4413      	add	r3, r2
 80062cc:	2210      	movs	r2, #16
 80062ce:	4619      	mov	r1, r3
 80062d0:	f000 fe0e 	bl	8006ef0 <itoa>
	for(uint8_t i = 0; i < sizeof(struct float_bq78350); i++)
 80062d4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80062d8:	3301      	adds	r3, #1
 80062da:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80062de:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80062e2:	2b03      	cmp	r3, #3
 80062e4:	d9bc      	bls.n	8006260 <current_cal+0x500>
	}

	for(uint8_t i = 0; i < sizeof(struct float_bq78350); i++)
 80062e6:	2300      	movs	r3, #0
 80062e8:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
 80062ec:	e053      	b.n	8006396 <current_cal+0x636>
 80062ee:	bf00      	nop
 80062f0:	08007368 	.word	0x08007368
 80062f4:	08007384 	.word	0x08007384
 80062f8:	08007390 	.word	0x08007390
 80062fc:	40020000 	.word	0x40020000
 8006300:	3b807bbb 	.word	0x3b807bbb
 8006304:	447a0000 	.word	0x447a0000
 8006308:	4891a2b4 	.word	0x4891a2b4
 800630c:	080073e4 	.word	0x080073e4
 8006310:	08007404 	.word	0x08007404
 8006314:	08007350 	.word	0x08007350
	{
		if (capacity_gain_data.bytes[i] <= 0x0F)
 8006318:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 800631c:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006320:	4413      	add	r3, r2
 8006322:	f813 3c6c 	ldrb.w	r3, [r3, #-108]
 8006326:	2b0f      	cmp	r3, #15
 8006328:	d81d      	bhi.n	8006366 <current_cal+0x606>
		{
			itoa(capacity_gain_data.bytes[i], offsets + 13 + sizeof(float) * 2 + i * 2 + 1, 16);
 800632a:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 800632e:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006332:	4413      	add	r3, r2
 8006334:	f813 3c6c 	ldrb.w	r3, [r3, #-108]
 8006338:	4618      	mov	r0, r3
 800633a:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 800633e:	005b      	lsls	r3, r3, #1
 8006340:	3316      	adds	r3, #22
 8006342:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006346:	4413      	add	r3, r2
 8006348:	2210      	movs	r2, #16
 800634a:	4619      	mov	r1, r3
 800634c:	f000 fdd0 	bl	8006ef0 <itoa>
			offsets[13 + sizeof(float) * 2 + i * 2] = '0';
 8006350:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8006354:	005b      	lsls	r3, r3, #1
 8006356:	3315      	adds	r3, #21
 8006358:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800635c:	4413      	add	r3, r2
 800635e:	2230      	movs	r2, #48	; 0x30
 8006360:	f803 2c8c 	strb.w	r2, [r3, #-140]
 8006364:	e012      	b.n	800638c <current_cal+0x62c>
		}
		else
			itoa(capacity_gain_data.bytes[i], offsets + 13 + sizeof(float) * 2 + i * 2, 16);
 8006366:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 800636a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800636e:	4413      	add	r3, r2
 8006370:	f813 3c6c 	ldrb.w	r3, [r3, #-108]
 8006374:	4618      	mov	r0, r3
 8006376:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 800637a:	005b      	lsls	r3, r3, #1
 800637c:	3315      	adds	r3, #21
 800637e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006382:	4413      	add	r3, r2
 8006384:	2210      	movs	r2, #16
 8006386:	4619      	mov	r1, r3
 8006388:	f000 fdb2 	bl	8006ef0 <itoa>
	for(uint8_t i = 0; i < sizeof(struct float_bq78350); i++)
 800638c:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8006390:	3301      	adds	r3, #1
 8006392:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
 8006396:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 800639a:	2b03      	cmp	r3, #3
 800639c:	d9bc      	bls.n	8006318 <current_cal+0x5b8>
	}
	write(offsets);
 800639e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7ff f9e8 	bl	8005778 <write>
	/*TODO: WRITE; CC GAIN AND CAPACITY GAIN TO FLASH */
	write("0x0000 2d00");
 80063a8:	4803      	ldr	r0, [pc, #12]	; (80063b8 <current_cal+0x658>)
 80063aa:	f7ff f9e5 	bl	8005778 <write>
}
 80063ae:	bf00      	nop
 80063b0:	37b8      	adds	r7, #184	; 0xb8
 80063b2:	46bd      	mov	sp, r7
 80063b4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80063b8:	08007248 	.word	0x08007248

080063bc <current_display>:
static void current_display (void* args)
{
 80063bc:	b590      	push	{r4, r7, lr}
 80063be:	b08d      	sub	sp, #52	; 0x34
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80063c4:	2201      	movs	r2, #1
 80063c6:	2104      	movs	r1, #4
 80063c8:	481d      	ldr	r0, [pc, #116]	; (8006440 <current_display+0x84>)
 80063ca:	f7fb f86d 	bl	80014a8 <HAL_GPIO_WritePin>
    vTaskDelay(6000);
 80063ce:	f241 7070 	movw	r0, #6000	; 0x1770
 80063d2:	f7fd fe69 	bl	80040a8 <vTaskDelay>
	char data[20] = "0x000a 02 int";
 80063d6:	4b1b      	ldr	r3, [pc, #108]	; (8006444 <current_display+0x88>)
 80063d8:	f107 0418 	add.w	r4, r7, #24
 80063dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80063de:	c407      	stmia	r4!, {r0, r1, r2}
 80063e0:	8023      	strh	r3, [r4, #0]
 80063e2:	f107 0326 	add.w	r3, r7, #38	; 0x26
 80063e6:	2200      	movs	r2, #0
 80063e8:	601a      	str	r2, [r3, #0]
 80063ea:	809a      	strh	r2, [r3, #4]
	read(data);
 80063ec:	f107 0318 	add.w	r3, r7, #24
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7ff f8d1 	bl	8005598 <read>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80063f6:	2200      	movs	r2, #0
 80063f8:	2104      	movs	r1, #4
 80063fa:	4811      	ldr	r0, [pc, #68]	; (8006440 <current_display+0x84>)
 80063fc:	f7fb f854 	bl	80014a8 <HAL_GPIO_WritePin>


	int32_t current_val = (uint8_t)(data[0]) + (uint8_t)(data[1])*256;
 8006400:	7e3b      	ldrb	r3, [r7, #24]
 8006402:	461a      	mov	r2, r3
 8006404:	7e7b      	ldrb	r3, [r7, #25]
 8006406:	021b      	lsls	r3, r3, #8
 8006408:	4413      	add	r3, r2
 800640a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if(current_val > 0x7FFF)
 800640c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006412:	db03      	blt.n	800641c <current_display+0x60>
		current_val = -(0xFFFF - current_val + 0x0001);
 8006414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006416:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800641a:	62fb      	str	r3, [r7, #44]	; 0x2c

	char send_dat[10];
	send_dat[9] = '\0';
 800641c:	2300      	movs	r3, #0
 800641e:	757b      	strb	r3, [r7, #21]
	itoa(current_val, send_dat, 10);
 8006420:	f107 030c 	add.w	r3, r7, #12
 8006424:	220a      	movs	r2, #10
 8006426:	4619      	mov	r1, r3
 8006428:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800642a:	f000 fd61 	bl	8006ef0 <itoa>


	cli_send_string(send_dat);
 800642e:	f107 030c 	add.w	r3, r7, #12
 8006432:	4618      	mov	r0, r3
 8006434:	f7ff f800 	bl	8005438 <cli_send_string>
}
 8006438:	bf00      	nop
 800643a:	3734      	adds	r7, #52	; 0x34
 800643c:	46bd      	mov	sp, r7
 800643e:	bd90      	pop	{r4, r7, pc}
 8006440:	40020000 	.word	0x40020000
 8006444:	08007428 	.word	0x08007428

08006448 <help_fun>:
	EVENT_INIT("current_cal", "Performs current calibration of bq78350-R1. \n", current_cal),
	EVENT_INIT("display_i", "Displays current. \n", current_display),
};

static void help_fun(void *args)
{
 8006448:	b5b0      	push	{r4, r5, r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
	bool matched = false;
 8006450:	2300      	movs	r3, #0
 8006452:	757b      	strb	r3, [r7, #21]
	for(uint8_t i = 0; i < EVENT_TABLE_SIZE; i++)
 8006454:	2300      	movs	r3, #0
 8006456:	75bb      	strb	r3, [r7, #22]
 8006458:	e020      	b.n	800649c <help_fun+0x54>
	{
		if (strstr(args, event_tab[i].name) != NULL)
 800645a:	7dba      	ldrb	r2, [r7, #22]
 800645c:	494d      	ldr	r1, [pc, #308]	; (8006594 <help_fun+0x14c>)
 800645e:	4613      	mov	r3, r2
 8006460:	005b      	lsls	r3, r3, #1
 8006462:	4413      	add	r3, r2
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	440b      	add	r3, r1
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4619      	mov	r1, r3
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 fe41 	bl	80070f4 <strstr>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00e      	beq.n	8006496 <help_fun+0x4e>
		{
			cli_send_string(event_tab[i].desc);
 8006478:	7dba      	ldrb	r2, [r7, #22]
 800647a:	4946      	ldr	r1, [pc, #280]	; (8006594 <help_fun+0x14c>)
 800647c:	4613      	mov	r3, r2
 800647e:	005b      	lsls	r3, r3, #1
 8006480:	4413      	add	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	440b      	add	r3, r1
 8006486:	3304      	adds	r3, #4
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4618      	mov	r0, r3
 800648c:	f7fe ffd4 	bl	8005438 <cli_send_string>
			matched = true;
 8006490:	2301      	movs	r3, #1
 8006492:	757b      	strb	r3, [r7, #21]
			break;
 8006494:	e005      	b.n	80064a2 <help_fun+0x5a>
	for(uint8_t i = 0; i < EVENT_TABLE_SIZE; i++)
 8006496:	7dbb      	ldrb	r3, [r7, #22]
 8006498:	3301      	adds	r3, #1
 800649a:	75bb      	strb	r3, [r7, #22]
 800649c:	7dbb      	ldrb	r3, [r7, #22]
 800649e:	2b07      	cmp	r3, #7
 80064a0:	d9db      	bls.n	800645a <help_fun+0x12>
		}
	}
	if (!matched)
 80064a2:	7d7b      	ldrb	r3, [r7, #21]
 80064a4:	f083 0301 	eor.w	r3, r3, #1
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d060      	beq.n	8006570 <help_fun+0x128>
	{
		for(uint8_t i = 1; i < EVENT_TABLE_SIZE; i++)
 80064ae:	2301      	movs	r3, #1
 80064b0:	75fb      	strb	r3, [r7, #23]
 80064b2:	e05a      	b.n	800656a <help_fun+0x122>
		{
 80064b4:	466b      	mov	r3, sp
 80064b6:	461d      	mov	r5, r3
			uint8_t str_len = strlen(event_tab[i].name);
 80064b8:	7dfa      	ldrb	r2, [r7, #23]
 80064ba:	4936      	ldr	r1, [pc, #216]	; (8006594 <help_fun+0x14c>)
 80064bc:	4613      	mov	r3, r2
 80064be:	005b      	lsls	r3, r3, #1
 80064c0:	4413      	add	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	440b      	add	r3, r1
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7f9 fe93 	bl	80001f4 <strlen>
 80064ce:	4603      	mov	r3, r0
 80064d0:	753b      	strb	r3, [r7, #20]
			char tmp[str_len + 1];
 80064d2:	7d3b      	ldrb	r3, [r7, #20]
 80064d4:	1c58      	adds	r0, r3, #1
 80064d6:	1e43      	subs	r3, r0, #1
 80064d8:	613b      	str	r3, [r7, #16]
 80064da:	4603      	mov	r3, r0
 80064dc:	4619      	mov	r1, r3
 80064de:	f04f 0200 	mov.w	r2, #0
 80064e2:	f04f 0300 	mov.w	r3, #0
 80064e6:	f04f 0400 	mov.w	r4, #0
 80064ea:	00d4      	lsls	r4, r2, #3
 80064ec:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80064f0:	00cb      	lsls	r3, r1, #3
 80064f2:	4603      	mov	r3, r0
 80064f4:	4619      	mov	r1, r3
 80064f6:	f04f 0200 	mov.w	r2, #0
 80064fa:	f04f 0300 	mov.w	r3, #0
 80064fe:	f04f 0400 	mov.w	r4, #0
 8006502:	00d4      	lsls	r4, r2, #3
 8006504:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8006508:	00cb      	lsls	r3, r1, #3
 800650a:	4603      	mov	r3, r0
 800650c:	3307      	adds	r3, #7
 800650e:	08db      	lsrs	r3, r3, #3
 8006510:	00db      	lsls	r3, r3, #3
 8006512:	ebad 0d03 	sub.w	sp, sp, r3
 8006516:	466b      	mov	r3, sp
 8006518:	3300      	adds	r3, #0
 800651a:	60fb      	str	r3, [r7, #12]
			memset(tmp, 0, str_len + 1);
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	7d3b      	ldrb	r3, [r7, #20]
 8006520:	3301      	adds	r3, #1
 8006522:	461a      	mov	r2, r3
 8006524:	2100      	movs	r1, #0
 8006526:	f000 fd00 	bl	8006f2a <memset>

			memcpy(tmp, event_tab[i].name, str_len);
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	7dfa      	ldrb	r2, [r7, #23]
 800652e:	4919      	ldr	r1, [pc, #100]	; (8006594 <help_fun+0x14c>)
 8006530:	4613      	mov	r3, r2
 8006532:	005b      	lsls	r3, r3, #1
 8006534:	4413      	add	r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	440b      	add	r3, r1
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	7d3a      	ldrb	r2, [r7, #20]
 800653e:	4619      	mov	r1, r3
 8006540:	f000 fce8 	bl	8006f14 <memcpy>
			cli_send_string(strcat(tmp, "\n\r"));
 8006544:	68fc      	ldr	r4, [r7, #12]
 8006546:	4620      	mov	r0, r4
 8006548:	f7f9 fe54 	bl	80001f4 <strlen>
 800654c:	4603      	mov	r3, r0
 800654e:	4423      	add	r3, r4
 8006550:	4a11      	ldr	r2, [pc, #68]	; (8006598 <help_fun+0x150>)
 8006552:	8811      	ldrh	r1, [r2, #0]
 8006554:	7892      	ldrb	r2, [r2, #2]
 8006556:	8019      	strh	r1, [r3, #0]
 8006558:	709a      	strb	r2, [r3, #2]
 800655a:	4623      	mov	r3, r4
 800655c:	4618      	mov	r0, r3
 800655e:	f7fe ff6b 	bl	8005438 <cli_send_string>
 8006562:	46ad      	mov	sp, r5
		for(uint8_t i = 1; i < EVENT_TABLE_SIZE; i++)
 8006564:	7dfb      	ldrb	r3, [r7, #23]
 8006566:	3301      	adds	r3, #1
 8006568:	75fb      	strb	r3, [r7, #23]
 800656a:	7dfb      	ldrb	r3, [r7, #23]
 800656c:	2b07      	cmp	r3, #7
 800656e:	d9a1      	bls.n	80064b4 <help_fun+0x6c>
		}
	}

	char data[4];
	data[3] = '\0';
 8006570:	2300      	movs	r3, #0
 8006572:	72fb      	strb	r3, [r7, #11]

	itoa(sizeof(struct float_bq78350), data, 10);
 8006574:	f107 0308 	add.w	r3, r7, #8
 8006578:	220a      	movs	r2, #10
 800657a:	4619      	mov	r1, r3
 800657c:	2004      	movs	r0, #4
 800657e:	f000 fcb7 	bl	8006ef0 <itoa>
	cli_send_string(data);
 8006582:	f107 0308 	add.w	r3, r7, #8
 8006586:	4618      	mov	r0, r3
 8006588:	f7fe ff56 	bl	8005438 <cli_send_string>
}
 800658c:	bf00      	nop
 800658e:	3718      	adds	r7, #24
 8006590:	46bd      	mov	sp, r7
 8006592:	bdb0      	pop	{r4, r5, r7, pc}
 8006594:	08007770 	.word	0x08007770
 8006598:	08007244 	.word	0x08007244

0800659c <seek_4_event>:

static int16_t seek_4_event(char* text, void* args)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
	strcpy(args, strstr(text, " ") + 1);
 80065a6:	2120      	movs	r1, #32
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fd8e 	bl	80070ca <strchr>
 80065ae:	4603      	mov	r3, r0
 80065b0:	3301      	adds	r3, #1
 80065b2:	4619      	mov	r1, r3
 80065b4:	6838      	ldr	r0, [r7, #0]
 80065b6:	f000 fd95 	bl	80070e4 <strcpy>

	for(int i = 0; i < EVENT_TABLE_SIZE; i++)
 80065ba:	2300      	movs	r3, #0
 80065bc:	60fb      	str	r3, [r7, #12]
 80065be:	e014      	b.n	80065ea <seek_4_event+0x4e>
	{
		if (strstr(text, event_tab[i].name) != NULL)
 80065c0:	490e      	ldr	r1, [pc, #56]	; (80065fc <seek_4_event+0x60>)
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	4613      	mov	r3, r2
 80065c6:	005b      	lsls	r3, r3, #1
 80065c8:	4413      	add	r3, r2
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	440b      	add	r3, r1
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4619      	mov	r1, r3
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 fd8e 	bl	80070f4 <strstr>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d002      	beq.n	80065e4 <seek_4_event+0x48>
			return i;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	b21b      	sxth	r3, r3
 80065e2:	e007      	b.n	80065f4 <seek_4_event+0x58>
	for(int i = 0; i < EVENT_TABLE_SIZE; i++)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	3301      	adds	r3, #1
 80065e8:	60fb      	str	r3, [r7, #12]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2b07      	cmp	r3, #7
 80065ee:	dde7      	ble.n	80065c0 <seek_4_event+0x24>
	}
	return -1; // error
 80065f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	08007770 	.word	0x08007770

08006600 <event_init>:
bool event_init(void)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	af00      	add	r7, sp, #0
	queue_handle = xQueueCreate(CFG_EVENT_QUEUE_SIZE,CFG_DATA_BUFFER_SIZE);
 8006604:	2200      	movs	r2, #0
 8006606:	2164      	movs	r1, #100	; 0x64
 8006608:	200a      	movs	r0, #10
 800660a:	f7fd f80b 	bl	8003624 <xQueueGenericCreate>
 800660e:	4602      	mov	r2, r0
 8006610:	4b05      	ldr	r3, [pc, #20]	; (8006628 <event_init+0x28>)
 8006612:	601a      	str	r2, [r3, #0]

	if(queue_handle == NULL)
 8006614:	4b04      	ldr	r3, [pc, #16]	; (8006628 <event_init+0x28>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d101      	bne.n	8006620 <event_init+0x20>
		return false;
 800661c:	2300      	movs	r3, #0
 800661e:	e000      	b.n	8006622 <event_init+0x22>

	return true;
 8006620:	2301      	movs	r3, #1
}
 8006622:	4618      	mov	r0, r3
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	20003e44 	.word	0x20003e44

0800662c <event_send>:

bool event_send(char* text)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
	if (xQueueSend(queue_handle, text, 10) != pdPASS)
 8006634:	4b08      	ldr	r3, [pc, #32]	; (8006658 <event_send+0x2c>)
 8006636:	6818      	ldr	r0, [r3, #0]
 8006638:	2300      	movs	r3, #0
 800663a:	220a      	movs	r2, #10
 800663c:	6879      	ldr	r1, [r7, #4]
 800663e:	f7fd f84d 	bl	80036dc <xQueueGenericSend>
 8006642:	4603      	mov	r3, r0
 8006644:	2b01      	cmp	r3, #1
 8006646:	d001      	beq.n	800664c <event_send+0x20>
		return false;
 8006648:	2300      	movs	r3, #0
 800664a:	e000      	b.n	800664e <event_send+0x22>

	return true;
 800664c:	2301      	movs	r3, #1
}
 800664e:	4618      	mov	r0, r3
 8006650:	3708      	adds	r7, #8
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	20003e44 	.word	0x20003e44

0800665c <event_process>:

void event_process(void)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b0b4      	sub	sp, #208	; 0xd0
 8006660:	af00      	add	r7, sp, #0
	char text[CFG_DATA_BUFFER_SIZE] ;
	char args[CFG_DATA_BUFFER_SIZE];
	memset(text, 0, CFG_DATA_BUFFER_SIZE);
 8006662:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006666:	2264      	movs	r2, #100	; 0x64
 8006668:	2100      	movs	r1, #0
 800666a:	4618      	mov	r0, r3
 800666c:	f000 fc5d 	bl	8006f2a <memset>
	memset(args, 0, CFG_DATA_BUFFER_SIZE);
 8006670:	1d3b      	adds	r3, r7, #4
 8006672:	2264      	movs	r2, #100	; 0x64
 8006674:	2100      	movs	r1, #0
 8006676:	4618      	mov	r0, r3
 8006678:	f000 fc57 	bl	8006f2a <memset>

	int16_t id  = 0;
 800667c:	2300      	movs	r3, #0
 800667e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce

	if (xQueueReceive(queue_handle, text, 0) == pdTRUE)
 8006682:	4b17      	ldr	r3, [pc, #92]	; (80066e0 <event_process+0x84>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800668a:	2200      	movs	r2, #0
 800668c:	4618      	mov	r0, r3
 800668e:	f7fd f91f 	bl	80038d0 <xQueueReceive>
 8006692:	4603      	mov	r3, r0
 8006694:	2b01      	cmp	r3, #1
 8006696:	d11e      	bne.n	80066d6 <event_process+0x7a>
	{
		id = seek_4_event(text, args);
 8006698:	1d3a      	adds	r2, r7, #4
 800669a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800669e:	4611      	mov	r1, r2
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7ff ff7b 	bl	800659c <seek_4_event>
 80066a6:	4603      	mov	r3, r0
 80066a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
		if(id >= 0)
 80066ac:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	; 0xce
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	db0d      	blt.n	80066d0 <event_process+0x74>
			event_tab[id].cb(args);
 80066b4:	f9b7 20ce 	ldrsh.w	r2, [r7, #206]	; 0xce
 80066b8:	490a      	ldr	r1, [pc, #40]	; (80066e4 <event_process+0x88>)
 80066ba:	4613      	mov	r3, r2
 80066bc:	005b      	lsls	r3, r3, #1
 80066be:	4413      	add	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	440b      	add	r3, r1
 80066c4:	3308      	adds	r3, #8
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	1d3a      	adds	r2, r7, #4
 80066ca:	4610      	mov	r0, r2
 80066cc:	4798      	blx	r3
		else
			cli_send_string("Unknown command!\n\r");
	}
}
 80066ce:	e002      	b.n	80066d6 <event_process+0x7a>
			cli_send_string("Unknown command!\n\r");
 80066d0:	4805      	ldr	r0, [pc, #20]	; (80066e8 <event_process+0x8c>)
 80066d2:	f7fe feb1 	bl	8005438 <cli_send_string>
}
 80066d6:	bf00      	nop
 80066d8:	37d0      	adds	r7, #208	; 0xd0
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	20003e44 	.word	0x20003e44
 80066e4:	08007770 	.word	0x08007770
 80066e8:	080076f8 	.word	0x080076f8

080066ec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4a07      	ldr	r2, [pc, #28]	; (8006718 <vApplicationGetIdleTaskMemory+0x2c>)
 80066fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	4a06      	ldr	r2, [pc, #24]	; (800671c <vApplicationGetIdleTaskMemory+0x30>)
 8006702:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2280      	movs	r2, #128	; 0x80
 8006708:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800670a:	bf00      	nop
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	20003e48 	.word	0x20003e48
 800671c:	20003e9c 	.word	0x20003e9c

08006720 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b08a      	sub	sp, #40	; 0x28
 8006724:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006726:	f107 0314 	add.w	r3, r7, #20
 800672a:	2200      	movs	r2, #0
 800672c:	601a      	str	r2, [r3, #0]
 800672e:	605a      	str	r2, [r3, #4]
 8006730:	609a      	str	r2, [r3, #8]
 8006732:	60da      	str	r2, [r3, #12]
 8006734:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006736:	2300      	movs	r3, #0
 8006738:	613b      	str	r3, [r7, #16]
 800673a:	4b31      	ldr	r3, [pc, #196]	; (8006800 <MX_GPIO_Init+0xe0>)
 800673c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673e:	4a30      	ldr	r2, [pc, #192]	; (8006800 <MX_GPIO_Init+0xe0>)
 8006740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006744:	6313      	str	r3, [r2, #48]	; 0x30
 8006746:	4b2e      	ldr	r3, [pc, #184]	; (8006800 <MX_GPIO_Init+0xe0>)
 8006748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800674e:	613b      	str	r3, [r7, #16]
 8006750:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006752:	2300      	movs	r3, #0
 8006754:	60fb      	str	r3, [r7, #12]
 8006756:	4b2a      	ldr	r3, [pc, #168]	; (8006800 <MX_GPIO_Init+0xe0>)
 8006758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675a:	4a29      	ldr	r2, [pc, #164]	; (8006800 <MX_GPIO_Init+0xe0>)
 800675c:	f043 0308 	orr.w	r3, r3, #8
 8006760:	6313      	str	r3, [r2, #48]	; 0x30
 8006762:	4b27      	ldr	r3, [pc, #156]	; (8006800 <MX_GPIO_Init+0xe0>)
 8006764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006766:	f003 0308 	and.w	r3, r3, #8
 800676a:	60fb      	str	r3, [r7, #12]
 800676c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800676e:	2300      	movs	r3, #0
 8006770:	60bb      	str	r3, [r7, #8]
 8006772:	4b23      	ldr	r3, [pc, #140]	; (8006800 <MX_GPIO_Init+0xe0>)
 8006774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006776:	4a22      	ldr	r2, [pc, #136]	; (8006800 <MX_GPIO_Init+0xe0>)
 8006778:	f043 0301 	orr.w	r3, r3, #1
 800677c:	6313      	str	r3, [r2, #48]	; 0x30
 800677e:	4b20      	ldr	r3, [pc, #128]	; (8006800 <MX_GPIO_Init+0xe0>)
 8006780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	60bb      	str	r3, [r7, #8]
 8006788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800678a:	2300      	movs	r3, #0
 800678c:	607b      	str	r3, [r7, #4]
 800678e:	4b1c      	ldr	r3, [pc, #112]	; (8006800 <MX_GPIO_Init+0xe0>)
 8006790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006792:	4a1b      	ldr	r2, [pc, #108]	; (8006800 <MX_GPIO_Init+0xe0>)
 8006794:	f043 0302 	orr.w	r3, r3, #2
 8006798:	6313      	str	r3, [r2, #48]	; 0x30
 800679a:	4b19      	ldr	r3, [pc, #100]	; (8006800 <MX_GPIO_Init+0xe0>)
 800679c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679e:	f003 0302 	and.w	r3, r3, #2
 80067a2:	607b      	str	r3, [r7, #4]
 80067a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80067a6:	2201      	movs	r2, #1
 80067a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80067ac:	4815      	ldr	r0, [pc, #84]	; (8006804 <MX_GPIO_Init+0xe4>)
 80067ae:	f7fa fe7b 	bl	80014a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80067b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80067b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067b8:	2301      	movs	r3, #1
 80067ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80067bc:	2301      	movs	r3, #1
 80067be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067c0:	2300      	movs	r3, #0
 80067c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80067c4:	f107 0314 	add.w	r3, r7, #20
 80067c8:	4619      	mov	r1, r3
 80067ca:	480e      	ldr	r0, [pc, #56]	; (8006804 <MX_GPIO_Init+0xe4>)
 80067cc:	f7fa fcea 	bl	80011a4 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80067d0:	2200      	movs	r2, #0
 80067d2:	2104      	movs	r1, #4
 80067d4:	480c      	ldr	r0, [pc, #48]	; (8006808 <MX_GPIO_Init+0xe8>)
 80067d6:	f7fa fe67 	bl	80014a8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80067da:	2304      	movs	r3, #4
 80067dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067de:	2301      	movs	r3, #1
 80067e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067e2:	2300      	movs	r3, #0
 80067e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067e6:	2300      	movs	r3, #0
 80067e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067ea:	f107 0314 	add.w	r3, r7, #20
 80067ee:	4619      	mov	r1, r3
 80067f0:	4805      	ldr	r0, [pc, #20]	; (8006808 <MX_GPIO_Init+0xe8>)
 80067f2:	f7fa fcd7 	bl	80011a4 <HAL_GPIO_Init>

}
 80067f6:	bf00      	nop
 80067f8:	3728      	adds	r7, #40	; 0x28
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	40023800 	.word	0x40023800
 8006804:	40020c00 	.word	0x40020c00
 8006808:	40020000 	.word	0x40020000

0800680c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C3_Init(void)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8006810:	4b12      	ldr	r3, [pc, #72]	; (800685c <MX_I2C3_Init+0x50>)
 8006812:	4a13      	ldr	r2, [pc, #76]	; (8006860 <MX_I2C3_Init+0x54>)
 8006814:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8006816:	4b11      	ldr	r3, [pc, #68]	; (800685c <MX_I2C3_Init+0x50>)
 8006818:	4a12      	ldr	r2, [pc, #72]	; (8006864 <MX_I2C3_Init+0x58>)
 800681a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800681c:	4b0f      	ldr	r3, [pc, #60]	; (800685c <MX_I2C3_Init+0x50>)
 800681e:	2200      	movs	r2, #0
 8006820:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8006822:	4b0e      	ldr	r3, [pc, #56]	; (800685c <MX_I2C3_Init+0x50>)
 8006824:	2200      	movs	r2, #0
 8006826:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006828:	4b0c      	ldr	r3, [pc, #48]	; (800685c <MX_I2C3_Init+0x50>)
 800682a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800682e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006830:	4b0a      	ldr	r3, [pc, #40]	; (800685c <MX_I2C3_Init+0x50>)
 8006832:	2200      	movs	r2, #0
 8006834:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8006836:	4b09      	ldr	r3, [pc, #36]	; (800685c <MX_I2C3_Init+0x50>)
 8006838:	2200      	movs	r2, #0
 800683a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800683c:	4b07      	ldr	r3, [pc, #28]	; (800685c <MX_I2C3_Init+0x50>)
 800683e:	2200      	movs	r2, #0
 8006840:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006842:	4b06      	ldr	r3, [pc, #24]	; (800685c <MX_I2C3_Init+0x50>)
 8006844:	2200      	movs	r2, #0
 8006846:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8006848:	4804      	ldr	r0, [pc, #16]	; (800685c <MX_I2C3_Init+0x50>)
 800684a:	f7fa fe47 	bl	80014dc <HAL_I2C_Init>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d001      	beq.n	8006858 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8006854:	f000 f970 	bl	8006b38 <Error_Handler>
  }

}
 8006858:	bf00      	nop
 800685a:	bd80      	pop	{r7, pc}
 800685c:	20004134 	.word	0x20004134
 8006860:	40005c00 	.word	0x40005c00
 8006864:	000186a0 	.word	0x000186a0

08006868 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b08a      	sub	sp, #40	; 0x28
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006870:	f107 0314 	add.w	r3, r7, #20
 8006874:	2200      	movs	r2, #0
 8006876:	601a      	str	r2, [r3, #0]
 8006878:	605a      	str	r2, [r3, #4]
 800687a:	609a      	str	r2, [r3, #8]
 800687c:	60da      	str	r2, [r3, #12]
 800687e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a29      	ldr	r2, [pc, #164]	; (800692c <HAL_I2C_MspInit+0xc4>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d14b      	bne.n	8006922 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800688a:	2300      	movs	r3, #0
 800688c:	613b      	str	r3, [r7, #16]
 800688e:	4b28      	ldr	r3, [pc, #160]	; (8006930 <HAL_I2C_MspInit+0xc8>)
 8006890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006892:	4a27      	ldr	r2, [pc, #156]	; (8006930 <HAL_I2C_MspInit+0xc8>)
 8006894:	f043 0301 	orr.w	r3, r3, #1
 8006898:	6313      	str	r3, [r2, #48]	; 0x30
 800689a:	4b25      	ldr	r3, [pc, #148]	; (8006930 <HAL_I2C_MspInit+0xc8>)
 800689c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	613b      	str	r3, [r7, #16]
 80068a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80068a6:	2300      	movs	r3, #0
 80068a8:	60fb      	str	r3, [r7, #12]
 80068aa:	4b21      	ldr	r3, [pc, #132]	; (8006930 <HAL_I2C_MspInit+0xc8>)
 80068ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ae:	4a20      	ldr	r2, [pc, #128]	; (8006930 <HAL_I2C_MspInit+0xc8>)
 80068b0:	f043 0304 	orr.w	r3, r3, #4
 80068b4:	6313      	str	r3, [r2, #48]	; 0x30
 80068b6:	4b1e      	ldr	r3, [pc, #120]	; (8006930 <HAL_I2C_MspInit+0xc8>)
 80068b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ba:	f003 0304 	and.w	r3, r3, #4
 80068be:	60fb      	str	r3, [r7, #12]
 80068c0:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
     *
    PC9     ------> I2C1_SCL czerwony kabel
    PA8     ------> I2C1_SDA czarny
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80068c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80068c8:	2312      	movs	r3, #18
 80068ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80068cc:	2301      	movs	r3, #1
 80068ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068d0:	2303      	movs	r3, #3
 80068d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80068d4:	2304      	movs	r3, #4
 80068d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068d8:	f107 0314 	add.w	r3, r7, #20
 80068dc:	4619      	mov	r1, r3
 80068de:	4815      	ldr	r0, [pc, #84]	; (8006934 <HAL_I2C_MspInit+0xcc>)
 80068e0:	f7fa fc60 	bl	80011a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80068e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80068ea:	2312      	movs	r3, #18
 80068ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80068ee:	2301      	movs	r3, #1
 80068f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068f2:	2303      	movs	r3, #3
 80068f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80068f6:	2304      	movs	r3, #4
 80068f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80068fa:	f107 0314 	add.w	r3, r7, #20
 80068fe:	4619      	mov	r1, r3
 8006900:	480d      	ldr	r0, [pc, #52]	; (8006938 <HAL_I2C_MspInit+0xd0>)
 8006902:	f7fa fc4f 	bl	80011a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006906:	2300      	movs	r3, #0
 8006908:	60bb      	str	r3, [r7, #8]
 800690a:	4b09      	ldr	r3, [pc, #36]	; (8006930 <HAL_I2C_MspInit+0xc8>)
 800690c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690e:	4a08      	ldr	r2, [pc, #32]	; (8006930 <HAL_I2C_MspInit+0xc8>)
 8006910:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006914:	6413      	str	r3, [r2, #64]	; 0x40
 8006916:	4b06      	ldr	r3, [pc, #24]	; (8006930 <HAL_I2C_MspInit+0xc8>)
 8006918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800691e:	60bb      	str	r3, [r7, #8]
 8006920:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8006922:	bf00      	nop
 8006924:	3728      	adds	r7, #40	; 0x28
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	40005c00 	.word	0x40005c00
 8006930:	40023800 	.word	0x40023800
 8006934:	40020000 	.word	0x40020000
 8006938:	40020800 	.word	0x40020800

0800693c <init_task>:

void SystemClock_Config(void);
void MX_FREERTOS_Init(void);

static void init_task(TaskFunction_t task_cb, const char* task_name, const uint16_t stack_depth, void* const params, UBaseType_t priority, TaskHandle_t* const task_handle)
{
 800693c:	b590      	push	{r4, r7, lr}
 800693e:	b08b      	sub	sp, #44	; 0x2c
 8006940:	af02      	add	r7, sp, #8
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	603b      	str	r3, [r7, #0]
 8006948:	4613      	mov	r3, r2
 800694a:	80fb      	strh	r3, [r7, #6]

	char* s_pass = " inicialization passed!\n";
 800694c:	4b1e      	ldr	r3, [pc, #120]	; (80069c8 <init_task+0x8c>)
 800694e:	61fb      	str	r3, [r7, #28]
	char* s_fail = " inicialization failed!\n";
 8006950:	4b1e      	ldr	r3, [pc, #120]	; (80069cc <init_task+0x90>)
 8006952:	61bb      	str	r3, [r7, #24]
	char *result = malloc(strlen(task_name) + strlen(s_pass) + 1);
 8006954:	68b8      	ldr	r0, [r7, #8]
 8006956:	f7f9 fc4d 	bl	80001f4 <strlen>
 800695a:	4604      	mov	r4, r0
 800695c:	69f8      	ldr	r0, [r7, #28]
 800695e:	f7f9 fc49 	bl	80001f4 <strlen>
 8006962:	4603      	mov	r3, r0
 8006964:	4423      	add	r3, r4
 8006966:	3301      	adds	r3, #1
 8006968:	4618      	mov	r0, r3
 800696a:	f000 fac3 	bl	8006ef4 <malloc>
 800696e:	4603      	mov	r3, r0
 8006970:	617b      	str	r3, [r7, #20]


	if(xTaskCreate(task_cb, task_name, stack_depth, params, priority, task_handle) == pdPASS)
 8006972:	88fa      	ldrh	r2, [r7, #6]
 8006974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006976:	9301      	str	r3, [sp, #4]
 8006978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	68b9      	ldr	r1, [r7, #8]
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f7fd f9ea 	bl	8003d5a <xTaskCreate>
 8006986:	4603      	mov	r3, r0
 8006988:	2b01      	cmp	r3, #1
 800698a:	d10b      	bne.n	80069a4 <init_task+0x68>
	{
	    strcpy(result, task_name);
 800698c:	68b9      	ldr	r1, [r7, #8]
 800698e:	6978      	ldr	r0, [r7, #20]
 8006990:	f000 fba8 	bl	80070e4 <strcpy>
	    strcat(result, s_pass);
 8006994:	69f9      	ldr	r1, [r7, #28]
 8006996:	6978      	ldr	r0, [r7, #20]
 8006998:	f000 fb88 	bl	80070ac <strcat>
		cli_send_string(result);
 800699c:	6978      	ldr	r0, [r7, #20]
 800699e:	f7fe fd4b 	bl	8005438 <cli_send_string>
 80069a2:	e00a      	b.n	80069ba <init_task+0x7e>
	}
	else
	{
	    strcpy(result, task_name);
 80069a4:	68b9      	ldr	r1, [r7, #8]
 80069a6:	6978      	ldr	r0, [r7, #20]
 80069a8:	f000 fb9c 	bl	80070e4 <strcpy>
	    strcat(result, s_fail);
 80069ac:	69b9      	ldr	r1, [r7, #24]
 80069ae:	6978      	ldr	r0, [r7, #20]
 80069b0:	f000 fb7c 	bl	80070ac <strcat>
		cli_send_string(result);
 80069b4:	6978      	ldr	r0, [r7, #20]
 80069b6:	f7fe fd3f 	bl	8005438 <cli_send_string>
	}
    free(result);
 80069ba:	6978      	ldr	r0, [r7, #20]
 80069bc:	f000 faa2 	bl	8006f04 <free>
}
 80069c0:	bf00      	nop
 80069c2:	3724      	adds	r7, #36	; 0x24
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd90      	pop	{r4, r7, pc}
 80069c8:	0800770c 	.word	0x0800770c
 80069cc:	08007728 	.word	0x08007728

080069d0 <cli_task>:

void cli_task(void * args)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
//	TickType_t start = 0;
	cli_init();
 80069d8:	f7fe fd22 	bl	8005420 <cli_init>
	while(1)
	{
		cli_process();
 80069dc:	f7fe fd50 	bl	8005480 <cli_process>
 80069e0:	e7fc      	b.n	80069dc <cli_task+0xc>

080069e2 <event_task>:
//		vTaskDelayUntil(&start, 1);
	}
}

void event_task(void *args)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b084      	sub	sp, #16
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
	TickType_t start = 0;
 80069ea:	2300      	movs	r3, #0
 80069ec:	60fb      	str	r3, [r7, #12]
	event_init();
 80069ee:	f7ff fe07 	bl	8006600 <event_init>
	while(1)
	{
		event_process();
 80069f2:	f7ff fe33 	bl	800665c <event_process>
		vTaskDelayUntil(&start, 100);
 80069f6:	f107 030c 	add.w	r3, r7, #12
 80069fa:	2164      	movs	r1, #100	; 0x64
 80069fc:	4618      	mov	r0, r3
 80069fe:	f7fd fad9 	bl	8003fb4 <vTaskDelayUntil>
		event_process();
 8006a02:	e7f6      	b.n	80069f2 <event_task+0x10>

08006a04 <main>:
	}
}

int main(void)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af02      	add	r7, sp, #8
  HAL_Init();
 8006a0a:	f7f9 fed9 	bl	80007c0 <HAL_Init>
  SystemClock_Config();
 8006a0e:	f000 f829 	bl	8006a64 <SystemClock_Config>

  MX_GPIO_Init();
 8006a12:	f7ff fe85 	bl	8006720 <MX_GPIO_Init>
  MX_I2C3_Init();
 8006a16:	f7ff fef9 	bl	800680c <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8006a1a:	f000 f94d 	bl	8006cb8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8006a1e:	f7fe fc67 	bl	80052f0 <MX_ADC1_Init>

  init_task(cli_task, "CLI task", CFG_CLI_STACK_DEPTH, NULL, 4, NULL);
 8006a22:	2300      	movs	r3, #0
 8006a24:	9301      	str	r3, [sp, #4]
 8006a26:	2304      	movs	r3, #4
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8006a30:	4908      	ldr	r1, [pc, #32]	; (8006a54 <main+0x50>)
 8006a32:	4809      	ldr	r0, [pc, #36]	; (8006a58 <main+0x54>)
 8006a34:	f7ff ff82 	bl	800693c <init_task>
  init_task(event_task, "Event task", CFG_EVENT_STACK_DEPTH, NULL, 4, NULL);
 8006a38:	2300      	movs	r3, #0
 8006a3a:	9301      	str	r3, [sp, #4]
 8006a3c:	2304      	movs	r3, #4
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	2300      	movs	r3, #0
 8006a42:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006a46:	4905      	ldr	r1, [pc, #20]	; (8006a5c <main+0x58>)
 8006a48:	4805      	ldr	r0, [pc, #20]	; (8006a60 <main+0x5c>)
 8006a4a:	f7ff ff77 	bl	800693c <init_task>

  /* Start scheduler */
  osKernelStart();
 8006a4e:	f7fc fcc5 	bl	80033dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  while (1)
 8006a52:	e7fe      	b.n	8006a52 <main+0x4e>
 8006a54:	08007744 	.word	0x08007744
 8006a58:	080069d1 	.word	0x080069d1
 8006a5c:	08007750 	.word	0x08007750
 8006a60:	080069e3 	.word	0x080069e3

08006a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b094      	sub	sp, #80	; 0x50
 8006a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006a6a:	f107 0320 	add.w	r3, r7, #32
 8006a6e:	2230      	movs	r2, #48	; 0x30
 8006a70:	2100      	movs	r1, #0
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 fa59 	bl	8006f2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006a78:	f107 030c 	add.w	r3, r7, #12
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	601a      	str	r2, [r3, #0]
 8006a80:	605a      	str	r2, [r3, #4]
 8006a82:	609a      	str	r2, [r3, #8]
 8006a84:	60da      	str	r2, [r3, #12]
 8006a86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006a88:	2300      	movs	r3, #0
 8006a8a:	60bb      	str	r3, [r7, #8]
 8006a8c:	4b28      	ldr	r3, [pc, #160]	; (8006b30 <SystemClock_Config+0xcc>)
 8006a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a90:	4a27      	ldr	r2, [pc, #156]	; (8006b30 <SystemClock_Config+0xcc>)
 8006a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a96:	6413      	str	r3, [r2, #64]	; 0x40
 8006a98:	4b25      	ldr	r3, [pc, #148]	; (8006b30 <SystemClock_Config+0xcc>)
 8006a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aa0:	60bb      	str	r3, [r7, #8]
 8006aa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	607b      	str	r3, [r7, #4]
 8006aa8:	4b22      	ldr	r3, [pc, #136]	; (8006b34 <SystemClock_Config+0xd0>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006ab0:	4a20      	ldr	r2, [pc, #128]	; (8006b34 <SystemClock_Config+0xd0>)
 8006ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ab6:	6013      	str	r3, [r2, #0]
 8006ab8:	4b1e      	ldr	r3, [pc, #120]	; (8006b34 <SystemClock_Config+0xd0>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006ac0:	607b      	str	r3, [r7, #4]
 8006ac2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006ac8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006acc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006ace:	2302      	movs	r3, #2
 8006ad0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006ad2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006ad8:	2308      	movs	r3, #8
 8006ada:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8006adc:	2364      	movs	r3, #100	; 0x64
 8006ade:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8006ae4:	2307      	movs	r3, #7
 8006ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006ae8:	f107 0320 	add.w	r3, r7, #32
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7fb fc75 	bl	80023dc <HAL_RCC_OscConfig>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d001      	beq.n	8006afc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8006af8:	f000 f81e 	bl	8006b38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006afc:	230f      	movs	r3, #15
 8006afe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006b00:	2302      	movs	r3, #2
 8006b02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006b04:	2300      	movs	r3, #0
 8006b06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006b08:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006b0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006b12:	f107 030c 	add.w	r3, r7, #12
 8006b16:	2101      	movs	r1, #1
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7fb fea1 	bl	8002860 <HAL_RCC_ClockConfig>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d001      	beq.n	8006b28 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8006b24:	f000 f808 	bl	8006b38 <Error_Handler>
  }
}
 8006b28:	bf00      	nop
 8006b2a:	3750      	adds	r7, #80	; 0x50
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	40023800 	.word	0x40023800
 8006b34:	40007000 	.word	0x40007000

08006b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	cli_send_string("ERROR HANDLER!\n\r");
 8006b3c:	4802      	ldr	r0, [pc, #8]	; (8006b48 <Error_Handler+0x10>)
 8006b3e:	f7fe fc7b 	bl	8005438 <cli_send_string>
  /* USER CODE END Error_Handler_Debug */
}
 8006b42:	bf00      	nop
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	0800775c 	.word	0x0800775c

08006b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b52:	2300      	movs	r3, #0
 8006b54:	607b      	str	r3, [r7, #4]
 8006b56:	4b12      	ldr	r3, [pc, #72]	; (8006ba0 <HAL_MspInit+0x54>)
 8006b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b5a:	4a11      	ldr	r2, [pc, #68]	; (8006ba0 <HAL_MspInit+0x54>)
 8006b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b60:	6453      	str	r3, [r2, #68]	; 0x44
 8006b62:	4b0f      	ldr	r3, [pc, #60]	; (8006ba0 <HAL_MspInit+0x54>)
 8006b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b6a:	607b      	str	r3, [r7, #4]
 8006b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b6e:	2300      	movs	r3, #0
 8006b70:	603b      	str	r3, [r7, #0]
 8006b72:	4b0b      	ldr	r3, [pc, #44]	; (8006ba0 <HAL_MspInit+0x54>)
 8006b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b76:	4a0a      	ldr	r2, [pc, #40]	; (8006ba0 <HAL_MspInit+0x54>)
 8006b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8006b7e:	4b08      	ldr	r3, [pc, #32]	; (8006ba0 <HAL_MspInit+0x54>)
 8006b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b86:	603b      	str	r3, [r7, #0]
 8006b88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	210f      	movs	r1, #15
 8006b8e:	f06f 0001 	mvn.w	r0, #1
 8006b92:	f7fa fade 	bl	8001152 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006b96:	bf00      	nop
 8006b98:	3708      	adds	r7, #8
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	40023800 	.word	0x40023800

08006ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006ba8:	bf00      	nop
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr

08006bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006bb2:	b480      	push	{r7}
 8006bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006bb6:	e7fe      	b.n	8006bb6 <HardFault_Handler+0x4>

08006bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006bbc:	e7fe      	b.n	8006bbc <MemManage_Handler+0x4>

08006bbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006bc2:	e7fe      	b.n	8006bc2 <BusFault_Handler+0x4>

08006bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006bc8:	e7fe      	b.n	8006bc8 <UsageFault_Handler+0x4>

08006bca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006bce:	bf00      	nop
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006bdc:	f7f9 fe42 	bl	8000864 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006be0:	f7fd fea4 	bl	800492c <xTaskGetSchedulerState>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d001      	beq.n	8006bee <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8006bea:	f7fe f95d 	bl	8004ea8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006bee:	bf00      	nop
 8006bf0:	bd80      	pop	{r7, pc}
	...

08006bf4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006bfc:	4b11      	ldr	r3, [pc, #68]	; (8006c44 <_sbrk+0x50>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d102      	bne.n	8006c0a <_sbrk+0x16>
		heap_end = &end;
 8006c04:	4b0f      	ldr	r3, [pc, #60]	; (8006c44 <_sbrk+0x50>)
 8006c06:	4a10      	ldr	r2, [pc, #64]	; (8006c48 <_sbrk+0x54>)
 8006c08:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006c0a:	4b0e      	ldr	r3, [pc, #56]	; (8006c44 <_sbrk+0x50>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006c10:	4b0c      	ldr	r3, [pc, #48]	; (8006c44 <_sbrk+0x50>)
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4413      	add	r3, r2
 8006c18:	466a      	mov	r2, sp
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d907      	bls.n	8006c2e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006c1e:	f000 f925 	bl	8006e6c <__errno>
 8006c22:	4602      	mov	r2, r0
 8006c24:	230c      	movs	r3, #12
 8006c26:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006c28:	f04f 33ff 	mov.w	r3, #4294967295
 8006c2c:	e006      	b.n	8006c3c <_sbrk+0x48>
	}

	heap_end += incr;
 8006c2e:	4b05      	ldr	r3, [pc, #20]	; (8006c44 <_sbrk+0x50>)
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4413      	add	r3, r2
 8006c36:	4a03      	ldr	r2, [pc, #12]	; (8006c44 <_sbrk+0x50>)
 8006c38:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	2000409c 	.word	0x2000409c
 8006c48:	20004190 	.word	0x20004190

08006c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006c50:	4b16      	ldr	r3, [pc, #88]	; (8006cac <SystemInit+0x60>)
 8006c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c56:	4a15      	ldr	r2, [pc, #84]	; (8006cac <SystemInit+0x60>)
 8006c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006c60:	4b13      	ldr	r3, [pc, #76]	; (8006cb0 <SystemInit+0x64>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a12      	ldr	r2, [pc, #72]	; (8006cb0 <SystemInit+0x64>)
 8006c66:	f043 0301 	orr.w	r3, r3, #1
 8006c6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006c6c:	4b10      	ldr	r3, [pc, #64]	; (8006cb0 <SystemInit+0x64>)
 8006c6e:	2200      	movs	r2, #0
 8006c70:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006c72:	4b0f      	ldr	r3, [pc, #60]	; (8006cb0 <SystemInit+0x64>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a0e      	ldr	r2, [pc, #56]	; (8006cb0 <SystemInit+0x64>)
 8006c78:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006c7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c80:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006c82:	4b0b      	ldr	r3, [pc, #44]	; (8006cb0 <SystemInit+0x64>)
 8006c84:	4a0b      	ldr	r2, [pc, #44]	; (8006cb4 <SystemInit+0x68>)
 8006c86:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006c88:	4b09      	ldr	r3, [pc, #36]	; (8006cb0 <SystemInit+0x64>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a08      	ldr	r2, [pc, #32]	; (8006cb0 <SystemInit+0x64>)
 8006c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c92:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006c94:	4b06      	ldr	r3, [pc, #24]	; (8006cb0 <SystemInit+0x64>)
 8006c96:	2200      	movs	r2, #0
 8006c98:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006c9a:	4b04      	ldr	r3, [pc, #16]	; (8006cac <SystemInit+0x60>)
 8006c9c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006ca0:	609a      	str	r2, [r3, #8]
#endif
}
 8006ca2:	bf00      	nop
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	e000ed00 	.word	0xe000ed00
 8006cb0:	40023800 	.word	0x40023800
 8006cb4:	24003010 	.word	0x24003010

08006cb8 <MX_USART1_UART_Init>:
//UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8006cbc:	4b11      	ldr	r3, [pc, #68]	; (8006d04 <MX_USART1_UART_Init+0x4c>)
 8006cbe:	4a12      	ldr	r2, [pc, #72]	; (8006d08 <MX_USART1_UART_Init+0x50>)
 8006cc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006cc2:	4b10      	ldr	r3, [pc, #64]	; (8006d04 <MX_USART1_UART_Init+0x4c>)
 8006cc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006cc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006cca:	4b0e      	ldr	r3, [pc, #56]	; (8006d04 <MX_USART1_UART_Init+0x4c>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006cd0:	4b0c      	ldr	r3, [pc, #48]	; (8006d04 <MX_USART1_UART_Init+0x4c>)
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006cd6:	4b0b      	ldr	r3, [pc, #44]	; (8006d04 <MX_USART1_UART_Init+0x4c>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006cdc:	4b09      	ldr	r3, [pc, #36]	; (8006d04 <MX_USART1_UART_Init+0x4c>)
 8006cde:	220c      	movs	r2, #12
 8006ce0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006ce2:	4b08      	ldr	r3, [pc, #32]	; (8006d04 <MX_USART1_UART_Init+0x4c>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006ce8:	4b06      	ldr	r3, [pc, #24]	; (8006d04 <MX_USART1_UART_Init+0x4c>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006cee:	4805      	ldr	r0, [pc, #20]	; (8006d04 <MX_USART1_UART_Init+0x4c>)
 8006cf0:	f7fb ffa4 	bl	8002c3c <HAL_UART_Init>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d001      	beq.n	8006cfe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006cfa:	f7ff ff1d 	bl	8006b38 <Error_Handler>
  }

}
 8006cfe:	bf00      	nop
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	200040f4 	.word	0x200040f4
 8006d08:	40011000 	.word	0x40011000

08006d0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b08a      	sub	sp, #40	; 0x28
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d14:	f107 0314 	add.w	r3, r7, #20
 8006d18:	2200      	movs	r2, #0
 8006d1a:	601a      	str	r2, [r3, #0]
 8006d1c:	605a      	str	r2, [r3, #4]
 8006d1e:	609a      	str	r2, [r3, #8]
 8006d20:	60da      	str	r2, [r3, #12]
 8006d22:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a19      	ldr	r2, [pc, #100]	; (8006d90 <HAL_UART_MspInit+0x84>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d12b      	bne.n	8006d86 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006d2e:	2300      	movs	r3, #0
 8006d30:	613b      	str	r3, [r7, #16]
 8006d32:	4b18      	ldr	r3, [pc, #96]	; (8006d94 <HAL_UART_MspInit+0x88>)
 8006d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d36:	4a17      	ldr	r2, [pc, #92]	; (8006d94 <HAL_UART_MspInit+0x88>)
 8006d38:	f043 0310 	orr.w	r3, r3, #16
 8006d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8006d3e:	4b15      	ldr	r3, [pc, #84]	; (8006d94 <HAL_UART_MspInit+0x88>)
 8006d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d42:	f003 0310 	and.w	r3, r3, #16
 8006d46:	613b      	str	r3, [r7, #16]
 8006d48:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	60fb      	str	r3, [r7, #12]
 8006d4e:	4b11      	ldr	r3, [pc, #68]	; (8006d94 <HAL_UART_MspInit+0x88>)
 8006d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d52:	4a10      	ldr	r2, [pc, #64]	; (8006d94 <HAL_UART_MspInit+0x88>)
 8006d54:	f043 0302 	orr.w	r3, r3, #2
 8006d58:	6313      	str	r3, [r2, #48]	; 0x30
 8006d5a:	4b0e      	ldr	r3, [pc, #56]	; (8006d94 <HAL_UART_MspInit+0x88>)
 8006d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	60fb      	str	r3, [r7, #12]
 8006d64:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006d66:	23c0      	movs	r3, #192	; 0xc0
 8006d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d6a:	2302      	movs	r3, #2
 8006d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d72:	2303      	movs	r3, #3
 8006d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006d76:	2307      	movs	r3, #7
 8006d78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d7a:	f107 0314 	add.w	r3, r7, #20
 8006d7e:	4619      	mov	r1, r3
 8006d80:	4805      	ldr	r0, [pc, #20]	; (8006d98 <HAL_UART_MspInit+0x8c>)
 8006d82:	f7fa fa0f 	bl	80011a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006d86:	bf00      	nop
 8006d88:	3728      	adds	r7, #40	; 0x28
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	40011000 	.word	0x40011000
 8006d94:	40023800 	.word	0x40023800
 8006d98:	40020400 	.word	0x40020400

08006d9c <hex2int>:
/**
 * @briefhex2int
 * @note take a hex string and convert it to a 32bit number (max 8 hex digits)
 */
uint32_t hex2int(char *hex)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
    uint32_t val = 0;
 8006da4:	2300      	movs	r3, #0
 8006da6:	60fb      	str	r3, [r7, #12]
    while (*hex) {
 8006da8:	e02b      	b.n	8006e02 <hex2int+0x66>
        // get current character then increment
        uint8_t byte = *hex++;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	1c5a      	adds	r2, r3, #1
 8006dae:	607a      	str	r2, [r7, #4]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	72fb      	strb	r3, [r7, #11]
        // transform hex character to the 4bit equivalent number, using the ascii table indexes
        if (byte >= '0' && byte <= '9') byte = byte - '0';
 8006db4:	7afb      	ldrb	r3, [r7, #11]
 8006db6:	2b2f      	cmp	r3, #47	; 0x2f
 8006db8:	d906      	bls.n	8006dc8 <hex2int+0x2c>
 8006dba:	7afb      	ldrb	r3, [r7, #11]
 8006dbc:	2b39      	cmp	r3, #57	; 0x39
 8006dbe:	d803      	bhi.n	8006dc8 <hex2int+0x2c>
 8006dc0:	7afb      	ldrb	r3, [r7, #11]
 8006dc2:	3b30      	subs	r3, #48	; 0x30
 8006dc4:	72fb      	strb	r3, [r7, #11]
 8006dc6:	e012      	b.n	8006dee <hex2int+0x52>
        else if (byte >= 'a' && byte <='f') byte = byte - 'a' + 10;
 8006dc8:	7afb      	ldrb	r3, [r7, #11]
 8006dca:	2b60      	cmp	r3, #96	; 0x60
 8006dcc:	d906      	bls.n	8006ddc <hex2int+0x40>
 8006dce:	7afb      	ldrb	r3, [r7, #11]
 8006dd0:	2b66      	cmp	r3, #102	; 0x66
 8006dd2:	d803      	bhi.n	8006ddc <hex2int+0x40>
 8006dd4:	7afb      	ldrb	r3, [r7, #11]
 8006dd6:	3b57      	subs	r3, #87	; 0x57
 8006dd8:	72fb      	strb	r3, [r7, #11]
 8006dda:	e008      	b.n	8006dee <hex2int+0x52>
        else if (byte >= 'A' && byte <='F') byte = byte - 'A' + 10;
 8006ddc:	7afb      	ldrb	r3, [r7, #11]
 8006dde:	2b40      	cmp	r3, #64	; 0x40
 8006de0:	d905      	bls.n	8006dee <hex2int+0x52>
 8006de2:	7afb      	ldrb	r3, [r7, #11]
 8006de4:	2b46      	cmp	r3, #70	; 0x46
 8006de6:	d802      	bhi.n	8006dee <hex2int+0x52>
 8006de8:	7afb      	ldrb	r3, [r7, #11]
 8006dea:	3b37      	subs	r3, #55	; 0x37
 8006dec:	72fb      	strb	r3, [r7, #11]

        if (byte  != 'x')
 8006dee:	7afb      	ldrb	r3, [r7, #11]
 8006df0:	2b78      	cmp	r3, #120	; 0x78
 8006df2:	d006      	beq.n	8006e02 <hex2int+0x66>
        // shift 4 to make space for new digit, and add the 4 bits of the new digit
        	val = (val << 4) | (byte & 0xF);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	011a      	lsls	r2, r3, #4
 8006df8:	7afb      	ldrb	r3, [r7, #11]
 8006dfa:	f003 030f 	and.w	r3, r3, #15
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	60fb      	str	r3, [r7, #12]
    while (*hex) {
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1cf      	bne.n	8006daa <hex2int+0xe>
    }
    return val;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3714      	adds	r7, #20
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <Reset_Handler>:





  ldr   sp, =_estack      /* set stack pointer */
 8006e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006e50 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006e1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006e1e:	e003      	b.n	8006e28 <LoopCopyDataInit>

08006e20 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006e20:	4b0c      	ldr	r3, [pc, #48]	; (8006e54 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006e22:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006e24:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006e26:	3104      	adds	r1, #4

08006e28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006e28:	480b      	ldr	r0, [pc, #44]	; (8006e58 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006e2a:	4b0c      	ldr	r3, [pc, #48]	; (8006e5c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006e2c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006e2e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006e30:	d3f6      	bcc.n	8006e20 <CopyDataInit>
  ldr  r2, =_sbss
 8006e32:	4a0b      	ldr	r2, [pc, #44]	; (8006e60 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006e34:	e002      	b.n	8006e3c <LoopFillZerobss>

08006e36 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006e36:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006e38:	f842 3b04 	str.w	r3, [r2], #4

08006e3c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006e3c:	4b09      	ldr	r3, [pc, #36]	; (8006e64 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006e3e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006e40:	d3f9      	bcc.n	8006e36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006e42:	f7ff ff03 	bl	8006c4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006e46:	f000 f817 	bl	8006e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006e4a:	f7ff fddb 	bl	8006a04 <main>
  bx  lr    
 8006e4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006e50:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8006e54:	08007880 	.word	0x08007880
  ldr  r0, =_sdata
 8006e58:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006e5c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8006e60:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8006e64:	2000418c 	.word	0x2000418c

08006e68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006e68:	e7fe      	b.n	8006e68 <ADC_IRQHandler>
	...

08006e6c <__errno>:
 8006e6c:	4b01      	ldr	r3, [pc, #4]	; (8006e74 <__errno+0x8>)
 8006e6e:	6818      	ldr	r0, [r3, #0]
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	20000010 	.word	0x20000010

08006e78 <__libc_init_array>:
 8006e78:	b570      	push	{r4, r5, r6, lr}
 8006e7a:	4e0d      	ldr	r6, [pc, #52]	; (8006eb0 <__libc_init_array+0x38>)
 8006e7c:	4c0d      	ldr	r4, [pc, #52]	; (8006eb4 <__libc_init_array+0x3c>)
 8006e7e:	1ba4      	subs	r4, r4, r6
 8006e80:	10a4      	asrs	r4, r4, #2
 8006e82:	2500      	movs	r5, #0
 8006e84:	42a5      	cmp	r5, r4
 8006e86:	d109      	bne.n	8006e9c <__libc_init_array+0x24>
 8006e88:	4e0b      	ldr	r6, [pc, #44]	; (8006eb8 <__libc_init_array+0x40>)
 8006e8a:	4c0c      	ldr	r4, [pc, #48]	; (8006ebc <__libc_init_array+0x44>)
 8006e8c:	f000 f98c 	bl	80071a8 <_init>
 8006e90:	1ba4      	subs	r4, r4, r6
 8006e92:	10a4      	asrs	r4, r4, #2
 8006e94:	2500      	movs	r5, #0
 8006e96:	42a5      	cmp	r5, r4
 8006e98:	d105      	bne.n	8006ea6 <__libc_init_array+0x2e>
 8006e9a:	bd70      	pop	{r4, r5, r6, pc}
 8006e9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ea0:	4798      	blx	r3
 8006ea2:	3501      	adds	r5, #1
 8006ea4:	e7ee      	b.n	8006e84 <__libc_init_array+0xc>
 8006ea6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006eaa:	4798      	blx	r3
 8006eac:	3501      	adds	r5, #1
 8006eae:	e7f2      	b.n	8006e96 <__libc_init_array+0x1e>
 8006eb0:	08007878 	.word	0x08007878
 8006eb4:	08007878 	.word	0x08007878
 8006eb8:	08007878 	.word	0x08007878
 8006ebc:	0800787c 	.word	0x0800787c

08006ec0 <__itoa>:
 8006ec0:	1e93      	subs	r3, r2, #2
 8006ec2:	2b22      	cmp	r3, #34	; 0x22
 8006ec4:	b510      	push	{r4, lr}
 8006ec6:	460c      	mov	r4, r1
 8006ec8:	d904      	bls.n	8006ed4 <__itoa+0x14>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	700b      	strb	r3, [r1, #0]
 8006ece:	461c      	mov	r4, r3
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	bd10      	pop	{r4, pc}
 8006ed4:	2a0a      	cmp	r2, #10
 8006ed6:	d109      	bne.n	8006eec <__itoa+0x2c>
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	da07      	bge.n	8006eec <__itoa+0x2c>
 8006edc:	232d      	movs	r3, #45	; 0x2d
 8006ede:	700b      	strb	r3, [r1, #0]
 8006ee0:	4240      	negs	r0, r0
 8006ee2:	2101      	movs	r1, #1
 8006ee4:	4421      	add	r1, r4
 8006ee6:	f000 f91f 	bl	8007128 <__utoa>
 8006eea:	e7f1      	b.n	8006ed0 <__itoa+0x10>
 8006eec:	2100      	movs	r1, #0
 8006eee:	e7f9      	b.n	8006ee4 <__itoa+0x24>

08006ef0 <itoa>:
 8006ef0:	f7ff bfe6 	b.w	8006ec0 <__itoa>

08006ef4 <malloc>:
 8006ef4:	4b02      	ldr	r3, [pc, #8]	; (8006f00 <malloc+0xc>)
 8006ef6:	4601      	mov	r1, r0
 8006ef8:	6818      	ldr	r0, [r3, #0]
 8006efa:	f000 b86d 	b.w	8006fd8 <_malloc_r>
 8006efe:	bf00      	nop
 8006f00:	20000010 	.word	0x20000010

08006f04 <free>:
 8006f04:	4b02      	ldr	r3, [pc, #8]	; (8006f10 <free+0xc>)
 8006f06:	4601      	mov	r1, r0
 8006f08:	6818      	ldr	r0, [r3, #0]
 8006f0a:	f000 b817 	b.w	8006f3c <_free_r>
 8006f0e:	bf00      	nop
 8006f10:	20000010 	.word	0x20000010

08006f14 <memcpy>:
 8006f14:	b510      	push	{r4, lr}
 8006f16:	1e43      	subs	r3, r0, #1
 8006f18:	440a      	add	r2, r1
 8006f1a:	4291      	cmp	r1, r2
 8006f1c:	d100      	bne.n	8006f20 <memcpy+0xc>
 8006f1e:	bd10      	pop	{r4, pc}
 8006f20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f28:	e7f7      	b.n	8006f1a <memcpy+0x6>

08006f2a <memset>:
 8006f2a:	4402      	add	r2, r0
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d100      	bne.n	8006f34 <memset+0xa>
 8006f32:	4770      	bx	lr
 8006f34:	f803 1b01 	strb.w	r1, [r3], #1
 8006f38:	e7f9      	b.n	8006f2e <memset+0x4>
	...

08006f3c <_free_r>:
 8006f3c:	b538      	push	{r3, r4, r5, lr}
 8006f3e:	4605      	mov	r5, r0
 8006f40:	2900      	cmp	r1, #0
 8006f42:	d045      	beq.n	8006fd0 <_free_r+0x94>
 8006f44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f48:	1f0c      	subs	r4, r1, #4
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	bfb8      	it	lt
 8006f4e:	18e4      	addlt	r4, r4, r3
 8006f50:	f000 f928 	bl	80071a4 <__malloc_lock>
 8006f54:	4a1f      	ldr	r2, [pc, #124]	; (8006fd4 <_free_r+0x98>)
 8006f56:	6813      	ldr	r3, [r2, #0]
 8006f58:	4610      	mov	r0, r2
 8006f5a:	b933      	cbnz	r3, 8006f6a <_free_r+0x2e>
 8006f5c:	6063      	str	r3, [r4, #4]
 8006f5e:	6014      	str	r4, [r2, #0]
 8006f60:	4628      	mov	r0, r5
 8006f62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f66:	f000 b91e 	b.w	80071a6 <__malloc_unlock>
 8006f6a:	42a3      	cmp	r3, r4
 8006f6c:	d90c      	bls.n	8006f88 <_free_r+0x4c>
 8006f6e:	6821      	ldr	r1, [r4, #0]
 8006f70:	1862      	adds	r2, r4, r1
 8006f72:	4293      	cmp	r3, r2
 8006f74:	bf04      	itt	eq
 8006f76:	681a      	ldreq	r2, [r3, #0]
 8006f78:	685b      	ldreq	r3, [r3, #4]
 8006f7a:	6063      	str	r3, [r4, #4]
 8006f7c:	bf04      	itt	eq
 8006f7e:	1852      	addeq	r2, r2, r1
 8006f80:	6022      	streq	r2, [r4, #0]
 8006f82:	6004      	str	r4, [r0, #0]
 8006f84:	e7ec      	b.n	8006f60 <_free_r+0x24>
 8006f86:	4613      	mov	r3, r2
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	b10a      	cbz	r2, 8006f90 <_free_r+0x54>
 8006f8c:	42a2      	cmp	r2, r4
 8006f8e:	d9fa      	bls.n	8006f86 <_free_r+0x4a>
 8006f90:	6819      	ldr	r1, [r3, #0]
 8006f92:	1858      	adds	r0, r3, r1
 8006f94:	42a0      	cmp	r0, r4
 8006f96:	d10b      	bne.n	8006fb0 <_free_r+0x74>
 8006f98:	6820      	ldr	r0, [r4, #0]
 8006f9a:	4401      	add	r1, r0
 8006f9c:	1858      	adds	r0, r3, r1
 8006f9e:	4282      	cmp	r2, r0
 8006fa0:	6019      	str	r1, [r3, #0]
 8006fa2:	d1dd      	bne.n	8006f60 <_free_r+0x24>
 8006fa4:	6810      	ldr	r0, [r2, #0]
 8006fa6:	6852      	ldr	r2, [r2, #4]
 8006fa8:	605a      	str	r2, [r3, #4]
 8006faa:	4401      	add	r1, r0
 8006fac:	6019      	str	r1, [r3, #0]
 8006fae:	e7d7      	b.n	8006f60 <_free_r+0x24>
 8006fb0:	d902      	bls.n	8006fb8 <_free_r+0x7c>
 8006fb2:	230c      	movs	r3, #12
 8006fb4:	602b      	str	r3, [r5, #0]
 8006fb6:	e7d3      	b.n	8006f60 <_free_r+0x24>
 8006fb8:	6820      	ldr	r0, [r4, #0]
 8006fba:	1821      	adds	r1, r4, r0
 8006fbc:	428a      	cmp	r2, r1
 8006fbe:	bf04      	itt	eq
 8006fc0:	6811      	ldreq	r1, [r2, #0]
 8006fc2:	6852      	ldreq	r2, [r2, #4]
 8006fc4:	6062      	str	r2, [r4, #4]
 8006fc6:	bf04      	itt	eq
 8006fc8:	1809      	addeq	r1, r1, r0
 8006fca:	6021      	streq	r1, [r4, #0]
 8006fcc:	605c      	str	r4, [r3, #4]
 8006fce:	e7c7      	b.n	8006f60 <_free_r+0x24>
 8006fd0:	bd38      	pop	{r3, r4, r5, pc}
 8006fd2:	bf00      	nop
 8006fd4:	200040a0 	.word	0x200040a0

08006fd8 <_malloc_r>:
 8006fd8:	b570      	push	{r4, r5, r6, lr}
 8006fda:	1ccd      	adds	r5, r1, #3
 8006fdc:	f025 0503 	bic.w	r5, r5, #3
 8006fe0:	3508      	adds	r5, #8
 8006fe2:	2d0c      	cmp	r5, #12
 8006fe4:	bf38      	it	cc
 8006fe6:	250c      	movcc	r5, #12
 8006fe8:	2d00      	cmp	r5, #0
 8006fea:	4606      	mov	r6, r0
 8006fec:	db01      	blt.n	8006ff2 <_malloc_r+0x1a>
 8006fee:	42a9      	cmp	r1, r5
 8006ff0:	d903      	bls.n	8006ffa <_malloc_r+0x22>
 8006ff2:	230c      	movs	r3, #12
 8006ff4:	6033      	str	r3, [r6, #0]
 8006ff6:	2000      	movs	r0, #0
 8006ff8:	bd70      	pop	{r4, r5, r6, pc}
 8006ffa:	f000 f8d3 	bl	80071a4 <__malloc_lock>
 8006ffe:	4a21      	ldr	r2, [pc, #132]	; (8007084 <_malloc_r+0xac>)
 8007000:	6814      	ldr	r4, [r2, #0]
 8007002:	4621      	mov	r1, r4
 8007004:	b991      	cbnz	r1, 800702c <_malloc_r+0x54>
 8007006:	4c20      	ldr	r4, [pc, #128]	; (8007088 <_malloc_r+0xb0>)
 8007008:	6823      	ldr	r3, [r4, #0]
 800700a:	b91b      	cbnz	r3, 8007014 <_malloc_r+0x3c>
 800700c:	4630      	mov	r0, r6
 800700e:	f000 f83d 	bl	800708c <_sbrk_r>
 8007012:	6020      	str	r0, [r4, #0]
 8007014:	4629      	mov	r1, r5
 8007016:	4630      	mov	r0, r6
 8007018:	f000 f838 	bl	800708c <_sbrk_r>
 800701c:	1c43      	adds	r3, r0, #1
 800701e:	d124      	bne.n	800706a <_malloc_r+0x92>
 8007020:	230c      	movs	r3, #12
 8007022:	6033      	str	r3, [r6, #0]
 8007024:	4630      	mov	r0, r6
 8007026:	f000 f8be 	bl	80071a6 <__malloc_unlock>
 800702a:	e7e4      	b.n	8006ff6 <_malloc_r+0x1e>
 800702c:	680b      	ldr	r3, [r1, #0]
 800702e:	1b5b      	subs	r3, r3, r5
 8007030:	d418      	bmi.n	8007064 <_malloc_r+0x8c>
 8007032:	2b0b      	cmp	r3, #11
 8007034:	d90f      	bls.n	8007056 <_malloc_r+0x7e>
 8007036:	600b      	str	r3, [r1, #0]
 8007038:	50cd      	str	r5, [r1, r3]
 800703a:	18cc      	adds	r4, r1, r3
 800703c:	4630      	mov	r0, r6
 800703e:	f000 f8b2 	bl	80071a6 <__malloc_unlock>
 8007042:	f104 000b 	add.w	r0, r4, #11
 8007046:	1d23      	adds	r3, r4, #4
 8007048:	f020 0007 	bic.w	r0, r0, #7
 800704c:	1ac3      	subs	r3, r0, r3
 800704e:	d0d3      	beq.n	8006ff8 <_malloc_r+0x20>
 8007050:	425a      	negs	r2, r3
 8007052:	50e2      	str	r2, [r4, r3]
 8007054:	e7d0      	b.n	8006ff8 <_malloc_r+0x20>
 8007056:	428c      	cmp	r4, r1
 8007058:	684b      	ldr	r3, [r1, #4]
 800705a:	bf16      	itet	ne
 800705c:	6063      	strne	r3, [r4, #4]
 800705e:	6013      	streq	r3, [r2, #0]
 8007060:	460c      	movne	r4, r1
 8007062:	e7eb      	b.n	800703c <_malloc_r+0x64>
 8007064:	460c      	mov	r4, r1
 8007066:	6849      	ldr	r1, [r1, #4]
 8007068:	e7cc      	b.n	8007004 <_malloc_r+0x2c>
 800706a:	1cc4      	adds	r4, r0, #3
 800706c:	f024 0403 	bic.w	r4, r4, #3
 8007070:	42a0      	cmp	r0, r4
 8007072:	d005      	beq.n	8007080 <_malloc_r+0xa8>
 8007074:	1a21      	subs	r1, r4, r0
 8007076:	4630      	mov	r0, r6
 8007078:	f000 f808 	bl	800708c <_sbrk_r>
 800707c:	3001      	adds	r0, #1
 800707e:	d0cf      	beq.n	8007020 <_malloc_r+0x48>
 8007080:	6025      	str	r5, [r4, #0]
 8007082:	e7db      	b.n	800703c <_malloc_r+0x64>
 8007084:	200040a0 	.word	0x200040a0
 8007088:	200040a4 	.word	0x200040a4

0800708c <_sbrk_r>:
 800708c:	b538      	push	{r3, r4, r5, lr}
 800708e:	4c06      	ldr	r4, [pc, #24]	; (80070a8 <_sbrk_r+0x1c>)
 8007090:	2300      	movs	r3, #0
 8007092:	4605      	mov	r5, r0
 8007094:	4608      	mov	r0, r1
 8007096:	6023      	str	r3, [r4, #0]
 8007098:	f7ff fdac 	bl	8006bf4 <_sbrk>
 800709c:	1c43      	adds	r3, r0, #1
 800709e:	d102      	bne.n	80070a6 <_sbrk_r+0x1a>
 80070a0:	6823      	ldr	r3, [r4, #0]
 80070a2:	b103      	cbz	r3, 80070a6 <_sbrk_r+0x1a>
 80070a4:	602b      	str	r3, [r5, #0]
 80070a6:	bd38      	pop	{r3, r4, r5, pc}
 80070a8:	20004188 	.word	0x20004188

080070ac <strcat>:
 80070ac:	b510      	push	{r4, lr}
 80070ae:	4603      	mov	r3, r0
 80070b0:	781a      	ldrb	r2, [r3, #0]
 80070b2:	1c5c      	adds	r4, r3, #1
 80070b4:	b93a      	cbnz	r2, 80070c6 <strcat+0x1a>
 80070b6:	3b01      	subs	r3, #1
 80070b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070bc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070c0:	2a00      	cmp	r2, #0
 80070c2:	d1f9      	bne.n	80070b8 <strcat+0xc>
 80070c4:	bd10      	pop	{r4, pc}
 80070c6:	4623      	mov	r3, r4
 80070c8:	e7f2      	b.n	80070b0 <strcat+0x4>

080070ca <strchr>:
 80070ca:	b2c9      	uxtb	r1, r1
 80070cc:	4603      	mov	r3, r0
 80070ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070d2:	b11a      	cbz	r2, 80070dc <strchr+0x12>
 80070d4:	428a      	cmp	r2, r1
 80070d6:	d1f9      	bne.n	80070cc <strchr+0x2>
 80070d8:	4618      	mov	r0, r3
 80070da:	4770      	bx	lr
 80070dc:	2900      	cmp	r1, #0
 80070de:	bf18      	it	ne
 80070e0:	2300      	movne	r3, #0
 80070e2:	e7f9      	b.n	80070d8 <strchr+0xe>

080070e4 <strcpy>:
 80070e4:	4603      	mov	r3, r0
 80070e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070ea:	f803 2b01 	strb.w	r2, [r3], #1
 80070ee:	2a00      	cmp	r2, #0
 80070f0:	d1f9      	bne.n	80070e6 <strcpy+0x2>
 80070f2:	4770      	bx	lr

080070f4 <strstr>:
 80070f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070f6:	7803      	ldrb	r3, [r0, #0]
 80070f8:	b17b      	cbz	r3, 800711a <strstr+0x26>
 80070fa:	4604      	mov	r4, r0
 80070fc:	7823      	ldrb	r3, [r4, #0]
 80070fe:	4620      	mov	r0, r4
 8007100:	1c66      	adds	r6, r4, #1
 8007102:	b17b      	cbz	r3, 8007124 <strstr+0x30>
 8007104:	1e4a      	subs	r2, r1, #1
 8007106:	1e63      	subs	r3, r4, #1
 8007108:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800710c:	b14d      	cbz	r5, 8007122 <strstr+0x2e>
 800710e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8007112:	42af      	cmp	r7, r5
 8007114:	4634      	mov	r4, r6
 8007116:	d0f7      	beq.n	8007108 <strstr+0x14>
 8007118:	e7f0      	b.n	80070fc <strstr+0x8>
 800711a:	780b      	ldrb	r3, [r1, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	bf18      	it	ne
 8007120:	2000      	movne	r0, #0
 8007122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007124:	4618      	mov	r0, r3
 8007126:	e7fc      	b.n	8007122 <strstr+0x2e>

08007128 <__utoa>:
 8007128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800712a:	4b1d      	ldr	r3, [pc, #116]	; (80071a0 <__utoa+0x78>)
 800712c:	b08b      	sub	sp, #44	; 0x2c
 800712e:	4605      	mov	r5, r0
 8007130:	460c      	mov	r4, r1
 8007132:	466e      	mov	r6, sp
 8007134:	f103 0c20 	add.w	ip, r3, #32
 8007138:	6818      	ldr	r0, [r3, #0]
 800713a:	6859      	ldr	r1, [r3, #4]
 800713c:	4637      	mov	r7, r6
 800713e:	c703      	stmia	r7!, {r0, r1}
 8007140:	3308      	adds	r3, #8
 8007142:	4563      	cmp	r3, ip
 8007144:	463e      	mov	r6, r7
 8007146:	d1f7      	bne.n	8007138 <__utoa+0x10>
 8007148:	6818      	ldr	r0, [r3, #0]
 800714a:	791b      	ldrb	r3, [r3, #4]
 800714c:	713b      	strb	r3, [r7, #4]
 800714e:	1e93      	subs	r3, r2, #2
 8007150:	2b22      	cmp	r3, #34	; 0x22
 8007152:	6038      	str	r0, [r7, #0]
 8007154:	f04f 0300 	mov.w	r3, #0
 8007158:	d904      	bls.n	8007164 <__utoa+0x3c>
 800715a:	7023      	strb	r3, [r4, #0]
 800715c:	461c      	mov	r4, r3
 800715e:	4620      	mov	r0, r4
 8007160:	b00b      	add	sp, #44	; 0x2c
 8007162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007164:	1e66      	subs	r6, r4, #1
 8007166:	fbb5 f0f2 	udiv	r0, r5, r2
 800716a:	af0a      	add	r7, sp, #40	; 0x28
 800716c:	fb02 5510 	mls	r5, r2, r0, r5
 8007170:	443d      	add	r5, r7
 8007172:	1c59      	adds	r1, r3, #1
 8007174:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8007178:	f806 5f01 	strb.w	r5, [r6, #1]!
 800717c:	4605      	mov	r5, r0
 800717e:	b968      	cbnz	r0, 800719c <__utoa+0x74>
 8007180:	5460      	strb	r0, [r4, r1]
 8007182:	4423      	add	r3, r4
 8007184:	4622      	mov	r2, r4
 8007186:	1b19      	subs	r1, r3, r4
 8007188:	1b10      	subs	r0, r2, r4
 800718a:	4281      	cmp	r1, r0
 800718c:	dde7      	ble.n	800715e <__utoa+0x36>
 800718e:	7811      	ldrb	r1, [r2, #0]
 8007190:	7818      	ldrb	r0, [r3, #0]
 8007192:	f802 0b01 	strb.w	r0, [r2], #1
 8007196:	f803 1901 	strb.w	r1, [r3], #-1
 800719a:	e7f4      	b.n	8007186 <__utoa+0x5e>
 800719c:	460b      	mov	r3, r1
 800719e:	e7e2      	b.n	8007166 <__utoa+0x3e>
 80071a0:	080077e8 	.word	0x080077e8

080071a4 <__malloc_lock>:
 80071a4:	4770      	bx	lr

080071a6 <__malloc_unlock>:
 80071a6:	4770      	bx	lr

080071a8 <_init>:
 80071a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071aa:	bf00      	nop
 80071ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ae:	bc08      	pop	{r3}
 80071b0:	469e      	mov	lr, r3
 80071b2:	4770      	bx	lr

080071b4 <_fini>:
 80071b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071b6:	bf00      	nop
 80071b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ba:	bc08      	pop	{r3}
 80071bc:	469e      	mov	lr, r3
 80071be:	4770      	bx	lr
